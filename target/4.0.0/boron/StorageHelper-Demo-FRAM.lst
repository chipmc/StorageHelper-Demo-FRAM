
c:/Users/maple/OneDrive/SkardaLocal/Particle/ChipMC/StorageHelper-Demo-FRAM/target/4.0.0/boron/StorageHelper-Demo-FRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003b50  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7b70  000b7b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7b94  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e5ac  000b7b98  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  2003e620  2003e620  0002e620  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7c0c  000b7c0c  00027c0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7c34  000b7c34  00027c34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00112e3f  00000000  00000000  00027c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001293e  00000000  00000000  0013aa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000385b8  00000000  00000000  0014d3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a48  00000000  00000000  0018596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a768  00000000  00000000  001883b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374fe  00000000  00000000  00192b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c951  00000000  00000000  001ca01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132aac  00000000  00000000  0020696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007a20  00000000  00000000  00339418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f921 	bl	b7278 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f943 	bl	b72c8 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5ac 	.word	0x2003e5ac
   b404c:	000b7b98 	.word	0x000b7b98
   b4050:	2003e620 	.word	0x2003e620
   b4054:	2003e620 	.word	0x2003e620
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f002 f947 	bl	b62f4 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7b48 	.word	0x000b7b48
   b4080:	000b7b6c 	.word	0x000b7b6c

000b4084 <module_user_setup>:
   b4084:	f000 b860 	b.w	b4148 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f000 f889 	bl	b41a0 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f002 b8e7 	b.w	b6264 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f000 bf69 	b.w	b4f6c <malloc>

000b409a <_Znaj>:
   b409a:	f000 bf67 	b.w	b4f6c <malloc>

000b409e <_ZdlPvj>:
   b409e:	f000 bf6d 	b.w	b4f7c <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fe9a 	bl	b4de4 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b4b85 	.word	0x000b4b85
   b40b8:	000b75e0 	.word	0x000b75e0

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_ZN10MB85RC256VD1Ev>:
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
};

class MB85RC256V : public MB85RC {
   b40d8:	b510      	push	{r4, lr}
   b40da:	4b03      	ldr	r3, [pc, #12]	; (b40e8 <_ZN10MB85RC256VD1Ev+0x10>)
   b40dc:	6003      	str	r3, [r0, #0]
   b40de:	4604      	mov	r4, r0
   b40e0:	f000 faf2 	bl	b46c8 <_ZN6MB85RCD1Ev>
   b40e4:	4620      	mov	r0, r4
   b40e6:	bd10      	pop	{r4, pc}
   b40e8:	000b7654 	.word	0x000b7654

000b40ec <_ZN10MB85RC256VD0Ev>:
   b40ec:	b510      	push	{r4, lr}
   b40ee:	4604      	mov	r4, r0
   b40f0:	f7ff fff2 	bl	b40d8 <_ZN10MB85RC256VD1Ev>
   b40f4:	4620      	mov	r0, r4
   b40f6:	2110      	movs	r1, #16
   b40f8:	f7ff ffd1 	bl	b409e <_ZdlPvj>
   b40fc:	4620      	mov	r0, r4
   b40fe:	bd10      	pop	{r4, pc}

000b4100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4100:	4b0a      	ldr	r3, [pc, #40]	; (b412c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4102:	b510      	push	{r4, lr}
   b4104:	4604      	mov	r4, r0
   b4106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4108:	f001 fa5e 	bl	b55c8 <_ZN5spark10LogManager8instanceEv>
   b410c:	4621      	mov	r1, r4
   b410e:	f001 fc96 	bl	b5a3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4112:	f002 f9fd 	bl	b6510 <_Z16_fetch_usbserialv>
   b4116:	f002 f9ed 	bl	b64f4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b411a:	4620      	mov	r0, r4
   b411c:	4b04      	ldr	r3, [pc, #16]	; (b4130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b411e:	f840 3b04 	str.w	r3, [r0], #4
   b4122:	f001 fb27 	bl	b5774 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}
   b412a:	bf00      	nop
   b412c:	000b763c 	.word	0x000b763c
   b4130:	000b7624 	.word	0x000b7624

000b4134 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4134:	b510      	push	{r4, lr}
   b4136:	4604      	mov	r4, r0
    }
   b4138:	f7ff ffe2 	bl	b4100 <_ZN5spark16SerialLogHandlerD1Ev>
   b413c:	4620      	mov	r0, r4
   b413e:	2124      	movs	r1, #36	; 0x24
   b4140:	f7ff ffad 	bl	b409e <_ZdlPvj>
   b4144:	4620      	mov	r0, r4
   b4146:	bd10      	pop	{r4, pc}

000b4148 <setup>:

SerialLogHandler logHandler(LOG_LEVEL_TRACE);

MB85RC256V fram1(Wire, 0);

void setup() {
   b4148:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b414a:	2000      	movs	r0, #0
   b414c:	f000 fd2a 	bl	b4ba4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4150:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4154:	4604      	mov	r4, r0
   b4156:	2000      	movs	r0, #0
   b4158:	f000 fd24 	bl	b4ba4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b415c:	1b00      	subs	r0, r0, r4
   b415e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4162:	42a8      	cmp	r0, r5
   b4164:	f171 0300 	sbcs.w	r3, r1, #0
   b4168:	d207      	bcs.n	b417a <setup+0x32>
    // Optional: Enable to make it easier to see debug USB serial messages at startup
    waitFor(Serial.isConnected, 10000);
   b416a:	f002 f9d1 	bl	b6510 <_Z16_fetch_usbserialv>
   b416e:	f002 f9c4 	bl	b64fa <_ZN9USBSerial11isConnectedEv>
   b4172:	b910      	cbnz	r0, b417a <setup+0x32>
            spark_process();
   b4174:	f000 fee2 	bl	b4f3c <spark_process>
        while (_while() && !_condition()) {
   b4178:	e7ed      	b.n	b4156 <setup+0xe>
   b417a:	f002 f9c9 	bl	b6510 <_Z16_fetch_usbserialv>
   b417e:	f002 f9bc 	bl	b64fa <_ZN9USBSerial11isConnectedEv>
    delay(2000);
   b4182:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4186:	f002 f841 	bl	b620c <delay>

    data.setup();
   b418a:	f000 f9cf 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b418e:	6803      	ldr	r3, [r0, #0]
   b4190:	681b      	ldr	r3, [r3, #0]
   b4192:	4798      	blx	r3
	Particle.connect();

}
   b4194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4198:	f000 bed8 	b.w	b4f4c <spark_cloud_flag_connect>
   b419c:	0000      	movs	r0, r0
	...

000b41a0 <loop>:

void loop() {
   b41a0:	b510      	push	{r4, lr}

    static unsigned long lastCheck = 0;
    if (millis() - lastCheck >= 10000) {
   b41a2:	4c2d      	ldr	r4, [pc, #180]	; (b4258 <loop+0xb8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a4:	f000 fcf6 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
   b41a8:	6823      	ldr	r3, [r4, #0]
   b41aa:	1ac0      	subs	r0, r0, r3
   b41ac:	f242 730f 	movw	r3, #9999	; 0x270f
   b41b0:	4298      	cmp	r0, r3
   b41b2:	d949      	bls.n	b4248 <loop+0xa8>
   b41b4:	f000 fcee 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
        lastCheck = millis();
   b41b8:	6020      	str	r0, [r4, #0]

        data.load();
   b41ba:	f000 f9b7 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b41be:	6803      	ldr	r3, [r0, #0]
   b41c0:	685b      	ldr	r3, [r3, #4]
   b41c2:	4798      	blx	r3

        data.logData("after loading");
   b41c4:	f000 f9b2 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b41c8:	4924      	ldr	r1, [pc, #144]	; (b425c <loop+0xbc>)
   b41ca:	f000 fa65 	bl	b4698 <_ZN16MyPersistentData7logDataEPKc>

        data.setValue_test1(data.getValue_test1() + 1);
   b41ce:	f000 f9ad 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b41d2:	4604      	mov	r4, r0
   b41d4:	f000 f9aa 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b41d8:	f000 f9b8 	bl	b454c <_ZNK16MyPersistentData14getValue_test1Ev>
   b41dc:	1c41      	adds	r1, r0, #1
   b41de:	4620      	mov	r0, r4
   b41e0:	f000 f9c5 	bl	b456e <_ZN16MyPersistentData14setValue_test1Ei>
        data.setValue_test2(!data.getValue_test2());
   b41e4:	f000 f9a2 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b41e8:	4604      	mov	r4, r0
   b41ea:	f000 f99f 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b41ee:	f000 f9db 	bl	b45a8 <_ZNK16MyPersistentData14getValue_test2Ev>
   b41f2:	f080 0001 	eor.w	r0, r0, #1
   b41f6:	b2c1      	uxtb	r1, r0
   b41f8:	4620      	mov	r0, r4
   b41fa:	f000 f9e6 	bl	b45ca <_ZN16MyPersistentData14setValue_test2Eb>
        data.setValue_test3(data.getValue_test3() - 0.1);
   b41fe:	f000 f995 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b4202:	4604      	mov	r4, r0
   b4204:	f000 f992 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b4208:	f000 f9fe 	bl	b4608 <_ZNK16MyPersistentData14getValue_test3Ev>
   b420c:	a310      	add	r3, pc, #64	; (adr r3, b4250 <loop+0xb0>)
   b420e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4212:	ec51 0b10 	vmov	r0, r1, d0
   b4216:	f002 fde1 	bl	b6ddc <__aeabi_dsub>
   b421a:	ec41 0b10 	vmov	d0, r0, r1
   b421e:	4620      	mov	r0, r4
   b4220:	f000 fa12 	bl	b4648 <_ZN16MyPersistentData14setValue_test3Ed>
        data.setValue_test4("testing!"); 
   b4224:	f000 f982 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b4228:	490d      	ldr	r1, [pc, #52]	; (b4260 <loop+0xc0>)
   b422a:	f000 fa30 	bl	b468e <_ZN16MyPersistentData14setValue_test4EPKc>

        data.logData("after update");
   b422e:	f000 f97d 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b4232:	490c      	ldr	r1, [pc, #48]	; (b4264 <loop+0xc4>)
   b4234:	f000 fa30 	bl	b4698 <_ZN16MyPersistentData7logDataEPKc>

        data.flush(true);
   b4238:	f000 f978 	bl	b452c <_ZN16MyPersistentData8instanceEv>
   b423c:	6803      	ldr	r3, [r0, #0]
    }  
   b423e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        data.flush(true);
   b4242:	68db      	ldr	r3, [r3, #12]
   b4244:	2101      	movs	r1, #1
   b4246:	4718      	bx	r3
   b4248:	bd10      	pop	{r4, pc}
   b424a:	bf00      	nop
   b424c:	f3af 8000 	nop.w
   b4250:	9999999a 	.word	0x9999999a
   b4254:	3fb99999 	.word	0x3fb99999
   b4258:	2003e62c 	.word	0x2003e62c
   b425c:	000b75f5 	.word	0x000b75f5
   b4260:	000b7603 	.word	0x000b7603
   b4264:	000b760c 	.word	0x000b760c

000b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4268:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b426a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b426e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4270:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4272:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4276:	42ae      	cmp	r6, r5
   b4278:	d004      	beq.n	b4284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b427a:	4628      	mov	r0, r5
   b427c:	f000 fefe 	bl	b507c <_ZN6StringD1Ev>
   b4280:	3514      	adds	r5, #20
   b4282:	e7f8      	b.n	b4276 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4284:	6820      	ldr	r0, [r4, #0]
   b4286:	f000 fe79 	bl	b4f7c <free>
    AllocatorT::free(data_);
}
   b428a:	4620      	mov	r0, r4
   b428c:	bd70      	pop	{r4, r5, r6, pc}

000b428e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b428e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4292:	4604      	mov	r4, r0
   b4294:	460d      	mov	r5, r1
   b4296:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4298:	d916      	bls.n	b42c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b429a:	4290      	cmp	r0, r2
   b429c:	d215      	bcs.n	b42ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b429e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b42a2:	1a75      	subs	r5, r6, r1
   b42a4:	f1a1 0714 	sub.w	r7, r1, #20
   b42a8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b42aa:	42b7      	cmp	r7, r6
   b42ac:	d01c      	beq.n	b42e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b42ae:	b12c      	cbz	r4, b42bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b42b0:	4631      	mov	r1, r6
   b42b2:	4620      	mov	r0, r4
   b42b4:	f000 ff4a 	bl	b514c <_ZN6StringC1EOS_>
   b42b8:	7c33      	ldrb	r3, [r6, #16]
   b42ba:	7423      	strb	r3, [r4, #16]
   b42bc:	4630      	mov	r0, r6
   b42be:	f000 fedd 	bl	b507c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42c2:	3e14      	subs	r6, #20
   b42c4:	3c14      	subs	r4, #20
   b42c6:	e7f0      	b.n	b42aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42c8:	d00e      	beq.n	b42e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42ca:	42b5      	cmp	r5, r6
   b42cc:	d00c      	beq.n	b42e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b42ce:	b12c      	cbz	r4, b42dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b42d0:	4629      	mov	r1, r5
   b42d2:	4620      	mov	r0, r4
   b42d4:	f000 ff3a 	bl	b514c <_ZN6StringC1EOS_>
   b42d8:	7c2b      	ldrb	r3, [r5, #16]
   b42da:	7423      	strb	r3, [r4, #16]
   b42dc:	4628      	mov	r0, r5
   b42de:	f000 fecd 	bl	b507c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42e2:	3514      	adds	r5, #20
   b42e4:	3414      	adds	r4, #20
   b42e6:	e7f0      	b.n	b42ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42ee:	2300      	movs	r3, #0
   b42f0:	e9c0 3300 	strd	r3, r3, [r0]
   b42f4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42f6:	684f      	ldr	r7, [r1, #4]
   b42f8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42fa:	4604      	mov	r4, r0
   b42fc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42fe:	dd23      	ble.n	b4348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4300:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4304:	fb08 f007 	mul.w	r0, r8, r7
   b4308:	f000 fe30 	bl	b4f6c <malloc>
            if (!d) {
   b430c:	4605      	mov	r5, r0
   b430e:	b1d8      	cbz	r0, b4348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4310:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4314:	fb08 1202 	mla	r2, r8, r2, r1
   b4318:	f7ff ffb9 	bl	b428e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b431c:	6820      	ldr	r0, [r4, #0]
   b431e:	f000 fe2d 	bl	b4f7c <free>
        data_ = d;
   b4322:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4324:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4326:	e9d6 7300 	ldrd	r7, r3, [r6]
   b432a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b432e:	45b8      	cmp	r8, r7
   b4330:	d008      	beq.n	b4344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4332:	4639      	mov	r1, r7
   b4334:	4628      	mov	r0, r5
   b4336:	f000 ff23 	bl	b5180 <_ZN6StringC1ERKS_>
   b433a:	7c3b      	ldrb	r3, [r7, #16]
   b433c:	742b      	strb	r3, [r5, #16]
   b433e:	3714      	adds	r7, #20
   b4340:	3514      	adds	r5, #20
   b4342:	e7f4      	b.n	b432e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4344:	6873      	ldr	r3, [r6, #4]
   b4346:	6063      	str	r3, [r4, #4]
}
   b4348:	4620      	mov	r0, r4
   b434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4350 <_GLOBAL__sub_I_SystemMode>:
   b4350:	b5f0      	push	{r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
   b4352:	2100      	movs	r1, #0
   b4354:	b08d      	sub	sp, #52	; 0x34
SYSTEM_THREAD(ENABLED);
   b4356:	2001      	movs	r0, #1
   b4358:	f000 fd74 	bl	b4e44 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b435c:	4b27      	ldr	r3, [pc, #156]	; (b43fc <_GLOBAL__sub_I_SystemMode+0xac>)
    SleepResult() {}
   b435e:	4a28      	ldr	r2, [pc, #160]	; (b4400 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4360:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4362:	2400      	movs	r4, #0
   b4364:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4368:	2002      	movs	r0, #2
   b436a:	f000 fd5b 	bl	b4e24 <set_system_mode>
        capacity_(0) {
   b436e:	e9cd 4400 	strd	r4, r4, [sp]
   b4372:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4374:	f002 f8cc 	bl	b6510 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4378:	4d22      	ldr	r5, [pc, #136]	; (b4404 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b437a:	4606      	mov	r6, r0
   b437c:	4669      	mov	r1, sp
   b437e:	a803      	add	r0, sp, #12
   b4380:	f7ff ffb3 	bl	b42ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4384:	462f      	mov	r7, r5
        stream_(&stream) {
   b4386:	a903      	add	r1, sp, #12
   b4388:	a806      	add	r0, sp, #24
   b438a:	f7ff ffae 	bl	b42ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b438e:	4b1e      	ldr	r3, [pc, #120]	; (b4408 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b4390:	f847 3b04 	str.w	r3, [r7], #4
   b4394:	a906      	add	r1, sp, #24
   b4396:	a809      	add	r0, sp, #36	; 0x24
   b4398:	f7ff ffa7 	bl	b42ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b439c:	aa09      	add	r2, sp, #36	; 0x24
   b439e:	2101      	movs	r1, #1
   b43a0:	4638      	mov	r0, r7
   b43a2:	f001 fc2f 	bl	b5c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b43a6:	a809      	add	r0, sp, #36	; 0x24
   b43a8:	f7ff ff5e 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b43ac:	a806      	add	r0, sp, #24
   b43ae:	f7ff ff5b 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43b2:	4b16      	ldr	r3, [pc, #88]	; (b440c <_GLOBAL__sub_I_SystemMode+0xbc>)
   b43b4:	602b      	str	r3, [r5, #0]
   b43b6:	622e      	str	r6, [r5, #32]
   b43b8:	a803      	add	r0, sp, #12
   b43ba:	f7ff ff55 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43be:	4b14      	ldr	r3, [pc, #80]	; (b4410 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b43c0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b43c2:	f002 f8a5 	bl	b6510 <_Z16_fetch_usbserialv>
   b43c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43ca:	f002 f88f 	bl	b64ec <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b43ce:	f001 f8fb 	bl	b55c8 <_ZN5spark10LogManager8instanceEv>
   b43d2:	4629      	mov	r1, r5
   b43d4:	f001 faec 	bl	b59b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   b43d8:	4668      	mov	r0, sp
   b43da:	f7ff ff45 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
MB85RC256V fram1(Wire, 0);
   b43de:	f002 fcd1 	bl	b6d84 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC256V(TwoWire &wire, int addr = 0) : MB85RC(wire, 32768, addr) {};
   b43e2:	4d0c      	ldr	r5, [pc, #48]	; (b4414 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b43e4:	4601      	mov	r1, r0
   b43e6:	4623      	mov	r3, r4
   b43e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   b43ec:	4628      	mov	r0, r5
   b43ee:	f000 f977 	bl	b46e0 <_ZN6MB85RCC1ER7TwoWireji>
   b43f2:	4b09      	ldr	r3, [pc, #36]	; (b4418 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b43f4:	602b      	str	r3, [r5, #0]
   b43f6:	b00d      	add	sp, #52	; 0x34
   b43f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b43fa:	bf00      	nop
   b43fc:	2003e620 	.word	0x2003e620
   b4400:	ffff0000 	.word	0xffff0000
   b4404:	2003e640 	.word	0x2003e640
   b4408:	000b7624 	.word	0x000b7624
   b440c:	000b7820 	.word	0x000b7820
   b4410:	000b763c 	.word	0x000b763c
   b4414:	2003e630 	.word	0x2003e630
   b4418:	000b7654 	.word	0x000b7654

000b441c <_ZN16MyPersistentDataD1Ev>:
}

MyPersistentData::MyPersistentData() : StorageHelperRK::PersistentDataFRAM(fram1, 0, &myData.header, sizeof(MyData), DATA_MAGIC, DATA_VERSION) {
};

MyPersistentData::~MyPersistentData() {
   b441c:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b441e:	4b04      	ldr	r3, [pc, #16]	; (b4430 <_ZN16MyPersistentDataD1Ev+0x14>)
   b4420:	6003      	str	r3, [r0, #0]
   b4422:	4604      	mov	r4, r0
            if (handle_) {
   b4424:	6840      	ldr	r0, [r0, #4]
   b4426:	b108      	cbz	r0, b442c <_ZN16MyPersistentDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b4428:	f000 fbcc 	bl	b4bc4 <os_mutex_recursive_destroy>
}
   b442c:	4620      	mov	r0, r4
   b442e:	bd10      	pop	{r4, pc}
   b4430:	000b7730 	.word	0x000b7730

000b4434 <_ZN16MyPersistentDataD0Ev>:
MyPersistentData::~MyPersistentData() {
   b4434:	b510      	push	{r4, lr}
   b4436:	4604      	mov	r4, r0
}
   b4438:	f7ff fff0 	bl	b441c <_ZN16MyPersistentDataD1Ev>
   b443c:	4620      	mov	r0, r4
   b443e:	2158      	movs	r1, #88	; 0x58
   b4440:	f7ff fe2d 	bl	b409e <_ZdlPvj>
   b4444:	4620      	mov	r0, r4
   b4446:	bd10      	pop	{r4, pc}

000b4448 <_ZN16MyPersistentData5setupEv>:

void MyPersistentData::setup() {
    fram1.begin();
   b4448:	4801      	ldr	r0, [pc, #4]	; (b4450 <_ZN16MyPersistentData5setupEv+0x8>)
   b444a:	f000 b953 	b.w	b46f4 <_ZN6MB85RC5beginEv>
   b444e:	bf00      	nop
   b4450:	2003e630 	.word	0x2003e630

000b4454 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4454:	b40e      	push	{r1, r2, r3}
   b4456:	b500      	push	{lr}
   b4458:	b08c      	sub	sp, #48	; 0x30
   b445a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b445c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4460:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4464:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4466:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b446a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b446c:	6801      	ldr	r1, [r0, #0]
   b446e:	aa04      	add	r2, sp, #16
   b4470:	201e      	movs	r0, #30
    attr.flags = 0;
   b4472:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4476:	f000 fcbd 	bl	b4df4 <log_message_v>
}
   b447a:	b00c      	add	sp, #48	; 0x30
   b447c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4480:	b003      	add	sp, #12
   b4482:	4770      	bx	lr

000b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b4484:	b510      	push	{r4, lr}
            if (!handle_) {
   b4486:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b4488:	4604      	mov	r4, r0
            if (!handle_) {
   b448a:	b90b      	cbnz	r3, b4490 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b448c:	f000 fb92 	bl	b4bb4 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b4490:	6820      	ldr	r0, [r4, #0]
        }
   b4492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b4496:	f000 bb9d 	b.w	b4bd4 <os_mutex_recursive_lock>

000b449a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b449a:	b538      	push	{r3, r4, r5, lr}
   b449c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b449e:	3004      	adds	r0, #4
   b44a0:	f7ff fff0 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b44a4:	6a20      	ldr	r0, [r4, #32]
   b44a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b44a8:	6803      	ldr	r3, [r0, #0]
   b44aa:	68dd      	ldr	r5, [r3, #12]
   b44ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b44b0:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b44b2:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b44b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b44b8:	f000 bb94 	b.w	b4be4 <os_mutex_recursive_unlock>

000b44bc <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b44bc:	b538      	push	{r3, r4, r5, lr}
   b44be:	4604      	mov	r4, r0
   b44c0:	3004      	adds	r0, #4
   b44c2:	f7ff ffdf 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b44c6:	6a20      	ldr	r0, [r4, #32]
   b44c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b44ca:	6803      	ldr	r3, [r0, #0]
   b44cc:	689d      	ldr	r5, [r3, #8]
   b44ce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b44d2:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b44d4:	68a2      	ldr	r2, [r4, #8]
   b44d6:	6823      	ldr	r3, [r4, #0]
   b44d8:	88d1      	ldrh	r1, [r2, #6]
   b44da:	695b      	ldr	r3, [r3, #20]
   b44dc:	4620      	mov	r0, r4
   b44de:	4798      	blx	r3
   b44e0:	b918      	cbnz	r0, b44ea <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b44e2:	6823      	ldr	r3, [r4, #0]
   b44e4:	4620      	mov	r0, r4
   b44e6:	699b      	ldr	r3, [r3, #24]
   b44e8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b44ea:	6860      	ldr	r0, [r4, #4]
   b44ec:	f000 fb7a 	bl	b4be4 <os_mutex_recursive_unlock>
        }
   b44f0:	2001      	movs	r0, #1
   b44f2:	bd38      	pop	{r3, r4, r5, pc}

000b44f4 <_ZN16MyPersistentDataC1Ev>:
MyPersistentData::MyPersistentData() : StorageHelperRK::PersistentDataFRAM(fram1, 0, &myData.header, sizeof(MyData), DATA_MAGIC, DATA_VERSION) {
   b44f4:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b44f8:	6081      	str	r1, [r0, #8]
   b44fa:	4909      	ldr	r1, [pc, #36]	; (b4520 <_ZN16MyPersistentDataC1Ev+0x2c>)
   b44fc:	f04f 0c30 	mov.w	ip, #48	; 0x30
   b4500:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b4504:	2101      	movs	r1, #1
   b4506:	8281      	strh	r1, [r0, #20]
   b4508:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b450c:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b450e:	4905      	ldr	r1, [pc, #20]	; (b4524 <_ZN16MyPersistentDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b4510:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b4512:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b4516:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b4518:	6182      	str	r2, [r0, #24]
   b451a:	4a03      	ldr	r2, [pc, #12]	; (b4528 <_ZN16MyPersistentDataC1Ev+0x34>)
   b451c:	6002      	str	r2, [r0, #0]
};
   b451e:	4770      	bx	lr
   b4520:	20a99e73 	.word	0x20a99e73
   b4524:	2003e630 	.word	0x2003e630
   b4528:	000b7684 	.word	0x000b7684

000b452c <_ZN16MyPersistentData8instanceEv>:
MyPersistentData &MyPersistentData::instance() {
   b452c:	b510      	push	{r4, lr}
    if (!_instance) {
   b452e:	4c06      	ldr	r4, [pc, #24]	; (b4548 <_ZN16MyPersistentData8instanceEv+0x1c>)
   b4530:	6823      	ldr	r3, [r4, #0]
   b4532:	b93b      	cbnz	r3, b4544 <_ZN16MyPersistentData8instanceEv+0x18>
        _instance = new MyPersistentData();
   b4534:	2058      	movs	r0, #88	; 0x58
   b4536:	f7ff fdae 	bl	b4096 <_Znwj>
   b453a:	4603      	mov	r3, r0
   b453c:	b108      	cbz	r0, b4542 <_ZN16MyPersistentData8instanceEv+0x16>
   b453e:	f7ff ffd9 	bl	b44f4 <_ZN16MyPersistentDataC1Ev>
   b4542:	6023      	str	r3, [r4, #0]
}
   b4544:	6820      	ldr	r0, [r4, #0]
   b4546:	bd10      	pop	{r4, pc}
   b4548:	2003e664 	.word	0x2003e664

000b454c <_ZNK16MyPersistentData14getValue_test1Ev>:
void MyPersistentData::loop() {
    // Put your code to run during the application thread loop here
}

int MyPersistentData::getValue_test1() const 
{
   b454c:	b538      	push	{r3, r4, r5, lr}
   b454e:	4604      	mov	r4, r0
   b4550:	3004      	adds	r0, #4
   b4552:	f7ff ff97 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b4556:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b4558:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b455a:	3b04      	subs	r3, #4
   b455c:	2b0f      	cmp	r3, #15
                    result = *(const T *)p;
   b455e:	bf86      	itte	hi
   b4560:	68a3      	ldrhi	r3, [r4, #8]
   b4562:	691d      	ldrhi	r5, [r3, #16]
            T result = 0;
   b4564:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b4566:	f000 fb3d 	bl	b4be4 <os_mutex_recursive_unlock>
    return getValue<int>(offsetof(MyData, test1));
}
   b456a:	4628      	mov	r0, r5
   b456c:	bd38      	pop	{r3, r4, r5, pc}

000b456e <_ZN16MyPersistentData14setValue_test1Ei>:


void MyPersistentData::setValue_test1(int value) {
   b456e:	b538      	push	{r3, r4, r5, lr}
   b4570:	4604      	mov	r4, r0
   b4572:	3004      	adds	r0, #4
   b4574:	460d      	mov	r5, r1
   b4576:	f7ff ff85 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b457a:	68e3      	ldr	r3, [r4, #12]
   b457c:	3b04      	subs	r3, #4
   b457e:	2b0f      	cmp	r3, #15
   b4580:	d90d      	bls.n	b459e <_ZN16MyPersistentData14setValue_test1Ei+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b4582:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b4584:	691a      	ldr	r2, [r3, #16]
   b4586:	4295      	cmp	r5, r2
   b4588:	d009      	beq.n	b459e <_ZN16MyPersistentData14setValue_test1Ei+0x30>
                        *(T *)p = value;
   b458a:	611d      	str	r5, [r3, #16]
                        savedDataHeader->hash = getHash();
   b458c:	4620      	mov	r0, r4
   b458e:	68a5      	ldr	r5, [r4, #8]
   b4590:	f000 fa30 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4594:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b4596:	6823      	ldr	r3, [r4, #0]
   b4598:	4620      	mov	r0, r4
   b459a:	691b      	ldr	r3, [r3, #16]
   b459c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b459e:	6860      	ldr	r0, [r4, #4]
    setValue<int>(offsetof(MyData, test1), value);
}
   b45a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b45a4:	f000 bb1e 	b.w	b4be4 <os_mutex_recursive_unlock>

000b45a8 <_ZNK16MyPersistentData14getValue_test2Ev>:

bool MyPersistentData::getValue_test2() const {
   b45a8:	b538      	push	{r3, r4, r5, lr}
   b45aa:	4604      	mov	r4, r0
   b45ac:	3004      	adds	r0, #4
   b45ae:	f7ff ff69 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b45b2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b45b4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b45b6:	3b01      	subs	r3, #1
   b45b8:	2b13      	cmp	r3, #19
                    result = *(const T *)p;
   b45ba:	bf86      	itte	hi
   b45bc:	68a3      	ldrhi	r3, [r4, #8]
   b45be:	7d1d      	ldrbhi	r5, [r3, #20]
            T result = 0;
   b45c0:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b45c2:	f000 fb0f 	bl	b4be4 <os_mutex_recursive_unlock>
    return getValue<bool>(offsetof(MyData, test2));
}
   b45c6:	4628      	mov	r0, r5
   b45c8:	bd38      	pop	{r3, r4, r5, pc}

000b45ca <_ZN16MyPersistentData14setValue_test2Eb>:

void MyPersistentData::setValue_test2(bool value) {
   b45ca:	b538      	push	{r3, r4, r5, lr}
   b45cc:	4604      	mov	r4, r0
   b45ce:	3004      	adds	r0, #4
   b45d0:	460d      	mov	r5, r1
   b45d2:	f7ff ff57 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b45d6:	68e3      	ldr	r3, [r4, #12]
   b45d8:	3b01      	subs	r3, #1
   b45da:	2b13      	cmp	r3, #19
   b45dc:	d90d      	bls.n	b45fa <_ZN16MyPersistentData14setValue_test2Eb+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b45de:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b45e0:	7d1a      	ldrb	r2, [r3, #20]
   b45e2:	42aa      	cmp	r2, r5
   b45e4:	d009      	beq.n	b45fa <_ZN16MyPersistentData14setValue_test2Eb+0x30>
                        *(T *)p = value;
   b45e6:	751d      	strb	r5, [r3, #20]
                        savedDataHeader->hash = getHash();
   b45e8:	4620      	mov	r0, r4
   b45ea:	68a5      	ldr	r5, [r4, #8]
   b45ec:	f000 fa02 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b45f0:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b45f2:	6823      	ldr	r3, [r4, #0]
   b45f4:	4620      	mov	r0, r4
   b45f6:	691b      	ldr	r3, [r3, #16]
   b45f8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b45fa:	6860      	ldr	r0, [r4, #4]
    setValue<bool>(offsetof(MyData, test2), value);
}
   b45fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4600:	f000 baf0 	b.w	b4be4 <os_mutex_recursive_unlock>
   b4604:	0000      	movs	r0, r0
	...

000b4608 <_ZNK16MyPersistentData14getValue_test3Ev>:

double MyPersistentData::getValue_test3() const {
   b4608:	b510      	push	{r4, lr}
   b460a:	4604      	mov	r4, r0
   b460c:	ed2d 8b02 	vpush	{d8}
   b4610:	3004      	adds	r0, #4
   b4612:	f7ff ff37 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b4616:	68e3      	ldr	r3, [r4, #12]
   b4618:	3b08      	subs	r3, #8
   b461a:	2b17      	cmp	r3, #23
   b461c:	d90c      	bls.n	b4638 <_ZNK16MyPersistentData14getValue_test3Ev+0x30>
                    result = *(const T *)p;
   b461e:	68a3      	ldr	r3, [r4, #8]
   b4620:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b4624:	6860      	ldr	r0, [r4, #4]
   b4626:	f000 fadd 	bl	b4be4 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(MyData, test3));
}
   b462a:	eeb0 0a48 	vmov.f32	s0, s16
   b462e:	eef0 0a68 	vmov.f32	s1, s17
   b4632:	ecbd 8b02 	vpop	{d8}
   b4636:	bd10      	pop	{r4, pc}
            T result = 0;
   b4638:	ed9f 8b01 	vldr	d8, [pc, #4]	; b4640 <_ZNK16MyPersistentData14getValue_test3Ev+0x38>
   b463c:	e7f2      	b.n	b4624 <_ZNK16MyPersistentData14getValue_test3Ev+0x1c>
   b463e:	bf00      	nop
	...

000b4648 <_ZN16MyPersistentData14setValue_test3Ed>:

void MyPersistentData::setValue_test3(double value) {
   b4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b464a:	4604      	mov	r4, r0
   b464c:	3004      	adds	r0, #4
   b464e:	ec57 6b10 	vmov	r6, r7, d0
   b4652:	f7ff ff17 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b4656:	68e3      	ldr	r3, [r4, #12]
   b4658:	3b08      	subs	r3, #8
   b465a:	2b17      	cmp	r3, #23
   b465c:	d912      	bls.n	b4684 <_ZN16MyPersistentData14setValue_test3Ed+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b465e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b4660:	4630      	mov	r0, r6
   b4662:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b4666:	4639      	mov	r1, r7
   b4668:	f002 fdc6 	bl	b71f8 <__aeabi_dcmpeq>
   b466c:	b950      	cbnz	r0, b4684 <_ZN16MyPersistentData14setValue_test3Ed+0x3c>
                        *(T *)p = value;
   b466e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b4672:	4620      	mov	r0, r4
   b4674:	68a5      	ldr	r5, [r4, #8]
   b4676:	f000 f9bd 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b467a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b467c:	6823      	ldr	r3, [r4, #0]
   b467e:	4620      	mov	r0, r4
   b4680:	691b      	ldr	r3, [r3, #16]
   b4682:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b4684:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(MyData, test3), value);
}
   b4686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b468a:	f000 baab 	b.w	b4be4 <os_mutex_recursive_unlock>

000b468e <_ZN16MyPersistentData14setValue_test4EPKc>:
String MyPersistentData::getValue_test4() const {
    String result;
    getValueString(offsetof(MyData, test4), sizeof(MyData::test4), result);
    return result;
}
bool MyPersistentData::setValue_test4(const char *str) {
   b468e:	460b      	mov	r3, r1
    return setValueString(offsetof(MyData, test4), sizeof(MyData::test4), str);
   b4690:	220a      	movs	r2, #10
   b4692:	2120      	movs	r1, #32
   b4694:	f000 b9c6 	b.w	b4a24 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b4698 <_ZN16MyPersistentData7logDataEPKc>:
}

void MyPersistentData::logData(const char *msg) {
   b4698:	b530      	push	{r4, r5, lr}
   b469a:	b087      	sub	sp, #28
    Log.info("%s: %d, %d, %lf, %s", msg, myData.test1, (int)myData.test2, myData.test3, myData.test4);
   b469c:	f100 0348 	add.w	r3, r0, #72	; 0x48
   b46a0:	9304      	str	r3, [sp, #16]
   b46a2:	e9d0 4510 	ldrd	r4, r5, [r0, #64]	; 0x40
   b46a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b46aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b46ae:	9300      	str	r3, [sp, #0]
   b46b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b46b2:	4803      	ldr	r0, [pc, #12]	; (b46c0 <_ZN16MyPersistentData7logDataEPKc+0x28>)
void MyPersistentData::logData(const char *msg) {
   b46b4:	460a      	mov	r2, r1
    Log.info("%s: %d, %d, %lf, %s", msg, myData.test1, (int)myData.test2, myData.test3, myData.test4);
   b46b6:	4903      	ldr	r1, [pc, #12]	; (b46c4 <_ZN16MyPersistentData7logDataEPKc+0x2c>)
   b46b8:	f7ff fecc 	bl	b4454 <_ZNK5spark6Logger4infoEPKcz>
   b46bc:	b007      	add	sp, #28
   b46be:	bd30      	pop	{r4, r5, pc}
   b46c0:	2003e690 	.word	0x2003e690
   b46c4:	000b7668 	.word	0x000b7668

000b46c8 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b46c8:	4770      	bx	lr

000b46ca <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b46ca:	b510      	push	{r4, lr}
}
   b46cc:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b46ce:	4604      	mov	r4, r0
}
   b46d0:	f7ff fce5 	bl	b409e <_ZdlPvj>
   b46d4:	4620      	mov	r0, r4
   b46d6:	bd10      	pop	{r4, pc}

000b46d8 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b46d8:	6803      	ldr	r3, [r0, #0]
   b46da:	b2c9      	uxtb	r1, r1
   b46dc:	689b      	ldr	r3, [r3, #8]
   b46de:	4718      	bx	r3

000b46e0 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b46e0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b46e2:	4d03      	ldr	r5, [pc, #12]	; (b46f0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b46e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b46e8:	e9c0 5100 	strd	r5, r1, [r0]
}
   b46ec:	bd30      	pop	{r4, r5, pc}
   b46ee:	bf00      	nop
   b46f0:	000b76b0 	.word	0x000b76b0

000b46f4 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b46f4:	6840      	ldr	r0, [r0, #4]
   b46f6:	f002 b817 	b.w	b6728 <_ZN7TwoWire5beginEv>

000b46fa <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b46fa:	b510      	push	{r4, lr}
   b46fc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b46fe:	6800      	ldr	r0, [r0, #0]
   b4700:	f002 f855 	bl	b67ae <_ZN7TwoWire6unlockEv>
   b4704:	4620      	mov	r0, r4
   b4706:	bd10      	pop	{r4, pc}

000b4708 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b4708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b470c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b470e:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4710:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b4712:	460d      	mov	r5, r1
   b4714:	4616      	mov	r6, r2
   b4716:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b4718:	f002 f840 	bl	b679c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b471c:	b1a7      	cbz	r7, b4748 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b471e:	68e1      	ldr	r1, [r4, #12]
   b4720:	6860      	ldr	r0, [r4, #4]
   b4722:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b4726:	f002 f832 	bl	b678e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b472a:	0a29      	lsrs	r1, r5, #8
   b472c:	6860      	ldr	r0, [r4, #4]
   b472e:	f7ff ffd3 	bl	b46d8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b4732:	4629      	mov	r1, r5
   b4734:	6860      	ldr	r0, [r4, #4]
   b4736:	f7ff ffcf 	bl	b46d8 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b473a:	6860      	ldr	r0, [r4, #4]
   b473c:	2100      	movs	r1, #0
   b473e:	f002 f829 	bl	b6794 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b4742:	b148      	cbz	r0, b4758 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b4744:	2400      	movs	r4, #0
   b4746:	e000      	b.n	b474a <_ZN6MB85RC8readDataEjPhj+0x42>
   b4748:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b474a:	a801      	add	r0, sp, #4
   b474c:	f7ff ffd5 	bl	b46fa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b4750:	4620      	mov	r0, r4
   b4752:	b003      	add	sp, #12
   b4754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b4758:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b475a:	7b21      	ldrb	r1, [r4, #12]
   b475c:	6860      	ldr	r0, [r4, #4]
   b475e:	46b8      	mov	r8, r7
   b4760:	bf28      	it	cs
   b4762:	f04f 0820 	movcs.w	r8, #32
   b4766:	2301      	movs	r3, #1
   b4768:	4642      	mov	r2, r8
   b476a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b476e:	f001 fff8 	bl	b6762 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b4772:	f002 fb07 	bl	b6d84 <_Z19__fetch_global_Wirev>
   b4776:	6803      	ldr	r3, [r0, #0]
   b4778:	691b      	ldr	r3, [r3, #16]
   b477a:	4798      	blx	r3
   b477c:	4540      	cmp	r0, r8
   b477e:	dbe1      	blt.n	b4744 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b4780:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b4784:	f002 fafe 	bl	b6d84 <_Z19__fetch_global_Wirev>
   b4788:	6803      	ldr	r3, [r0, #0]
   b478a:	695b      	ldr	r3, [r3, #20]
   b478c:	4798      	blx	r3
   b478e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b4792:	454e      	cmp	r6, r9
   b4794:	d1f6      	bne.n	b4784 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b4796:	4445      	add	r5, r8
				dataLen--;
   b4798:	eba7 0708 	sub.w	r7, r7, r8
   b479c:	e7be      	b.n	b471c <_ZN6MB85RC8readDataEjPhj+0x14>

000b479e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b479e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47a2:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b47a4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47a6:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b47a8:	460e      	mov	r6, r1
   b47aa:	4690      	mov	r8, r2
   b47ac:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b47ae:	f001 fff5 	bl	b679c <_ZN7TwoWire4lockEv>
   b47b2:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b47b6:	f1b9 0f00 	cmp.w	r9, #0
   b47ba:	d02a      	beq.n	b4812 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b47bc:	b34d      	cbz	r5, b4812 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b47be:	68e1      	ldr	r1, [r4, #12]
   b47c0:	6860      	ldr	r0, [r4, #4]
   b47c2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b47c6:	f001 ffe2 	bl	b678e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b47ca:	0a31      	lsrs	r1, r6, #8
   b47cc:	6860      	ldr	r0, [r4, #4]
   b47ce:	f7ff ff83 	bl	b46d8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b47d2:	6860      	ldr	r0, [r4, #4]
   b47d4:	4631      	mov	r1, r6
   b47d6:	f7ff ff7f 	bl	b46d8 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b47da:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b47de:	4647      	mov	r7, r8
   b47e0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b47e4:	6860      	ldr	r0, [r4, #4]
   b47e6:	f817 1b01 	ldrb.w	r1, [r7], #1
   b47ea:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b47ec:	3d01      	subs	r5, #1
				wire.write(*data);
   b47ee:	689b      	ldr	r3, [r3, #8]
   b47f0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b47f2:	4555      	cmp	r5, sl
   b47f4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b47f8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b47fa:	d001      	beq.n	b4800 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b47fc:	2d00      	cmp	r5, #0
   b47fe:	d1f1      	bne.n	b47e4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b4800:	6860      	ldr	r0, [r4, #4]
   b4802:	2101      	movs	r1, #1
   b4804:	f001 ffc6 	bl	b6794 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b4808:	2800      	cmp	r0, #0
   b480a:	d0d7      	beq.n	b47bc <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b480c:	f04f 0900 	mov.w	r9, #0
   b4810:	e7d1      	b.n	b47b6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b4812:	a801      	add	r0, sp, #4
   b4814:	f7ff ff71 	bl	b46fa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b4818:	4648      	mov	r0, r9
   b481a:	b003      	add	sp, #12
   b481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4820 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b4820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4824:	b08b      	sub	sp, #44	; 0x2c
   b4826:	460e      	mov	r6, r1
   b4828:	4615      	mov	r5, r2
   b482a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b482c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b482e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b4830:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b4832:	f001 ffb3 	bl	b679c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b4836:	42ae      	cmp	r6, r5
   b4838:	d229      	bcs.n	b488e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b483a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b483c:	4425      	add	r5, r4
			while(numBytes > 0) {
   b483e:	b18c      	cbz	r4, b4864 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b4840:	2c1e      	cmp	r4, #30
   b4842:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b4844:	f8d8 3000 	ldr.w	r3, [r8]
   b4848:	bf28      	it	cs
   b484a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b484c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b484e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b4852:	aa02      	add	r2, sp, #8
   b4854:	463b      	mov	r3, r7
   b4856:	4631      	mov	r1, r6
   b4858:	4640      	mov	r0, r8
				framAddrTo -= count;
   b485a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b485c:	47c8      	blx	r9
				if (!result) {
   b485e:	b948      	cbnz	r0, b4874 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b4860:	2400      	movs	r4, #0
   b4862:	e000      	b.n	b4866 <_ZN6MB85RC8moveDataEjjj+0x46>
   b4864:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b4866:	a801      	add	r0, sp, #4
   b4868:	f7ff ff47 	bl	b46fa <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b486c:	4620      	mov	r0, r4
   b486e:	b00b      	add	sp, #44	; 0x2c
   b4870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b4874:	f8d8 3000 	ldr.w	r3, [r8]
   b4878:	aa02      	add	r2, sp, #8
   b487a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b487e:	4629      	mov	r1, r5
   b4880:	463b      	mov	r3, r7
   b4882:	4640      	mov	r0, r8
   b4884:	47c8      	blx	r9
				if (!result) {
   b4886:	2800      	cmp	r0, #0
   b4888:	d0ea      	beq.n	b4860 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b488a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b488c:	e7d7      	b.n	b483e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b488e:	d9e9      	bls.n	b4864 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b4890:	2c00      	cmp	r4, #0
   b4892:	d0e7      	beq.n	b4864 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b4894:	f8d8 3000 	ldr.w	r3, [r8]
   b4898:	2c1e      	cmp	r4, #30
   b489a:	4627      	mov	r7, r4
   b489c:	bf28      	it	cs
   b489e:	271e      	movcs	r7, #30
   b48a0:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b48a4:	aa02      	add	r2, sp, #8
   b48a6:	463b      	mov	r3, r7
   b48a8:	4631      	mov	r1, r6
   b48aa:	4640      	mov	r0, r8
   b48ac:	47c8      	blx	r9
				if (!result) {
   b48ae:	2800      	cmp	r0, #0
   b48b0:	d0d6      	beq.n	b4860 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b48b2:	f8d8 3000 	ldr.w	r3, [r8]
   b48b6:	aa02      	add	r2, sp, #8
   b48b8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b48bc:	4629      	mov	r1, r5
   b48be:	463b      	mov	r3, r7
   b48c0:	4640      	mov	r0, r8
   b48c2:	47c8      	blx	r9
				if (!result) {
   b48c4:	2800      	cmp	r0, #0
   b48c6:	d0cb      	beq.n	b4860 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b48c8:	443e      	add	r6, r7
				framAddrTo += count;
   b48ca:	443d      	add	r5, r7
				numBytes -= count;
   b48cc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b48ce:	e7df      	b.n	b4890 <_ZN6MB85RC8moveDataEjjj+0x70>

000b48d0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b48d0:	4770      	bx	lr

000b48d2 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b48d2:	6803      	ldr	r3, [r0, #0]
   b48d4:	685b      	ldr	r3, [r3, #4]
   b48d6:	4718      	bx	r3

000b48d8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b48d8:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b48da:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b48dc:	4604      	mov	r4, r0
    if (lastUpdate) {
   b48de:	b133      	cbz	r3, b48ee <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b48e0:	b131      	cbz	r1, b48f0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b48e2:	6823      	ldr	r3, [r4, #0]
   b48e4:	4620      	mov	r0, r4
   b48e6:	689b      	ldr	r3, [r3, #8]
   b48e8:	4798      	blx	r3
            lastUpdate = 0;
   b48ea:	2300      	movs	r3, #0
   b48ec:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b48ee:	bd10      	pop	{r4, pc}
   b48f0:	f000 f950 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b48f4:	69a3      	ldr	r3, [r4, #24]
   b48f6:	1ac0      	subs	r0, r0, r3
   b48f8:	69e3      	ldr	r3, [r4, #28]
   b48fa:	4298      	cmp	r0, r3
   b48fc:	d2f1      	bcs.n	b48e2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b48fe:	e7f6      	b.n	b48ee <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b4900 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b4900:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b4902:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b4904:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b4906:	b11b      	cbz	r3, b4910 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b4908:	f000 f944 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b490c:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b490e:	bd10      	pop	{r4, pc}
        save();
   b4910:	6803      	ldr	r3, [r0, #0]
}
   b4912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b4916:	689b      	ldr	r3, [r3, #8]
   b4918:	4718      	bx	r3

000b491a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b491a:	f000 b963 	b.w	b4be4 <os_mutex_recursive_unlock>

000b491e <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b491e:	b40e      	push	{r1, r2, r3}
   b4920:	b500      	push	{lr}
   b4922:	b08c      	sub	sp, #48	; 0x30
   b4924:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b4926:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b492a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b492e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4930:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4934:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4936:	6801      	ldr	r1, [r0, #0]
   b4938:	aa04      	add	r2, sp, #16
   b493a:	2001      	movs	r0, #1
    attr.flags = 0;
   b493c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4940:	f000 fa58 	bl	b4df4 <log_message_v>
}
   b4944:	b00c      	add	sp, #48	; 0x30
   b4946:	f85d eb04 	ldr.w	lr, [sp], #4
   b494a:	b003      	add	sp, #12
   b494c:	4770      	bx	lr

000b494e <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b494e:	b510      	push	{r4, lr}
   b4950:	4604      	mov	r4, r0
   b4952:	3004      	adds	r0, #4
   b4954:	f7ff fd96 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b4958:	6823      	ldr	r3, [r4, #0]
   b495a:	68e1      	ldr	r1, [r4, #12]
   b495c:	695b      	ldr	r3, [r3, #20]
   b495e:	4620      	mov	r0, r4
   b4960:	4798      	blx	r3
   b4962:	b918      	cbnz	r0, b496c <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b4964:	6823      	ldr	r3, [r4, #0]
   b4966:	4620      	mov	r0, r4
   b4968:	699b      	ldr	r3, [r3, #24]
   b496a:	4798      	blx	r3
      { _M_device.unlock(); }
   b496c:	6860      	ldr	r0, [r4, #4]
   b496e:	f7ff ffd4 	bl	b491a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b4972:	2001      	movs	r0, #1
   b4974:	bd10      	pop	{r4, pc}
	...

000b4978 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b4978:	b5f0      	push	{r4, r5, r6, r7, lr}
   b497a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b497e:	4f18      	ldr	r7, [pc, #96]	; (b49e0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b4980:	4e18      	ldr	r6, [pc, #96]	; (b49e4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b4982:	4d19      	ldr	r5, [pc, #100]	; (b49e8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b4984:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b4986:	42a0      	cmp	r0, r4
   b4988:	d00c      	beq.n	b49a4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b498a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b498e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b4990:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b4994:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b4996:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b4998:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b499c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b49a0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b49a2:	e7f0      	b.n	b4986 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b49a4:	f001 0403 	and.w	r4, r1, #3
   b49a8:	4404      	add	r4, r0
    k = 0;
   b49aa:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b49ac:	42a0      	cmp	r0, r4
   b49ae:	d004      	beq.n	b49ba <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b49b0:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b49b4:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b49b8:	e7f8      	b.n	b49ac <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b49ba:	4809      	ldr	r0, [pc, #36]	; (b49e0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b49bc:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b49be:	4809      	ldr	r0, [pc, #36]	; (b49e4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b49c0:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b49c4:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b49c6:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b49c8:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b49ca:	4b08      	ldr	r3, [pc, #32]	; (b49ec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b49cc:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b49d0:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b49d2:	4b07      	ldr	r3, [pc, #28]	; (b49f0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b49d4:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b49d8:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b49da:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49e0:	cc9e2d51 	.word	0xcc9e2d51
   b49e4:	1b873593 	.word	0x1b873593
   b49e8:	e6546b64 	.word	0xe6546b64
   b49ec:	85ebca6b 	.word	0x85ebca6b
   b49f0:	c2b2ae35 	.word	0xc2b2ae35

000b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b49f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b49f6:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b49f8:	3004      	adds	r0, #4
   b49fa:	f7ff fd43 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b49fe:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b4a00:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b4a02:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b4a04:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b4a06:	68a6      	ldr	r6, [r4, #8]
   b4a08:	4a05      	ldr	r2, [pc, #20]	; (b4a20 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b4a0a:	88f1      	ldrh	r1, [r6, #6]
   b4a0c:	4630      	mov	r0, r6
   b4a0e:	f7ff ffb3 	bl	b4978 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b4a12:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b4a14:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b4a16:	6860      	ldr	r0, [r4, #4]
   b4a18:	f7ff ff7f 	bl	b491a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b4a1c:	4628      	mov	r0, r5
   b4a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4a20:	851c2a3f 	.word	0x851c2a3f

000b4a24 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b4a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a28:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b4a2a:	3004      	adds	r0, #4
   b4a2c:	4690      	mov	r8, r2
   b4a2e:	460d      	mov	r5, r1
   b4a30:	461f      	mov	r7, r3
   b4a32:	f7ff fd27 	bl	b4484 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b4a36:	68e2      	ldr	r2, [r4, #12]
   b4a38:	f1c8 0301 	rsb	r3, r8, #1
   b4a3c:	4413      	add	r3, r2
   b4a3e:	42ab      	cmp	r3, r5
   b4a40:	d31f      	bcc.n	b4a82 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   b4a42:	4638      	mov	r0, r7
   b4a44:	f002 fc9f 	bl	b7386 <strlen>
   b4a48:	4540      	cmp	r0, r8
   b4a4a:	d21a      	bcs.n	b4a82 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   b4a4c:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b4a4e:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b4a50:	4629      	mov	r1, r5
   b4a52:	4638      	mov	r0, r7
   b4a54:	f002 fc85 	bl	b7362 <strcmp>
   b4a58:	b188      	cbz	r0, b4a7e <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   b4a5a:	4642      	mov	r2, r8
   b4a5c:	2100      	movs	r1, #0
   b4a5e:	4628      	mov	r0, r5
   b4a60:	f002 fc32 	bl	b72c8 <memset>
                strcpy(p, value);
   b4a64:	4639      	mov	r1, r7
   b4a66:	4628      	mov	r0, r5
   b4a68:	f002 fc85 	bl	b7376 <strcpy>
                savedDataHeader->hash = getHash();
   b4a6c:	4620      	mov	r0, r4
   b4a6e:	68a5      	ldr	r5, [r4, #8]
   b4a70:	f7ff ffc0 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4a74:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   b4a76:	6823      	ldr	r3, [r4, #0]
   b4a78:	4620      	mov	r0, r4
   b4a7a:	691b      	ldr	r3, [r3, #16]
   b4a7c:	4798      	blx	r3
            result = true;
   b4a7e:	2501      	movs	r5, #1
   b4a80:	e000      	b.n	b4a84 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   b4a82:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b4a84:	6860      	ldr	r0, [r4, #4]
   b4a86:	f7ff ff48 	bl	b491a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b4a8a:	4628      	mov	r0, r5
   b4a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4a90 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b4a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4a92:	460d      	mov	r5, r1
   b4a94:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b4a96:	f7ff ffad 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b4a9a:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b4a9c:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b4a9e:	d923      	bls.n	b4ae8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b4aa0:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b4aa2:	6922      	ldr	r2, [r4, #16]
   b4aa4:	6819      	ldr	r1, [r3, #0]
   b4aa6:	4291      	cmp	r1, r2
   b4aa8:	d11f      	bne.n	b4aea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b4aaa:	8899      	ldrh	r1, [r3, #4]
   b4aac:	8aa2      	ldrh	r2, [r4, #20]
   b4aae:	4291      	cmp	r1, r2
   b4ab0:	d11b      	bne.n	b4aea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b4ab2:	88d9      	ldrh	r1, [r3, #6]
   b4ab4:	b2aa      	uxth	r2, r5
   b4ab6:	4291      	cmp	r1, r2
   b4ab8:	d817      	bhi.n	b4aea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b4aba:	689a      	ldr	r2, [r3, #8]
   b4abc:	4282      	cmp	r2, r0
   b4abe:	d114      	bne.n	b4aea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b4ac0:	68e2      	ldr	r2, [r4, #12]
   b4ac2:	42aa      	cmp	r2, r5
   b4ac4:	d905      	bls.n	b4ad2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b4ac6:	2100      	movs	r1, #0
   b4ac8:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b4aca:	68e2      	ldr	r2, [r4, #12]
   b4acc:	3501      	adds	r5, #1
   b4ace:	42aa      	cmp	r2, r5
   b4ad0:	d8fa      	bhi.n	b4ac8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b4ad2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b4ad6:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b4ad8:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b4ada:	68a5      	ldr	r5, [r4, #8]
   b4adc:	f7ff ff8a 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4ae0:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b4ae2:	2001      	movs	r0, #1
}
   b4ae4:	b002      	add	sp, #8
   b4ae6:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b4ae8:	b19d      	cbz	r5, b4b12 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b4aea:	68a1      	ldr	r1, [r4, #8]
   b4aec:	680a      	ldr	r2, [r1, #0]
   b4aee:	b192      	cbz	r2, b4b16 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b4af0:	6888      	ldr	r0, [r1, #8]
   b4af2:	888b      	ldrh	r3, [r1, #4]
   b4af4:	9001      	str	r0, [sp, #4]
   b4af6:	88c9      	ldrh	r1, [r1, #6]
   b4af8:	4808      	ldr	r0, [pc, #32]	; (b4b1c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b4afa:	9100      	str	r1, [sp, #0]
   b4afc:	4908      	ldr	r1, [pc, #32]	; (b4b20 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b4afe:	f7ff ff0e 	bl	b491e <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b4b02:	e9cd 5600 	strd	r5, r6, [sp]
   b4b06:	8aa3      	ldrh	r3, [r4, #20]
   b4b08:	6922      	ldr	r2, [r4, #16]
   b4b0a:	4906      	ldr	r1, [pc, #24]	; (b4b24 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b4b0c:	4803      	ldr	r0, [pc, #12]	; (b4b1c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b4b0e:	f7ff ff06 	bl	b491e <_ZNK5spark6Logger5traceEPKcz>
   b4b12:	2000      	movs	r0, #0
   b4b14:	e7e6      	b.n	b4ae4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b4b16:	4610      	mov	r0, r2
   b4b18:	e7e4      	b.n	b4ae4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b4b1a:	bf00      	nop
   b4b1c:	2003e690 	.word	0x2003e690
   b4b20:	000b76c4 	.word	0x000b76c4
   b4b24:	000b76f5 	.word	0x000b76f5

000b4b28 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b4b28:	b538      	push	{r3, r4, r5, lr}
   b4b2a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b4b2c:	68c2      	ldr	r2, [r0, #12]
   b4b2e:	6880      	ldr	r0, [r0, #8]
   b4b30:	2100      	movs	r1, #0
   b4b32:	f002 fbc9 	bl	b72c8 <memset>
    savedDataHeader->magic = savedDataMagic;
   b4b36:	68a3      	ldr	r3, [r4, #8]
   b4b38:	6922      	ldr	r2, [r4, #16]
   b4b3a:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b4b3c:	68a3      	ldr	r3, [r4, #8]
   b4b3e:	8aa2      	ldrh	r2, [r4, #20]
   b4b40:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b4b42:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b4b46:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b4b48:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b4b4a:	68a5      	ldr	r5, [r4, #8]
   b4b4c:	f7ff ff52 	bl	b49f4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4b50:	60a8      	str	r0, [r5, #8]
}
   b4b52:	bd38      	pop	{r3, r4, r5, pc}

000b4b54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <netdb_freeaddrinfo+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	689b      	ldr	r3, [r3, #8]
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	00030268 	.word	0x00030268

000b4b64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <netdb_getaddrinfo+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	68db      	ldr	r3, [r3, #12]
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	00030268 	.word	0x00030268

000b4b74 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <HAL_RNG_GetRandomNumber+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	685b      	ldr	r3, [r3, #4]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	00030218 	.word	0x00030218

000b4b84 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <HAL_Delay_Microseconds+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	68db      	ldr	r3, [r3, #12]
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030218 	.word	0x00030218

000b4b94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	695b      	ldr	r3, [r3, #20]
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030218 	.word	0x00030218

000b4ba4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <hal_timer_millis+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	00030218 	.word	0x00030218

000b4bb4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <os_mutex_recursive_create+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	00030248 	.word	0x00030248

000b4bc4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <os_mutex_recursive_destroy+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	00030248 	.word	0x00030248

000b4bd4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <os_mutex_recursive_lock+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	00030248 	.word	0x00030248

000b4be4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <os_mutex_recursive_unlock+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	00030248 	.word	0x00030248

000b4bf4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <inet_inet_ntop+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	695b      	ldr	r3, [r3, #20]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	00030264 	.word	0x00030264

000b4c04 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <hal_usart_end+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	689b      	ldr	r3, [r3, #8]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	0003023c 	.word	0x0003023c

000b4c14 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <hal_usart_write+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	68db      	ldr	r3, [r3, #12]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	0003023c 	.word	0x0003023c

000b4c24 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <hal_usart_available+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	691b      	ldr	r3, [r3, #16]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	0003023c 	.word	0x0003023c

000b4c34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <hal_usart_read+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	695b      	ldr	r3, [r3, #20]
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	0003023c 	.word	0x0003023c

000b4c44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <hal_usart_peek+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	699b      	ldr	r3, [r3, #24]
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	0003023c 	.word	0x0003023c

000b4c54 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <hal_usart_flush+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	69db      	ldr	r3, [r3, #28]
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	0003023c 	.word	0x0003023c

000b4c64 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <hal_usart_available_data_for_write+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	0003023c 	.word	0x0003023c

000b4c74 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <hal_usart_begin_config+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	0003023c 	.word	0x0003023c

000b4c84 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <hal_usart_init_ex+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	0003023c 	.word	0x0003023c

000b4c94 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <hal_i2c_begin+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	68db      	ldr	r3, [r3, #12]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	00030228 	.word	0x00030228

000b4ca4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <hal_i2c_begin_transmission+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	699b      	ldr	r3, [r3, #24]
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	00030228 	.word	0x00030228

000b4cb4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <hal_i2c_end_transmission+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	69db      	ldr	r3, [r3, #28]
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	00030228 	.word	0x00030228

000b4cc4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <hal_i2c_write+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	6a1b      	ldr	r3, [r3, #32]
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	00030228 	.word	0x00030228

000b4cd4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <hal_i2c_available+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	00030228 	.word	0x00030228

000b4ce4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ce4:	b508      	push	{r3, lr}
   b4ce6:	4b02      	ldr	r3, [pc, #8]	; (b4cf0 <hal_i2c_read+0xc>)
   b4ce8:	681b      	ldr	r3, [r3, #0]
   b4cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cec:	9301      	str	r3, [sp, #4]
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	00030228 	.word	0x00030228

000b4cf4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <hal_i2c_peek+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	00030228 	.word	0x00030228

000b4d04 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <hal_i2c_flush+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	00030228 	.word	0x00030228

000b4d14 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <hal_i2c_init+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	00030228 	.word	0x00030228

000b4d24 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <hal_i2c_lock+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	00030228 	.word	0x00030228

000b4d34 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <hal_i2c_unlock+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030228 	.word	0x00030228

000b4d44 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <hal_i2c_request_ex+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	00030228 	.word	0x00030228

000b4d54 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <HAL_USB_USART_Init+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	681b      	ldr	r3, [r3, #0]
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	0003024c 	.word	0x0003024c

000b4d64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <HAL_USB_USART_Begin+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	685b      	ldr	r3, [r3, #4]
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	0003024c 	.word	0x0003024c

000b4d74 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <HAL_USB_USART_End+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	689b      	ldr	r3, [r3, #8]
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	0003024c 	.word	0x0003024c

000b4d84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <HAL_USB_USART_Available_Data+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	691b      	ldr	r3, [r3, #16]
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	0003024c 	.word	0x0003024c

000b4d94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	695b      	ldr	r3, [r3, #20]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	0003024c 	.word	0x0003024c

000b4da4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <HAL_USB_USART_Receive_Data+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	699b      	ldr	r3, [r3, #24]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	0003024c 	.word	0x0003024c

000b4db4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <HAL_USB_USART_Send_Data+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	69db      	ldr	r3, [r3, #28]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	0003024c 	.word	0x0003024c

000b4dc4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <HAL_USB_USART_Flush_Data+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6a1b      	ldr	r3, [r3, #32]
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	0003024c 	.word	0x0003024c

000b4dd4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <HAL_USB_USART_Is_Connected+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	0003024c 	.word	0x0003024c

000b4de4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <panic_+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030260 	.word	0x00030260

000b4df4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <log_message_v+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030260 	.word	0x00030260

000b4e04 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <log_level_name+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030260 	.word	0x00030260

000b4e14 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <log_set_callbacks+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030260 	.word	0x00030260

000b4e24 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <set_system_mode+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	685b      	ldr	r3, [r3, #4]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030220 	.word	0x00030220

000b4e34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <system_delay_ms+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	695b      	ldr	r3, [r3, #20]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030220 	.word	0x00030220

000b4e44 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <system_thread_set_state+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030220 	.word	0x00030220

000b4e54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b03      	ldr	r3, [pc, #12]	; (b4e64 <system_ctrl_set_app_request_handler+0x10>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4e5e:	9301      	str	r3, [sp, #4]
   b4e60:	bd08      	pop	{r3, pc}
   b4e62:	0000      	.short	0x0000
   b4e64:	00030220 	.word	0x00030220

000b4e68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b03      	ldr	r3, [pc, #12]	; (b4e78 <system_ctrl_set_result+0x10>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4e72:	9301      	str	r3, [sp, #4]
   b4e74:	bd08      	pop	{r3, pc}
   b4e76:	0000      	.short	0x0000
   b4e78:	00030220 	.word	0x00030220

000b4e7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <network_connect+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	685b      	ldr	r3, [r3, #4]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	00030240 	.word	0x00030240

000b4e8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <network_connecting+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	689b      	ldr	r3, [r3, #8]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	00030240 	.word	0x00030240

000b4e9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <network_disconnect+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	68db      	ldr	r3, [r3, #12]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030240 	.word	0x00030240

000b4eac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <network_ready+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	691b      	ldr	r3, [r3, #16]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030240 	.word	0x00030240

000b4ebc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <network_on+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	695b      	ldr	r3, [r3, #20]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030240 	.word	0x00030240

000b4ecc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <network_off+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	699b      	ldr	r3, [r3, #24]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030240 	.word	0x00030240

000b4edc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <network_listen+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	69db      	ldr	r3, [r3, #28]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030240 	.word	0x00030240

000b4eec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <network_listening+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	6a1b      	ldr	r3, [r3, #32]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030240 	.word	0x00030240

000b4efc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <network_set_listen_timeout+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030240 	.word	0x00030240

000b4f0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <network_get_listen_timeout+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030240 	.word	0x00030240

000b4f1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <network_is_on+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030240 	.word	0x00030240

000b4f2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <network_is_off+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030240 	.word	0x00030240

000b4f3c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <spark_process+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	689b      	ldr	r3, [r3, #8]
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030244 	.word	0x00030244

000b4f4c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <spark_cloud_flag_connect+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	68db      	ldr	r3, [r3, #12]
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	00030244 	.word	0x00030244

000b4f5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030244 	.word	0x00030244

000b4f6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <malloc+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	681b      	ldr	r3, [r3, #0]
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	0003021c 	.word	0x0003021c

000b4f7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <free+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	685b      	ldr	r3, [r3, #4]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	0003021c 	.word	0x0003021c

000b4f8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <realloc+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	689b      	ldr	r3, [r3, #8]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	0003021c 	.word	0x0003021c

000b4f9c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <vsnprintf+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	0003021c 	.word	0x0003021c

000b4fac <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <__errno+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	0003021c 	.word	0x0003021c

000b4fbc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <__assert_func+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	0003021c 	.word	0x0003021c

000b4fcc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <newlib_impure_ptr_callback+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	0003021c 	.word	0x0003021c

000b4fdc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4fdc:	2200      	movs	r2, #0
   b4fde:	6840      	ldr	r0, [r0, #4]
   b4fe0:	4611      	mov	r1, r2
   b4fe2:	f7ff bf83 	b.w	b4eec <network_listening>

000b4fe6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4fe6:	2200      	movs	r2, #0
   b4fe8:	6840      	ldr	r0, [r0, #4]
   b4fea:	4611      	mov	r1, r2
   b4fec:	f7ff bf8e 	b.w	b4f0c <network_get_listen_timeout>

000b4ff0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ff0:	6840      	ldr	r0, [r0, #4]
   b4ff2:	2200      	movs	r2, #0
   b4ff4:	f7ff bf82 	b.w	b4efc <network_set_listen_timeout>

000b4ff8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ff8:	6840      	ldr	r0, [r0, #4]
   b4ffa:	2200      	movs	r2, #0
   b4ffc:	f081 0101 	eor.w	r1, r1, #1
   b5000:	f7ff bf6c 	b.w	b4edc <network_listen>

000b5004 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5004:	2300      	movs	r3, #0
   b5006:	6840      	ldr	r0, [r0, #4]
   b5008:	461a      	mov	r2, r3
   b500a:	4619      	mov	r1, r3
   b500c:	f7ff bf5e 	b.w	b4ecc <network_off>

000b5010 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5010:	2300      	movs	r3, #0
   b5012:	6840      	ldr	r0, [r0, #4]
   b5014:	461a      	mov	r2, r3
   b5016:	4619      	mov	r1, r3
   b5018:	f7ff bf50 	b.w	b4ebc <network_on>

000b501c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b501c:	2200      	movs	r2, #0
   b501e:	6840      	ldr	r0, [r0, #4]
   b5020:	4611      	mov	r1, r2
   b5022:	f7ff bf43 	b.w	b4eac <network_ready>

000b5026 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5026:	2200      	movs	r2, #0
   b5028:	6840      	ldr	r0, [r0, #4]
   b502a:	4611      	mov	r1, r2
   b502c:	f7ff bf2e 	b.w	b4e8c <network_connecting>

000b5030 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5030:	6840      	ldr	r0, [r0, #4]
   b5032:	2200      	movs	r2, #0
   b5034:	2102      	movs	r1, #2
   b5036:	f7ff bf31 	b.w	b4e9c <network_disconnect>

000b503a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b503a:	2300      	movs	r3, #0
   b503c:	6840      	ldr	r0, [r0, #4]
   b503e:	461a      	mov	r2, r3
   b5040:	f7ff bf1c 	b.w	b4e7c <network_connect>

000b5044 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5044:	4b02      	ldr	r3, [pc, #8]	; (b5050 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5046:	2203      	movs	r2, #3
   b5048:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b504a:	4a02      	ldr	r2, [pc, #8]	; (b5054 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b504c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b504e:	4770      	bx	lr
   b5050:	2003e668 	.word	0x2003e668
   b5054:	000b7754 	.word	0x000b7754

000b5058 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5058:	4b05      	ldr	r3, [pc, #20]	; (b5070 <_GLOBAL__sub_I_System+0x18>)
   b505a:	2202      	movs	r2, #2
   b505c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b505e:	4b05      	ldr	r3, [pc, #20]	; (b5074 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5060:	4a05      	ldr	r2, [pc, #20]	; (b5078 <_GLOBAL__sub_I_System+0x20>)
   b5062:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5064:	2000      	movs	r0, #0
   b5066:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b506a:	f7ff bedb 	b.w	b4e24 <set_system_mode>
   b506e:	bf00      	nop
   b5070:	2003e67c 	.word	0x2003e67c
   b5074:	2003e670 	.word	0x2003e670
   b5078:	ffff0000 	.word	0xffff0000

000b507c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b507c:	b510      	push	{r4, lr}
   b507e:	4604      	mov	r4, r0
{
	free(buffer);
   b5080:	6800      	ldr	r0, [r0, #0]
   b5082:	f7ff ff7b 	bl	b4f7c <free>
}
   b5086:	4620      	mov	r0, r4
   b5088:	bd10      	pop	{r4, pc}

000b508a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b508a:	b510      	push	{r4, lr}
   b508c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b508e:	6800      	ldr	r0, [r0, #0]
   b5090:	b108      	cbz	r0, b5096 <_ZN6String10invalidateEv+0xc>
   b5092:	f7ff ff73 	bl	b4f7c <free>
	buffer = NULL;
   b5096:	2300      	movs	r3, #0
	capacity = len = 0;
   b5098:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b509c:	6023      	str	r3, [r4, #0]
}
   b509e:	bd10      	pop	{r4, pc}

000b50a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b50a0:	b538      	push	{r3, r4, r5, lr}
   b50a2:	4604      	mov	r4, r0
   b50a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b50a6:	6800      	ldr	r0, [r0, #0]
   b50a8:	3101      	adds	r1, #1
   b50aa:	f7ff ff6f 	bl	b4f8c <realloc>
	if (newbuffer) {
   b50ae:	b110      	cbz	r0, b50b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b50b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b50b4:	2001      	movs	r0, #1
	}
	return 0;
}
   b50b6:	bd38      	pop	{r3, r4, r5, pc}

000b50b8 <_ZN6String7reserveEj>:
{
   b50b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b50ba:	6803      	ldr	r3, [r0, #0]
{
   b50bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b50be:	b123      	cbz	r3, b50ca <_ZN6String7reserveEj+0x12>
   b50c0:	6843      	ldr	r3, [r0, #4]
   b50c2:	428b      	cmp	r3, r1
   b50c4:	d301      	bcc.n	b50ca <_ZN6String7reserveEj+0x12>
   b50c6:	2001      	movs	r0, #1
}
   b50c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b50ca:	4620      	mov	r0, r4
   b50cc:	f7ff ffe8 	bl	b50a0 <_ZN6String12changeBufferEj>
   b50d0:	2800      	cmp	r0, #0
   b50d2:	d0f9      	beq.n	b50c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b50d4:	68a3      	ldr	r3, [r4, #8]
   b50d6:	2b00      	cmp	r3, #0
   b50d8:	d1f5      	bne.n	b50c6 <_ZN6String7reserveEj+0xe>
   b50da:	6822      	ldr	r2, [r4, #0]
   b50dc:	7013      	strb	r3, [r2, #0]
   b50de:	e7f2      	b.n	b50c6 <_ZN6String7reserveEj+0xe>

000b50e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b50e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b50e4:	4611      	mov	r1, r2
   b50e6:	9201      	str	r2, [sp, #4]
{
   b50e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b50ea:	f7ff ffe5 	bl	b50b8 <_ZN6String7reserveEj>
   b50ee:	9a01      	ldr	r2, [sp, #4]
   b50f0:	b928      	cbnz	r0, b50fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b50f2:	4620      	mov	r0, r4
   b50f4:	f7ff ffc9 	bl	b508a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b50f8:	4620      	mov	r0, r4
   b50fa:	b003      	add	sp, #12
   b50fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b50fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5100:	4629      	mov	r1, r5
   b5102:	6820      	ldr	r0, [r4, #0]
   b5104:	f002 f8b8 	bl	b7278 <memcpy>
	buffer[len] = 0;
   b5108:	6822      	ldr	r2, [r4, #0]
   b510a:	68a3      	ldr	r3, [r4, #8]
   b510c:	2100      	movs	r1, #0
   b510e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5110:	e7f2      	b.n	b50f8 <_ZN6String4copyEPKcj+0x18>

000b5112 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b5112:	b538      	push	{r3, r4, r5, lr}
   b5114:	4605      	mov	r5, r0
	if (buffer) {
   b5116:	6800      	ldr	r0, [r0, #0]
{
   b5118:	460c      	mov	r4, r1
	if (buffer) {
   b511a:	b168      	cbz	r0, b5138 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b511c:	686a      	ldr	r2, [r5, #4]
   b511e:	688b      	ldr	r3, [r1, #8]
   b5120:	429a      	cmp	r2, r3
   b5122:	d307      	bcc.n	b5134 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b5124:	6809      	ldr	r1, [r1, #0]
   b5126:	f002 f926 	bl	b7376 <strcpy>
			len = rhs.len;
   b512a:	68a3      	ldr	r3, [r4, #8]
   b512c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b512e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b5130:	60a3      	str	r3, [r4, #8]
}
   b5132:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b5134:	f7ff ff22 	bl	b4f7c <free>
	buffer = rhs.buffer;
   b5138:	6823      	ldr	r3, [r4, #0]
   b513a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b513c:	6863      	ldr	r3, [r4, #4]
   b513e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b5140:	68a3      	ldr	r3, [r4, #8]
   b5142:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b5144:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b5146:	e9c4 3300 	strd	r3, r3, [r4]
   b514a:	e7f1      	b.n	b5130 <_ZN6String4moveERS_+0x1e>

000b514c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b514c:	b510      	push	{r4, lr}
	buffer = NULL;
   b514e:	2300      	movs	r3, #0
	capacity = 0;
   b5150:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b5154:	4604      	mov	r4, r0
	len = 0;
   b5156:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5158:	7303      	strb	r3, [r0, #12]
	move(rval);
   b515a:	f7ff ffda 	bl	b5112 <_ZN6String4moveERS_>
}
   b515e:	4620      	mov	r0, r4
   b5160:	bd10      	pop	{r4, pc}

000b5162 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5162:	4288      	cmp	r0, r1
{
   b5164:	b510      	push	{r4, lr}
   b5166:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5168:	d005      	beq.n	b5176 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b516a:	680b      	ldr	r3, [r1, #0]
   b516c:	b12b      	cbz	r3, b517a <_ZN6StringaSERKS_+0x18>
   b516e:	688a      	ldr	r2, [r1, #8]
   b5170:	4619      	mov	r1, r3
   b5172:	f7ff ffb5 	bl	b50e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5176:	4620      	mov	r0, r4
   b5178:	bd10      	pop	{r4, pc}
	else invalidate();
   b517a:	f7ff ff86 	bl	b508a <_ZN6String10invalidateEv>
   b517e:	e7fa      	b.n	b5176 <_ZN6StringaSERKS_+0x14>

000b5180 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5180:	b510      	push	{r4, lr}
	buffer = NULL;
   b5182:	2300      	movs	r3, #0
String::String(const String &value)
   b5184:	4604      	mov	r4, r0
	capacity = 0;
   b5186:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b518a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b518c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b518e:	f7ff ffe8 	bl	b5162 <_ZN6StringaSERKS_>
}
   b5192:	4620      	mov	r0, r4
   b5194:	bd10      	pop	{r4, pc}

000b5196 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5196:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5198:	6843      	ldr	r3, [r0, #4]
   b519a:	3b01      	subs	r3, #1
    {
   b519c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b519e:	6043      	str	r3, [r0, #4]
   b51a0:	b963      	cbnz	r3, b51bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b51a2:	6803      	ldr	r3, [r0, #0]
   b51a4:	689b      	ldr	r3, [r3, #8]
   b51a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b51a8:	68a3      	ldr	r3, [r4, #8]
   b51aa:	3b01      	subs	r3, #1
   b51ac:	60a3      	str	r3, [r4, #8]
   b51ae:	b92b      	cbnz	r3, b51bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b51b0:	6823      	ldr	r3, [r4, #0]
   b51b2:	4620      	mov	r0, r4
   b51b4:	68db      	ldr	r3, [r3, #12]
        }
    }
   b51b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b51ba:	4718      	bx	r3
    }
   b51bc:	bd10      	pop	{r4, pc}

000b51be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51be:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b51c0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b51c6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b51ca:	42ae      	cmp	r6, r5
   b51cc:	d004      	beq.n	b51d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b51ce:	4628      	mov	r0, r5
   b51d0:	f7ff ff54 	bl	b507c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b51d4:	3510      	adds	r5, #16
   b51d6:	e7f8      	b.n	b51ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b51d8:	6820      	ldr	r0, [r4, #0]
   b51da:	f7ff fecf 	bl	b4f7c <free>
    AllocatorT::free(data_);
}
   b51de:	4620      	mov	r0, r4
   b51e0:	bd70      	pop	{r4, r5, r6, pc}

000b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b51e2:	b510      	push	{r4, lr}
   b51e4:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b51e6:	6800      	ldr	r0, [r0, #0]
   b51e8:	b108      	cbz	r0, b51ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b51ea:	f7ff ffd4 	bl	b5196 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b51ee:	4620      	mov	r0, r4
   b51f0:	bd10      	pop	{r4, pc}
	...

000b51f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b51f4:	4802      	ldr	r0, [pc, #8]	; (b5200 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b51f6:	2300      	movs	r3, #0
   b51f8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b51fa:	f7ff bcdb 	b.w	b4bb4 <os_mutex_recursive_create>
   b51fe:	bf00      	nop
   b5200:	2003e680 	.word	0x2003e680

000b5204 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5206:	4606      	mov	r6, r0
   b5208:	460d      	mov	r5, r1
  size_t n = 0;
   b520a:	188f      	adds	r7, r1, r2
   b520c:	2400      	movs	r4, #0
  while (size--) {
   b520e:	42bd      	cmp	r5, r7
   b5210:	d00c      	beq.n	b522c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5212:	6833      	ldr	r3, [r6, #0]
   b5214:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5218:	689b      	ldr	r3, [r3, #8]
   b521a:	4630      	mov	r0, r6
   b521c:	4798      	blx	r3
     if (chunk>=0)
   b521e:	1e03      	subs	r3, r0, #0
   b5220:	db01      	blt.n	b5226 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5222:	441c      	add	r4, r3
  while (size--) {
   b5224:	e7f3      	b.n	b520e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5226:	2c00      	cmp	r4, #0
   b5228:	bf08      	it	eq
   b522a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b522c:	4620      	mov	r0, r4
   b522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5230 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5230:	b513      	push	{r0, r1, r4, lr}
   b5232:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5234:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5236:	b159      	cbz	r1, b5250 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5238:	9101      	str	r1, [sp, #4]
   b523a:	f002 f8a4 	bl	b7386 <strlen>
   b523e:	6823      	ldr	r3, [r4, #0]
   b5240:	9901      	ldr	r1, [sp, #4]
   b5242:	68db      	ldr	r3, [r3, #12]
   b5244:	4602      	mov	r2, r0
   b5246:	4620      	mov	r0, r4
    }
   b5248:	b002      	add	sp, #8
   b524a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b524e:	4718      	bx	r3
    }
   b5250:	b002      	add	sp, #8
   b5252:	bd10      	pop	{r4, pc}

000b5254 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5254:	6803      	ldr	r3, [r0, #0]
   b5256:	689b      	ldr	r3, [r3, #8]
   b5258:	4718      	bx	r3

000b525a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b525a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b525c:	210d      	movs	r1, #13
{
   b525e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5260:	f7ff fff8 	bl	b5254 <_ZN5Print5printEc>
  n += print('\n');
   b5264:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5266:	4604      	mov	r4, r0
  n += print('\n');
   b5268:	4628      	mov	r0, r5
   b526a:	f7ff fff3 	bl	b5254 <_ZN5Print5printEc>
  return n;
}
   b526e:	4420      	add	r0, r4
   b5270:	bd38      	pop	{r3, r4, r5, pc}

000b5272 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5272:	b530      	push	{r4, r5, lr}
   b5274:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5276:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5278:	2a01      	cmp	r2, #1
  *str = '\0';
   b527a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b527e:	bf98      	it	ls
   b5280:	220a      	movls	r2, #10
   b5282:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5284:	460d      	mov	r5, r1
   b5286:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b528a:	fb01 5312 	mls	r3, r1, r2, r5
   b528e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5292:	2b09      	cmp	r3, #9
   b5294:	bf94      	ite	ls
   b5296:	3330      	addls	r3, #48	; 0x30
   b5298:	3337      	addhi	r3, #55	; 0x37
   b529a:	b2db      	uxtb	r3, r3
  } while(n);
   b529c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b529e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b52a2:	d9ef      	bls.n	b5284 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b52a4:	4621      	mov	r1, r4
   b52a6:	f7ff ffc3 	bl	b5230 <_ZN5Print5writeEPKc>
}
   b52aa:	b00b      	add	sp, #44	; 0x2c
   b52ac:	bd30      	pop	{r4, r5, pc}

000b52ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b52ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52b2:	b086      	sub	sp, #24
   b52b4:	af00      	add	r7, sp, #0
   b52b6:	4605      	mov	r5, r0
   b52b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b52ba:	1d38      	adds	r0, r7, #4
   b52bc:	2114      	movs	r1, #20
{
   b52be:	4614      	mov	r4, r2
    va_copy(args2, args);
   b52c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b52c2:	f7ff fe6b 	bl	b4f9c <vsnprintf>

    if (n<bufsize)
   b52c6:	2813      	cmp	r0, #19
   b52c8:	d80e      	bhi.n	b52e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b52ca:	1d39      	adds	r1, r7, #4
   b52cc:	4628      	mov	r0, r5
   b52ce:	f7ff ffaf 	bl	b5230 <_ZN5Print5writeEPKc>
   b52d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b52d4:	b11e      	cbz	r6, b52de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b52d6:	4628      	mov	r0, r5
   b52d8:	f7ff ffbf 	bl	b525a <_ZN5Print7printlnEv>
   b52dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b52de:	4620      	mov	r0, r4
   b52e0:	3718      	adds	r7, #24
   b52e2:	46bd      	mov	sp, r7
   b52e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b52e8:	f100 0308 	add.w	r3, r0, #8
   b52ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b52f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b52f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b52f6:	4622      	mov	r2, r4
   b52f8:	1c41      	adds	r1, r0, #1
   b52fa:	683b      	ldr	r3, [r7, #0]
   b52fc:	4668      	mov	r0, sp
   b52fe:	f7ff fe4d 	bl	b4f9c <vsnprintf>
  return write(str);
   b5302:	4669      	mov	r1, sp
   b5304:	4628      	mov	r0, r5
   b5306:	f7ff ff93 	bl	b5230 <_ZN5Print5writeEPKc>
   b530a:	4604      	mov	r4, r0
   b530c:	46c5      	mov	sp, r8
   b530e:	e7e1      	b.n	b52d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5310 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5310:	6880      	ldr	r0, [r0, #8]
   b5312:	6803      	ldr	r3, [r0, #0]
   b5314:	68db      	ldr	r3, [r3, #12]
   b5316:	4718      	bx	r3

000b5318 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5318:	4770      	bx	lr

000b531a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b531a:	4608      	mov	r0, r1
   b531c:	b111      	cbz	r1, b5324 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b531e:	680b      	ldr	r3, [r1, #0]
   b5320:	685b      	ldr	r3, [r3, #4]
   b5322:	4718      	bx	r3
}
   b5324:	4770      	bx	lr

000b5326 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5326:	4770      	bx	lr

000b5328 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5328:	4770      	bx	lr

000b532a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b532a:	4770      	bx	lr

000b532c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b532c:	4770      	bx	lr

000b532e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b532e:	b538      	push	{r3, r4, r5, lr}
   b5330:	4604      	mov	r4, r0
   b5332:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5334:	6800      	ldr	r0, [r0, #0]
   b5336:	212e      	movs	r1, #46	; 0x2e
   b5338:	f002 f809 	bl	b734e <strchrnul>
    size = s - category;
   b533c:	6823      	ldr	r3, [r4, #0]
   b533e:	1ac3      	subs	r3, r0, r3
   b5340:	602b      	str	r3, [r5, #0]
    if (size) {
   b5342:	b123      	cbz	r3, b534e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5344:	7803      	ldrb	r3, [r0, #0]
   b5346:	b103      	cbz	r3, b534a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5348:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b534a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b534c:	6020      	str	r0, [r4, #0]
}
   b534e:	4618      	mov	r0, r3
   b5350:	bd38      	pop	{r3, r4, r5, pc}

000b5352 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5352:	b510      	push	{r4, lr}
   b5354:	210c      	movs	r1, #12
   b5356:	4604      	mov	r4, r0
   b5358:	f7fe fea1 	bl	b409e <_ZdlPvj>
   b535c:	4620      	mov	r0, r4
   b535e:	bd10      	pop	{r4, pc}

000b5360 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5360:	b510      	push	{r4, lr}
   b5362:	2104      	movs	r1, #4
   b5364:	4604      	mov	r4, r0
   b5366:	f7fe fe9a 	bl	b409e <_ZdlPvj>
   b536a:	4620      	mov	r0, r4
   b536c:	bd10      	pop	{r4, pc}

000b536e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b536e:	b510      	push	{r4, lr}
   b5370:	2104      	movs	r1, #4
   b5372:	4604      	mov	r4, r0
   b5374:	f7fe fe93 	bl	b409e <_ZdlPvj>
   b5378:	4620      	mov	r0, r4
   b537a:	bd10      	pop	{r4, pc}

000b537c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b537c:	f7ff bc2a 	b.w	b4bd4 <os_mutex_recursive_lock>

000b5380 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5380:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5382:	f001 ffee 	bl	b7362 <strcmp>
}
   b5386:	fab0 f080 	clz	r0, r0
   b538a:	0940      	lsrs	r0, r0, #5
   b538c:	bd08      	pop	{r3, pc}

000b538e <__tcf_1>:
   b538e:	4770      	bx	lr

000b5390 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5390:	b510      	push	{r4, lr}
   b5392:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5394:	f001 f8bc 	bl	b6510 <_Z16_fetch_usbserialv>
   b5398:	4284      	cmp	r4, r0
   b539a:	d010      	beq.n	b53be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b539c:	f001 fcb6 	bl	b6d0c <_Z22__fetch_global_Serial1v>
   b53a0:	4284      	cmp	r4, r0
   b53a2:	d105      	bne.n	b53b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b53a4:	f001 fcb2 	bl	b6d0c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b53a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b53ac:	f001 b97b 	b.w	b66a6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b53b0:	b12c      	cbz	r4, b53be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b53b2:	6823      	ldr	r3, [r4, #0]
   b53b4:	4620      	mov	r0, r4
   b53b6:	685b      	ldr	r3, [r3, #4]
}
   b53b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b53bc:	4718      	bx	r3
   b53be:	bd10      	pop	{r4, pc}

000b53c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53c0:	680b      	ldr	r3, [r1, #0]
   b53c2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b53c4:	684b      	ldr	r3, [r1, #4]
   b53c6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b53c8:	b113      	cbz	r3, b53d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b53ca:	685a      	ldr	r2, [r3, #4]
   b53cc:	3201      	adds	r2, #1
   b53ce:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53d0:	4770      	bx	lr

000b53d2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b53d2:	b513      	push	{r0, r1, r4, lr}
   b53d4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b53d6:	4608      	mov	r0, r1
   b53d8:	9101      	str	r1, [sp, #4]
   b53da:	f001 ffd4 	bl	b7386 <strlen>
   b53de:	9901      	ldr	r1, [sp, #4]
   b53e0:	4602      	mov	r2, r0
   b53e2:	4620      	mov	r0, r4
}
   b53e4:	b002      	add	sp, #8
   b53e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b53ea:	f001 bc63 	b.w	b6cb4 <_ZN5spark10JSONWriter5valueEPKcj>

000b53ee <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b53ee:	b513      	push	{r0, r1, r4, lr}
   b53f0:	4604      	mov	r4, r0
    write(str, strlen(str));
   b53f2:	4608      	mov	r0, r1
   b53f4:	9101      	str	r1, [sp, #4]
   b53f6:	f001 ffc6 	bl	b7386 <strlen>
   b53fa:	6823      	ldr	r3, [r4, #0]
   b53fc:	9901      	ldr	r1, [sp, #4]
   b53fe:	68db      	ldr	r3, [r3, #12]
   b5400:	4602      	mov	r2, r0
   b5402:	4620      	mov	r0, r4
}
   b5404:	b002      	add	sp, #8
   b5406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b540a:	4718      	bx	r3

000b540c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b540c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b540e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5410:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5414:	68db      	ldr	r3, [r3, #12]
   b5416:	2201      	movs	r2, #1
   b5418:	f10d 0107 	add.w	r1, sp, #7
   b541c:	4798      	blx	r3
}
   b541e:	b003      	add	sp, #12
   b5420:	f85d fb04 	ldr.w	pc, [sp], #4

000b5424 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5424:	b40e      	push	{r1, r2, r3}
   b5426:	b503      	push	{r0, r1, lr}
   b5428:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b542a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b542c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5430:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5432:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5434:	f7ff ff3b 	bl	b52ae <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5438:	b002      	add	sp, #8
   b543a:	f85d eb04 	ldr.w	lr, [sp], #4
   b543e:	b003      	add	sp, #12
   b5440:	4770      	bx	lr

000b5442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5442:	680a      	ldr	r2, [r1, #0]
   b5444:	6002      	str	r2, [r0, #0]
   b5446:	684a      	ldr	r2, [r1, #4]
   b5448:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b544a:	2200      	movs	r2, #0
   b544c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5450:	b510      	push	{r4, lr}
   b5452:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5454:	688c      	ldr	r4, [r1, #8]
   b5456:	6084      	str	r4, [r0, #8]
   b5458:	68cc      	ldr	r4, [r1, #12]
   b545a:	60c4      	str	r4, [r0, #12]
   b545c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b545e:	608a      	str	r2, [r1, #8]
   b5460:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5462:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5464:	610a      	str	r2, [r1, #16]
   b5466:	bd10      	pop	{r4, pc}

000b5468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b546c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5470:	f04f 0a14 	mov.w	sl, #20
   b5474:	9300      	str	r3, [sp, #0]
   b5476:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b547a:	4b18      	ldr	r3, [pc, #96]	; (b54dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b547c:	10a4      	asrs	r4, r4, #2
   b547e:	4617      	mov	r7, r2
   b5480:	435c      	muls	r4, r3
   b5482:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5484:	2c00      	cmp	r4, #0
   b5486:	dd21      	ble.n	b54cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5488:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b548a:	fb0a f006 	mul.w	r0, sl, r6
   b548e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5492:	463a      	mov	r2, r7
   b5494:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5498:	5828      	ldr	r0, [r5, r0]
   b549a:	9101      	str	r1, [sp, #4]
   b549c:	455f      	cmp	r7, fp
   b549e:	bf28      	it	cs
   b54a0:	465a      	movcs	r2, fp
   b54a2:	f001 ff78 	bl	b7396 <strncmp>
                if (cmp == 0) {
   b54a6:	2800      	cmp	r0, #0
   b54a8:	9901      	ldr	r1, [sp, #4]
   b54aa:	f04f 0301 	mov.w	r3, #1
   b54ae:	d10b      	bne.n	b54c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b54b0:	455f      	cmp	r7, fp
   b54b2:	d103      	bne.n	b54bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b54b4:	9a00      	ldr	r2, [sp, #0]
   b54b6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b54b8:	4634      	mov	r4, r6
   b54ba:	e7e3      	b.n	b5484 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b54bc:	d9fc      	bls.n	b54b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b54be:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b54c0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b54c4:	3e01      	subs	r6, #1
   b54c6:	e7f7      	b.n	b54b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b54c8:	dbf9      	blt.n	b54be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b54ca:	e7f5      	b.n	b54b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b54cc:	eba5 0508 	sub.w	r5, r5, r8
}
   b54d0:	4802      	ldr	r0, [pc, #8]	; (b54dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b54d2:	10ad      	asrs	r5, r5, #2
   b54d4:	4368      	muls	r0, r5
   b54d6:	b003      	add	sp, #12
   b54d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54dc:	cccccccd 	.word	0xcccccccd

000b54e0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b54e2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b54e4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54e6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b54e8:	b303      	cbz	r3, b552c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b54ea:	b1f9      	cbz	r1, b552c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b54ec:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b54ee:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b54f2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b54f4:	a903      	add	r1, sp, #12
   b54f6:	a801      	add	r0, sp, #4
   b54f8:	f7ff ff19 	bl	b532e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b54fc:	4601      	mov	r1, r0
   b54fe:	b1a8      	cbz	r0, b552c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5500:	f10d 030b 	add.w	r3, sp, #11
   b5504:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5506:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b550a:	4620      	mov	r0, r4
   b550c:	f7ff ffac 	bl	b5468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5510:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5514:	b153      	cbz	r3, b552c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5516:	6823      	ldr	r3, [r4, #0]
   b5518:	2414      	movs	r4, #20
   b551a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b551e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5520:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5524:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5526:	bfa8      	it	ge
   b5528:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b552a:	e7e3      	b.n	b54f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b552c:	4628      	mov	r0, r5
   b552e:	b004      	add	sp, #16
   b5530:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5534 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5534:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5536:	4c09      	ldr	r4, [pc, #36]	; (b555c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5538:	7823      	ldrb	r3, [r4, #0]
   b553a:	f3bf 8f5b 	dmb	ish
   b553e:	07db      	lsls	r3, r3, #31
   b5540:	d409      	bmi.n	b5556 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5542:	4620      	mov	r0, r4
   b5544:	f7fe fdba 	bl	b40bc <__cxa_guard_acquire>
   b5548:	b128      	cbz	r0, b5556 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b554a:	4620      	mov	r0, r4
   b554c:	f7fe fdbb 	bl	b40c6 <__cxa_guard_release>
   b5550:	4803      	ldr	r0, [pc, #12]	; (b5560 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5552:	f001 fe83 	bl	b725c <atexit>
}
   b5556:	4803      	ldr	r0, [pc, #12]	; (b5564 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5558:	bd10      	pop	{r4, pc}
   b555a:	bf00      	nop
   b555c:	2003e688 	.word	0x2003e688
   b5560:	000b5327 	.word	0x000b5327
   b5564:	2003e5ac 	.word	0x2003e5ac

000b5568 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5568:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b556a:	4c09      	ldr	r4, [pc, #36]	; (b5590 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b556c:	7823      	ldrb	r3, [r4, #0]
   b556e:	f3bf 8f5b 	dmb	ish
   b5572:	07db      	lsls	r3, r3, #31
   b5574:	d409      	bmi.n	b558a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5576:	4620      	mov	r0, r4
   b5578:	f7fe fda0 	bl	b40bc <__cxa_guard_acquire>
   b557c:	b128      	cbz	r0, b558a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b557e:	4620      	mov	r0, r4
   b5580:	f7fe fda1 	bl	b40c6 <__cxa_guard_release>
   b5584:	4803      	ldr	r0, [pc, #12]	; (b5594 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5586:	f001 fe69 	bl	b725c <atexit>
    return &factory;
}
   b558a:	4803      	ldr	r0, [pc, #12]	; (b5598 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b558c:	bd10      	pop	{r4, pc}
   b558e:	bf00      	nop
   b5590:	2003e68c 	.word	0x2003e68c
   b5594:	000b538f 	.word	0x000b538f
   b5598:	2003e5b0 	.word	0x2003e5b0

000b559c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b559c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b559e:	2500      	movs	r5, #0
   b55a0:	4604      	mov	r4, r0
   b55a2:	e9c0 5500 	strd	r5, r5, [r0]
   b55a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b55aa:	6085      	str	r5, [r0, #8]
   b55ac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b55ae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b55b2:	f7ff faff 	bl	b4bb4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b55b6:	f7ff ffbd 	bl	b5534 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b55ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b55bc:	f7ff ffd4 	bl	b5568 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b55c0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b55c2:	6220      	str	r0, [r4, #32]
}
   b55c4:	4620      	mov	r0, r4
   b55c6:	bd38      	pop	{r3, r4, r5, pc}

000b55c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b55c8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b55ca:	4c0a      	ldr	r4, [pc, #40]	; (b55f4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b55cc:	7823      	ldrb	r3, [r4, #0]
   b55ce:	f3bf 8f5b 	dmb	ish
   b55d2:	07db      	lsls	r3, r3, #31
   b55d4:	d40c      	bmi.n	b55f0 <_ZN5spark10LogManager8instanceEv+0x28>
   b55d6:	4620      	mov	r0, r4
   b55d8:	f7fe fd70 	bl	b40bc <__cxa_guard_acquire>
   b55dc:	b140      	cbz	r0, b55f0 <_ZN5spark10LogManager8instanceEv+0x28>
   b55de:	4806      	ldr	r0, [pc, #24]	; (b55f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b55e0:	f7ff ffdc 	bl	b559c <_ZN5spark10LogManagerC1Ev>
   b55e4:	4620      	mov	r0, r4
   b55e6:	f7fe fd6e 	bl	b40c6 <__cxa_guard_release>
   b55ea:	4804      	ldr	r0, [pc, #16]	; (b55fc <_ZN5spark10LogManager8instanceEv+0x34>)
   b55ec:	f001 fe36 	bl	b725c <atexit>
    return &mgr;
}
   b55f0:	4801      	ldr	r0, [pc, #4]	; (b55f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b55f2:	bd10      	pop	{r4, pc}
   b55f4:	2003e684 	.word	0x2003e684
   b55f8:	2003e694 	.word	0x2003e694
   b55fc:	000b5b1d 	.word	0x000b5b1d

000b5600 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5600:	4a02      	ldr	r2, [pc, #8]	; (b560c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5602:	4903      	ldr	r1, [pc, #12]	; (b5610 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5604:	4803      	ldr	r0, [pc, #12]	; (b5614 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5606:	2300      	movs	r3, #0
   b5608:	f7ff bc04 	b.w	b4e14 <log_set_callbacks>
   b560c:	000b5901 	.word	0x000b5901
   b5610:	000b588d 	.word	0x000b588d
   b5614:	000b580d 	.word	0x000b580d

000b5618 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5618:	2300      	movs	r3, #0
   b561a:	461a      	mov	r2, r3
   b561c:	4619      	mov	r1, r3
   b561e:	4618      	mov	r0, r3
   b5620:	f7ff bbf8 	b.w	b4e14 <log_set_callbacks>

000b5624 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5624:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5626:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5628:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b562a:	4668      	mov	r0, sp
   b562c:	f7ff fec8 	bl	b53c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5630:	466a      	mov	r2, sp
   b5632:	4629      	mov	r1, r5
   b5634:	4620      	mov	r0, r4
   b5636:	f001 fa5d 	bl	b6af4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b563a:	a801      	add	r0, sp, #4
   b563c:	f7ff fdd1 	bl	b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5640:	4620      	mov	r0, r4
   b5642:	b003      	add	sp, #12
   b5644:	bd30      	pop	{r4, r5, pc}

000b5646 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5646:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5648:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b564a:	4604      	mov	r4, r0
   b564c:	4668      	mov	r0, sp
   b564e:	f7ff feb7 	bl	b53c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5652:	466a      	mov	r2, sp
   b5654:	4629      	mov	r1, r5
   b5656:	4620      	mov	r0, r4
   b5658:	f001 fa28 	bl	b6aac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b565c:	a801      	add	r0, sp, #4
   b565e:	f7ff fdc0 	bl	b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5662:	4620      	mov	r0, r4
   b5664:	b003      	add	sp, #12
   b5666:	bd30      	pop	{r4, r5, pc}

000b5668 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5668:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b566a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b566c:	4604      	mov	r4, r0
   b566e:	4668      	mov	r0, sp
   b5670:	f7ff fea6 	bl	b53c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5674:	466a      	mov	r2, sp
   b5676:	4629      	mov	r1, r5
   b5678:	4620      	mov	r0, r4
   b567a:	f001 f9c0 	bl	b69fe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b567e:	a801      	add	r0, sp, #4
   b5680:	f7ff fdaf 	bl	b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5684:	4620      	mov	r0, r4
   b5686:	b003      	add	sp, #12
   b5688:	bd30      	pop	{r4, r5, pc}
	...

000b568c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b568c:	b570      	push	{r4, r5, r6, lr}
   b568e:	b08a      	sub	sp, #40	; 0x28
   b5690:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5692:	4601      	mov	r1, r0
   b5694:	a804      	add	r0, sp, #16
   b5696:	f7ff ffc5 	bl	b5624 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b569a:	4e14      	ldr	r6, [pc, #80]	; (b56ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b569c:	a804      	add	r0, sp, #16
   b569e:	f001 fa41 	bl	b6b24 <_ZN5spark18JSONObjectIterator4nextEv>
   b56a2:	b1e8      	cbz	r0, b56e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b56a4:	a904      	add	r1, sp, #16
   b56a6:	4668      	mov	r0, sp
   b56a8:	f7ff ffcd 	bl	b5646 <_ZNK5spark18JSONObjectIterator4nameEv>
   b56ac:	9802      	ldr	r0, [sp, #8]
   b56ae:	4631      	mov	r1, r6
   b56b0:	f7ff fe66 	bl	b5380 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b56b4:	4604      	mov	r4, r0
   b56b6:	b110      	cbz	r0, b56be <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b56b8:	1e2c      	subs	r4, r5, #0
   b56ba:	bf18      	it	ne
   b56bc:	2401      	movne	r4, #1
   b56be:	a801      	add	r0, sp, #4
   b56c0:	f7ff fd8f 	bl	b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56c4:	2c00      	cmp	r4, #0
   b56c6:	d0e9      	beq.n	b569c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b56c8:	a904      	add	r1, sp, #16
   b56ca:	4668      	mov	r0, sp
   b56cc:	f7ff ffcc 	bl	b5668 <_ZNK5spark18JSONObjectIterator5valueEv>
   b56d0:	4668      	mov	r0, sp
   b56d2:	f001 f9ca 	bl	b6a6a <_ZNK5spark9JSONValue5toIntEv>
   b56d6:	6028      	str	r0, [r5, #0]
   b56d8:	a801      	add	r0, sp, #4
   b56da:	f7ff fd82 	bl	b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56de:	e7dd      	b.n	b569c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b56e0:	a805      	add	r0, sp, #20
   b56e2:	f7ff fd7e 	bl	b51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b56e6:	b00a      	add	sp, #40	; 0x28
   b56e8:	bd70      	pop	{r4, r5, r6, pc}
   b56ea:	bf00      	nop
   b56ec:	000b7788 	.word	0x000b7788

000b56f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b56f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b56f2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b56f4:	4620      	mov	r0, r4
   b56f6:	4913      	ldr	r1, [pc, #76]	; (b5744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b56f8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b56fa:	f001 fe32 	bl	b7362 <strcmp>
   b56fe:	b950      	cbnz	r0, b5716 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5700:	f000 ff06 	bl	b6510 <_Z16_fetch_usbserialv>
   b5704:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5708:	f000 fef0 	bl	b64ec <_ZN9USBSerial5beginEl>
}
   b570c:	b003      	add	sp, #12
   b570e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5712:	f000 befd 	b.w	b6510 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5716:	490c      	ldr	r1, [pc, #48]	; (b5748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5718:	4620      	mov	r0, r4
   b571a:	f001 fe22 	bl	b7362 <strcmp>
   b571e:	b978      	cbnz	r0, b5740 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5720:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5724:	a901      	add	r1, sp, #4
   b5726:	4628      	mov	r0, r5
        int baud = 9600;
   b5728:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b572a:	f7ff ffaf 	bl	b568c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b572e:	f001 faed 	bl	b6d0c <_Z22__fetch_global_Serial1v>
   b5732:	9901      	ldr	r1, [sp, #4]
   b5734:	f000 ffb4 	bl	b66a0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5738:	f001 fae8 	bl	b6d0c <_Z22__fetch_global_Serial1v>
}
   b573c:	b003      	add	sp, #12
   b573e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5740:	2000      	movs	r0, #0
   b5742:	e7fb      	b.n	b573c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5744:	000b778d 	.word	0x000b778d
   b5748:	000b7794 	.word	0x000b7794

000b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b574c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b574e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5752:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5754:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5756:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b575a:	42ae      	cmp	r6, r5
   b575c:	d005      	beq.n	b576a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b575e:	f105 0008 	add.w	r0, r5, #8
   b5762:	f7ff fff3 	bl	b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5766:	3514      	adds	r5, #20
   b5768:	e7f7      	b.n	b575a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b576a:	6820      	ldr	r0, [r4, #0]
   b576c:	f7ff fc06 	bl	b4f7c <free>
}
   b5770:	4620      	mov	r0, r4
   b5772:	bd70      	pop	{r4, r5, r6, pc}

000b5774 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5774:	b510      	push	{r4, lr}
   b5776:	4604      	mov	r4, r0
   b5778:	300c      	adds	r0, #12
   b577a:	f7ff ffe7 	bl	b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b577e:	4620      	mov	r0, r4
   b5780:	f7ff fd1d 	bl	b51be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5784:	4620      	mov	r0, r4
   b5786:	bd10      	pop	{r4, pc}

000b5788 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5788:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b578a:	4b04      	ldr	r3, [pc, #16]	; (b579c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b578c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b578e:	f840 3b04 	str.w	r3, [r0], #4
   b5792:	f7ff ffef 	bl	b5774 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5796:	4620      	mov	r0, r4
   b5798:	bd10      	pop	{r4, pc}
   b579a:	bf00      	nop
   b579c:	000b7624 	.word	0x000b7624

000b57a0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b57a0:	b510      	push	{r4, lr}
   b57a2:	4604      	mov	r4, r0
   b57a4:	f7ff fff0 	bl	b5788 <_ZN5spark16StreamLogHandlerD1Ev>
   b57a8:	4620      	mov	r0, r4
   b57aa:	2124      	movs	r1, #36	; 0x24
   b57ac:	f7fe fc77 	bl	b409e <_ZdlPvj>
   b57b0:	4620      	mov	r0, r4
   b57b2:	bd10      	pop	{r4, pc}

000b57b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b57b4:	b510      	push	{r4, lr}
   b57b6:	4b03      	ldr	r3, [pc, #12]	; (b57c4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b57b8:	6003      	str	r3, [r0, #0]
   b57ba:	4604      	mov	r4, r0
   b57bc:	f7ff ffe4 	bl	b5788 <_ZN5spark16StreamLogHandlerD1Ev>
   b57c0:	4620      	mov	r0, r4
   b57c2:	bd10      	pop	{r4, pc}
   b57c4:	000b7838 	.word	0x000b7838

000b57c8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b57c8:	b510      	push	{r4, lr}
   b57ca:	4604      	mov	r4, r0
   b57cc:	f7ff fff2 	bl	b57b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b57d0:	4620      	mov	r0, r4
   b57d2:	2124      	movs	r1, #36	; 0x24
   b57d4:	f7fe fc63 	bl	b409e <_ZdlPvj>
   b57d8:	4620      	mov	r0, r4
   b57da:	bd10      	pop	{r4, pc}

000b57dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b57dc:	2200      	movs	r2, #0
   b57de:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b57e2:	b510      	push	{r4, lr}
        capacity_(0) {
   b57e4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b57e6:	680c      	ldr	r4, [r1, #0]
   b57e8:	6004      	str	r4, [r0, #0]
   b57ea:	684c      	ldr	r4, [r1, #4]
   b57ec:	6044      	str	r4, [r0, #4]
   b57ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57f0:	600a      	str	r2, [r1, #0]
   b57f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b57f4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57f6:	608a      	str	r2, [r1, #8]
}
   b57f8:	bd10      	pop	{r4, pc}

000b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b57fa:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b57fc:	6803      	ldr	r3, [r0, #0]
   b57fe:	4604      	mov	r4, r0
   b5800:	6818      	ldr	r0, [r3, #0]
   b5802:	f7ff f9ef 	bl	b4be4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5806:	4620      	mov	r0, r4
   b5808:	bd10      	pop	{r4, pc}
	...

000b580c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5810:	b087      	sub	sp, #28
   b5812:	4680      	mov	r8, r0
   b5814:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5816:	4b1c      	ldr	r3, [pc, #112]	; (b5888 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5818:	685b      	ldr	r3, [r3, #4]
   b581a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b581e:	4689      	mov	r9, r1
   b5820:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b5822:	b96b      	cbnz	r3, b5840 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5824:	f7ff fed0 	bl	b55c8 <_ZN5spark10LogManager8instanceEv>
   b5828:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b582a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b582e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5830:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5832:	f7ff fda3 	bl	b537c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5836:	7b23      	ldrb	r3, [r4, #12]
   b5838:	b12b      	cbz	r3, b5846 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b583a:	a805      	add	r0, sp, #20
   b583c:	f7ff ffdd 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5840:	b007      	add	sp, #28
   b5842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5846:	2301      	movs	r3, #1
   b5848:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b584a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b584e:	fa5f f989 	uxtb.w	r9, r9
   b5852:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5856:	45aa      	cmp	sl, r5
   b5858:	d012      	beq.n	b5880 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b585a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b585e:	4631      	mov	r1, r6
   b5860:	1d38      	adds	r0, r7, #4
   b5862:	f7ff fe3d 	bl	b54e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5866:	4581      	cmp	r9, r0
   b5868:	d3f5      	bcc.n	b5856 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b586a:	683b      	ldr	r3, [r7, #0]
   b586c:	9a03      	ldr	r2, [sp, #12]
   b586e:	9200      	str	r2, [sp, #0]
   b5870:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5874:	464a      	mov	r2, r9
   b5876:	4633      	mov	r3, r6
   b5878:	4641      	mov	r1, r8
   b587a:	4638      	mov	r0, r7
   b587c:	47d8      	blx	fp
   b587e:	e7ea      	b.n	b5856 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5880:	2300      	movs	r3, #0
   b5882:	7323      	strb	r3, [r4, #12]
   b5884:	e7d9      	b.n	b583a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5886:	bf00      	nop
   b5888:	e000ed00 	.word	0xe000ed00

000b588c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b588c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5890:	469b      	mov	fp, r3
   b5892:	4b1a      	ldr	r3, [pc, #104]	; (b58fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5894:	685b      	ldr	r3, [r3, #4]
   b5896:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b589a:	4680      	mov	r8, r0
   b589c:	4689      	mov	r9, r1
   b589e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b58a0:	b96b      	cbnz	r3, b58be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b58a2:	f7ff fe91 	bl	b55c8 <_ZN5spark10LogManager8instanceEv>
   b58a6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b58a8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b58ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58ae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b58b0:	f7ff fd64 	bl	b537c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b58b4:	7b23      	ldrb	r3, [r4, #12]
   b58b6:	b12b      	cbz	r3, b58c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b58b8:	a801      	add	r0, sp, #4
   b58ba:	f7ff ff9e 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b58be:	b003      	add	sp, #12
   b58c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b58c4:	2301      	movs	r3, #1
   b58c6:	7323      	strb	r3, [r4, #12]
   b58c8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b58cc:	b2f6      	uxtb	r6, r6
   b58ce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b58d2:	4555      	cmp	r5, sl
   b58d4:	d00e      	beq.n	b58f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b58d6:	f855 7b04 	ldr.w	r7, [r5], #4
   b58da:	4659      	mov	r1, fp
   b58dc:	1d38      	adds	r0, r7, #4
   b58de:	f7ff fdff 	bl	b54e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b58e2:	4286      	cmp	r6, r0
   b58e4:	d3f5      	bcc.n	b58d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b58e6:	683b      	ldr	r3, [r7, #0]
   b58e8:	464a      	mov	r2, r9
   b58ea:	68db      	ldr	r3, [r3, #12]
   b58ec:	4641      	mov	r1, r8
   b58ee:	4638      	mov	r0, r7
   b58f0:	4798      	blx	r3
   b58f2:	e7ee      	b.n	b58d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b58f4:	2300      	movs	r3, #0
   b58f6:	7323      	strb	r3, [r4, #12]
   b58f8:	e7de      	b.n	b58b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b58fa:	bf00      	nop
   b58fc:	e000ed00 	.word	0xe000ed00

000b5900 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5904:	4b16      	ldr	r3, [pc, #88]	; (b5960 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5906:	685b      	ldr	r3, [r3, #4]
   b5908:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b590c:	4605      	mov	r5, r0
   b590e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5910:	bb1b      	cbnz	r3, b595a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5912:	f7ff fe59 	bl	b55c8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5916:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b591a:	4604      	mov	r4, r0
   b591c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b591e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5920:	f7ff fd2c 	bl	b537c <_ZN14RecursiveMutex4lockEv.isra.0>
   b5924:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5928:	2446      	movs	r4, #70	; 0x46
   b592a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b592e:	45b0      	cmp	r8, r6
   b5930:	d109      	bne.n	b5946 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5932:	a801      	add	r0, sp, #4
   b5934:	f7ff ff61 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5938:	42a5      	cmp	r5, r4
   b593a:	bfb4      	ite	lt
   b593c:	2000      	movlt	r0, #0
   b593e:	2001      	movge	r0, #1
}
   b5940:	b002      	add	sp, #8
   b5942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5946:	f856 0b04 	ldr.w	r0, [r6], #4
   b594a:	4639      	mov	r1, r7
   b594c:	3004      	adds	r0, #4
   b594e:	f7ff fdc7 	bl	b54e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5952:	4284      	cmp	r4, r0
   b5954:	bfa8      	it	ge
   b5956:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5958:	e7e9      	b.n	b592e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b595a:	2000      	movs	r0, #0
   b595c:	e7f0      	b.n	b5940 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b595e:	bf00      	nop
   b5960:	e000ed00 	.word	0xe000ed00

000b5964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5966:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b596a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b596c:	4604      	mov	r4, r0
   b596e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5970:	db0d      	blt.n	b598e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5972:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5974:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5976:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5978:	dd04      	ble.n	b5984 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b597a:	00b9      	lsls	r1, r7, #2
   b597c:	f7ff fb06 	bl	b4f8c <realloc>
            if (!d) {
   b5980:	b918      	cbnz	r0, b598a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5984:	f7ff fafa 	bl	b4f7c <free>
        T* d = nullptr;
   b5988:	2000      	movs	r0, #0
        data_ = d;
   b598a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b598c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b598e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5990:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5992:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5996:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5998:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b599c:	1d08      	adds	r0, r1, #4
   b599e:	f001 fc79 	bl	b7294 <memmove>
    new(p) T(std::move(value));
   b59a2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b59a6:	6863      	ldr	r3, [r4, #4]
   b59a8:	3301      	adds	r3, #1
   b59aa:	6063      	str	r3, [r4, #4]
    return true;
   b59ac:	2001      	movs	r0, #1
   b59ae:	e7e8      	b.n	b5982 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b59b0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b59b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b59b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b59b6:	4604      	mov	r4, r0
   b59b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59ba:	9301      	str	r3, [sp, #4]
   b59bc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b59be:	f7ff fcdd 	bl	b537c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b59c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   b59c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b59ca:	4293      	cmp	r3, r2
   b59cc:	4619      	mov	r1, r3
   b59ce:	d00b      	beq.n	b59e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b59d0:	6809      	ldr	r1, [r1, #0]
   b59d2:	42a9      	cmp	r1, r5
   b59d4:	f103 0304 	add.w	r3, r3, #4
   b59d8:	d1f7      	bne.n	b59ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b59da:	a801      	add	r0, sp, #4
   b59dc:	f7ff ff0d 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b59e0:	2500      	movs	r5, #0
}
   b59e2:	4628      	mov	r0, r5
   b59e4:	b003      	add	sp, #12
   b59e6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b59e8:	4629      	mov	r1, r5
   b59ea:	4620      	mov	r0, r4
   b59ec:	f7ff ffba 	bl	b5964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b59f0:	4605      	mov	r5, r0
   b59f2:	2800      	cmp	r0, #0
   b59f4:	d0f1      	beq.n	b59da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b59f6:	6863      	ldr	r3, [r4, #4]
   b59f8:	2b01      	cmp	r3, #1
   b59fa:	d101      	bne.n	b5a00 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b59fc:	f7ff fe00 	bl	b5600 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a00:	a801      	add	r0, sp, #4
   b5a02:	f7ff fefa 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5a06:	e7ec      	b.n	b59e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5a08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a08:	b570      	push	{r4, r5, r6, lr}
   b5a0a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5a0c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a10:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5a12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5a16:	4282      	cmp	r2, r0
   b5a18:	d00f      	beq.n	b5a3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5a1a:	4601      	mov	r1, r0
            if (*p == value) {
   b5a1c:	681d      	ldr	r5, [r3, #0]
   b5a1e:	f851 6b04 	ldr.w	r6, [r1], #4
   b5a22:	42ae      	cmp	r6, r5
   b5a24:	d107      	bne.n	b5a36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5a26:	1a52      	subs	r2, r2, r1
   b5a28:	f001 fc34 	bl	b7294 <memmove>
    --size_;
   b5a2c:	6863      	ldr	r3, [r4, #4]
   b5a2e:	3b01      	subs	r3, #1
   b5a30:	6063      	str	r3, [r4, #4]
    return true;
   b5a32:	2001      	movs	r0, #1
}
   b5a34:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5a36:	4608      	mov	r0, r1
   b5a38:	e7ed      	b.n	b5a16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5a3a:	2000      	movs	r0, #0
   b5a3c:	e7fa      	b.n	b5a34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5a3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5a3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5a40:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5a44:	4604      	mov	r4, r0
   b5a46:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5a48:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a4a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5a4c:	f7ff fc96 	bl	b537c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5a50:	a901      	add	r1, sp, #4
   b5a52:	4620      	mov	r0, r4
   b5a54:	f7ff ffd8 	bl	b5a08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5a58:	b118      	cbz	r0, b5a62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5a5a:	6863      	ldr	r3, [r4, #4]
   b5a5c:	b90b      	cbnz	r3, b5a62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5a5e:	f7ff fddb 	bl	b5618 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a62:	a803      	add	r0, sp, #12
   b5a64:	f7ff fec9 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5a68:	b004      	add	sp, #16
   b5a6a:	bd10      	pop	{r4, pc}

000b5a6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5a6c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5a6e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5a72:	2318      	movs	r3, #24
   b5a74:	4604      	mov	r4, r0
   b5a76:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5a7a:	42ae      	cmp	r6, r5
   b5a7c:	d015      	beq.n	b5aaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5a7e:	f105 0110 	add.w	r1, r5, #16
   b5a82:	4620      	mov	r0, r4
   b5a84:	f7ff ffc0 	bl	b5a08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5a88:	6863      	ldr	r3, [r4, #4]
   b5a8a:	b90b      	cbnz	r3, b5a90 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5a8c:	f7ff fdc4 	bl	b5618 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5a90:	69e0      	ldr	r0, [r4, #28]
   b5a92:	6929      	ldr	r1, [r5, #16]
   b5a94:	6803      	ldr	r3, [r0, #0]
   b5a96:	68db      	ldr	r3, [r3, #12]
   b5a98:	4798      	blx	r3
        if (h.stream) {
   b5a9a:	6969      	ldr	r1, [r5, #20]
   b5a9c:	b119      	cbz	r1, b5aa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5a9e:	6a20      	ldr	r0, [r4, #32]
   b5aa0:	6803      	ldr	r3, [r0, #0]
   b5aa2:	68db      	ldr	r3, [r3, #12]
   b5aa4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5aa6:	3518      	adds	r5, #24
   b5aa8:	e7e7      	b.n	b5a7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5aaa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5aae:	2618      	movs	r6, #24
   b5ab0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ab4:	42ae      	cmp	r6, r5
   b5ab6:	d004      	beq.n	b5ac2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5ab8:	4628      	mov	r0, r5
   b5aba:	f7ff fadf 	bl	b507c <_ZN6StringD1Ev>
   b5abe:	3518      	adds	r5, #24
   b5ac0:	e7f8      	b.n	b5ab4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5ac2:	2300      	movs	r3, #0
   b5ac4:	6163      	str	r3, [r4, #20]
}
   b5ac6:	bd70      	pop	{r4, r5, r6, pc}

000b5ac8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5aca:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5acc:	f7ff fda4 	bl	b5618 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5ad0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5ad4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ad6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ad8:	f7ff fc50 	bl	b537c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5adc:	4620      	mov	r0, r4
   b5ade:	f7ff ffc5 	bl	b5a6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5ae2:	a801      	add	r0, sp, #4
   b5ae4:	f7ff fe89 	bl	b57fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5ae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5aea:	b108      	cbz	r0, b5af0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5aec:	f7ff f86a 	bl	b4bc4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5af0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5af4:	2618      	movs	r6, #24
   b5af6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5afa:	42ae      	cmp	r6, r5
   b5afc:	d004      	beq.n	b5b08 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5afe:	4628      	mov	r0, r5
   b5b00:	f7ff fabc 	bl	b507c <_ZN6StringD1Ev>
   b5b04:	3518      	adds	r5, #24
   b5b06:	e7f8      	b.n	b5afa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5b08:	6920      	ldr	r0, [r4, #16]
   b5b0a:	f7ff fa37 	bl	b4f7c <free>
   b5b0e:	6820      	ldr	r0, [r4, #0]
   b5b10:	f7ff fa34 	bl	b4f7c <free>
}
   b5b14:	4620      	mov	r0, r4
   b5b16:	b002      	add	sp, #8
   b5b18:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5b1c <__tcf_2>:
    static LogManager mgr;
   b5b1c:	4801      	ldr	r0, [pc, #4]	; (b5b24 <__tcf_2+0x8>)
   b5b1e:	f7ff bfd3 	b.w	b5ac8 <_ZN5spark10LogManagerD1Ev>
   b5b22:	bf00      	nop
   b5b24:	2003e694 	.word	0x2003e694

000b5b28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5b28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b2c:	4604      	mov	r4, r0
   b5b2e:	460d      	mov	r5, r1
   b5b30:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b32:	d915      	bls.n	b5b60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5b34:	4290      	cmp	r0, r2
   b5b36:	d214      	bcs.n	b5b62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5b38:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5b3c:	1a75      	subs	r5, r6, r1
   b5b3e:	f1a1 0714 	sub.w	r7, r1, #20
   b5b42:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b44:	42b7      	cmp	r7, r6
   b5b46:	d01a      	beq.n	b5b7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5b48:	b11c      	cbz	r4, b5b52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5b4a:	4631      	mov	r1, r6
   b5b4c:	4620      	mov	r0, r4
   b5b4e:	f7ff fc78 	bl	b5442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5b52:	f106 0008 	add.w	r0, r6, #8
   b5b56:	f7ff fdf9 	bl	b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5b5a:	3e14      	subs	r6, #20
   b5b5c:	3c14      	subs	r4, #20
   b5b5e:	e7f1      	b.n	b5b44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5b60:	d00d      	beq.n	b5b7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5b62:	42b5      	cmp	r5, r6
   b5b64:	d00b      	beq.n	b5b7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5b66:	b11c      	cbz	r4, b5b70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5b68:	4629      	mov	r1, r5
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	f7ff fc69 	bl	b5442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5b70:	f105 0008 	add.w	r0, r5, #8
   b5b74:	f7ff fdea 	bl	b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5b78:	3514      	adds	r5, #20
   b5b7a:	3414      	adds	r4, #20
   b5b7c:	e7f1      	b.n	b5b62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5b80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b84:	4604      	mov	r4, r0
   b5b86:	460d      	mov	r5, r1
   b5b88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b8a:	d914      	bls.n	b5bb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5b8c:	4290      	cmp	r0, r2
   b5b8e:	d213      	bcs.n	b5bb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5b90:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5b94:	1a75      	subs	r5, r6, r1
   b5b96:	f1a1 0710 	sub.w	r7, r1, #16
   b5b9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b9c:	42b7      	cmp	r7, r6
   b5b9e:	d018      	beq.n	b5bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5ba0:	b11c      	cbz	r4, b5baa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5ba2:	4631      	mov	r1, r6
   b5ba4:	4620      	mov	r0, r4
   b5ba6:	f7ff fad1 	bl	b514c <_ZN6StringC1EOS_>
                end->~T();
   b5baa:	4630      	mov	r0, r6
   b5bac:	f7ff fa66 	bl	b507c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5bb0:	3e10      	subs	r6, #16
   b5bb2:	3c10      	subs	r4, #16
   b5bb4:	e7f2      	b.n	b5b9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5bb6:	d00c      	beq.n	b5bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5bb8:	42b5      	cmp	r5, r6
   b5bba:	d00a      	beq.n	b5bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5bbc:	b11c      	cbz	r4, b5bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5bbe:	4629      	mov	r1, r5
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	f7ff fac3 	bl	b514c <_ZN6StringC1EOS_>
                p->~T();
   b5bc6:	4628      	mov	r0, r5
   b5bc8:	f7ff fa58 	bl	b507c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5bcc:	3510      	adds	r5, #16
   b5bce:	3410      	adds	r4, #16
   b5bd0:	e7f2      	b.n	b5bb8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5bd4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5bd6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5bd8:	4605      	mov	r5, r0
        if (n > 0) {
   b5bda:	dd11      	ble.n	b5c00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5bdc:	0130      	lsls	r0, r6, #4
   b5bde:	f7ff f9c5 	bl	b4f6c <malloc>
            if (!d) {
   b5be2:	4604      	mov	r4, r0
   b5be4:	b158      	cbz	r0, b5bfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5be6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5bea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5bee:	f7ff ffc7 	bl	b5b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5bf2:	6828      	ldr	r0, [r5, #0]
   b5bf4:	f7ff f9c2 	bl	b4f7c <free>
        data_ = d;
   b5bf8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5bfa:	60ae      	str	r6, [r5, #8]
        return true;
   b5bfc:	2001      	movs	r0, #1
    }
   b5bfe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5c00:	2400      	movs	r4, #0
   b5c02:	e7f6      	b.n	b5bf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c08:	4690      	mov	r8, r2
   b5c0a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5c0c:	2300      	movs	r3, #0
   b5c0e:	9103      	str	r1, [sp, #12]
    return size_;
   b5c10:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5c14:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5c16:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5c18:	4299      	cmp	r1, r3
        capacity_(0) {
   b5c1a:	e9c0 3300 	strd	r3, r3, [r0]
   b5c1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5c26:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5c2a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5c2c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5c2e:	dc23      	bgt.n	b5c78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5c30:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5c34:	2314      	movs	r3, #20
   b5c36:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5c3a:	42af      	cmp	r7, r5
   b5c3c:	d03b      	beq.n	b5cb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5c3e:	4629      	mov	r1, r5
   b5c40:	a80b      	add	r0, sp, #44	; 0x2c
   b5c42:	f7ff fa83 	bl	b514c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5c46:	a90b      	add	r1, sp, #44	; 0x2c
   b5c48:	a80f      	add	r0, sp, #60	; 0x3c
   b5c4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5c4c:	f7ff fa7e 	bl	b514c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c50:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5c54:	4299      	cmp	r1, r3
   b5c56:	da1b      	bge.n	b5c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5c58:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5c5c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5c60:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5c64:	4631      	mov	r1, r6
   b5c66:	f106 0010 	add.w	r0, r6, #16
   b5c6a:	f7ff ff89 	bl	b5b80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5c6e:	b9ee      	cbnz	r6, b5cac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5c72:	3301      	adds	r3, #1
   b5c74:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5c76:	e011      	b.n	b5c9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5c78:	a808      	add	r0, sp, #32
   b5c7a:	f7ff ffab 	bl	b5bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5c7e:	2800      	cmp	r0, #0
   b5c80:	d1d6      	bne.n	b5c30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5c82:	a808      	add	r0, sp, #32
   b5c84:	f7ff fa9b 	bl	b51be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5c88:	4620      	mov	r0, r4
   b5c8a:	b015      	add	sp, #84	; 0x54
   b5c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c90:	3101      	adds	r1, #1
   b5c92:	a808      	add	r0, sp, #32
   b5c94:	f7ff ff9e 	bl	b5bd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5c98:	2800      	cmp	r0, #0
   b5c9a:	d1dd      	bne.n	b5c58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5c9c:	a80f      	add	r0, sp, #60	; 0x3c
   b5c9e:	f7ff f9ed 	bl	b507c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5ca2:	a80b      	add	r0, sp, #44	; 0x2c
   b5ca4:	f7ff f9ea 	bl	b507c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5ca8:	3514      	adds	r5, #20
   b5caa:	e7c6      	b.n	b5c3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5cac:	a90f      	add	r1, sp, #60	; 0x3c
   b5cae:	4630      	mov	r0, r6
   b5cb0:	f7ff fa4c 	bl	b514c <_ZN6StringC1EOS_>
   b5cb4:	e7dc      	b.n	b5c70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5cb6:	2600      	movs	r6, #0
   b5cb8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5cbc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5cbe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5cc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5cc6:	429e      	cmp	r6, r3
   b5cc8:	da7c      	bge.n	b5dc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5cca:	0133      	lsls	r3, r6, #4
   b5ccc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5cce:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5cd0:	b90b      	cbnz	r3, b5cd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5cd2:	3601      	adds	r6, #1
   b5cd4:	e7f5      	b.n	b5cc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5cd6:	2300      	movs	r3, #0
   b5cd8:	9307      	str	r3, [sp, #28]
   b5cda:	fb09 f306 	mul.w	r3, r9, r6
   b5cde:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5ce0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5ce2:	a907      	add	r1, sp, #28
   b5ce4:	a806      	add	r0, sp, #24
   b5ce6:	f7ff fb22 	bl	b532e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5cea:	4682      	mov	sl, r0
   b5cec:	2800      	cmp	r0, #0
   b5cee:	d0f0      	beq.n	b5cd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5cf0:	f04f 0300 	mov.w	r3, #0
   b5cf4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5cf8:	4601      	mov	r1, r0
   b5cfa:	9a07      	ldr	r2, [sp, #28]
   b5cfc:	f10d 0317 	add.w	r3, sp, #23
   b5d00:	4628      	mov	r0, r5
   b5d02:	f7ff fbb1 	bl	b5468 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d06:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5d0a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d0c:	2f00      	cmp	r7, #0
   b5d0e:	d14a      	bne.n	b5da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5d10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5d14:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5d18:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d20:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5d24:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5d28:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d2a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5d2e:	4293      	cmp	r3, r2
   b5d30:	db17      	blt.n	b5d62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5d32:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5d36:	f1ba 0f00 	cmp.w	sl, #0
   b5d3a:	dd30      	ble.n	b5d9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5d3c:	fb09 f00a 	mul.w	r0, r9, sl
   b5d40:	f7ff f914 	bl	b4f6c <malloc>
            if (!d) {
   b5d44:	4683      	mov	fp, r0
   b5d46:	b360      	cbz	r0, b5da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5d48:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5d4c:	fb09 1202 	mla	r2, r9, r2, r1
   b5d50:	f7ff feea 	bl	b5b28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5d54:	6828      	ldr	r0, [r5, #0]
   b5d56:	f7ff f911 	bl	b4f7c <free>
        data_ = d;
   b5d5a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5d5e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5d62:	682b      	ldr	r3, [r5, #0]
   b5d64:	9a01      	ldr	r2, [sp, #4]
   b5d66:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5d6a:	686a      	ldr	r2, [r5, #4]
   b5d6c:	4651      	mov	r1, sl
   b5d6e:	fb09 3202 	mla	r2, r9, r2, r3
   b5d72:	f10a 0014 	add.w	r0, sl, #20
   b5d76:	f7ff fed7 	bl	b5b28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5d7a:	f1ba 0f00 	cmp.w	sl, #0
   b5d7e:	d003      	beq.n	b5d88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5d80:	a90f      	add	r1, sp, #60	; 0x3c
   b5d82:	4650      	mov	r0, sl
   b5d84:	f7ff fb5d 	bl	b5442 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5d88:	686b      	ldr	r3, [r5, #4]
   b5d8a:	3301      	adds	r3, #1
   b5d8c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5d8e:	a811      	add	r0, sp, #68	; 0x44
   b5d90:	f7ff fcdc 	bl	b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d94:	b13f      	cbz	r7, b5da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5d96:	a80b      	add	r0, sp, #44	; 0x2c
   b5d98:	f7ff fcd8 	bl	b574c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5d9c:	e771      	b.n	b5c82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5d9e:	46bb      	mov	fp, r7
   b5da0:	e7d8      	b.n	b5d54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5da2:	2701      	movs	r7, #1
   b5da4:	e7f3      	b.n	b5d8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5da6:	9b01      	ldr	r3, [sp, #4]
   b5da8:	682d      	ldr	r5, [r5, #0]
   b5daa:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5dae:	9b06      	ldr	r3, [sp, #24]
   b5db0:	781b      	ldrb	r3, [r3, #0]
   b5db2:	b92b      	cbnz	r3, b5dc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5db4:	f8d8 3000 	ldr.w	r3, [r8]
   b5db8:	9a02      	ldr	r2, [sp, #8]
   b5dba:	4413      	add	r3, r2
   b5dbc:	7c1b      	ldrb	r3, [r3, #16]
   b5dbe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5dc0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5dc2:	e78e      	b.n	b5ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dc4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5dc6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dc8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5dca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dcc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dce:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5dd2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5dd6:	60a2      	str	r2, [r4, #8]
   b5dd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5dda:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ddc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5dde:	60e2      	str	r2, [r4, #12]
   b5de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5de2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5de4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5de6:	6122      	str	r2, [r4, #16]
   b5de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5dea:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5dec:	9b03      	ldr	r3, [sp, #12]
   b5dee:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5df0:	6162      	str	r2, [r4, #20]
   b5df2:	7623      	strb	r3, [r4, #24]
   b5df4:	e7cf      	b.n	b5d96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5df8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5dfa:	4604      	mov	r4, r0
   b5dfc:	b087      	sub	sp, #28
   b5dfe:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5e00:	4626      	mov	r6, r4
        stream_(&stream) {
   b5e02:	4619      	mov	r1, r3
   b5e04:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5e06:	4617      	mov	r7, r2
        stream_(&stream) {
   b5e08:	f7fe fa6f 	bl	b42ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e0c:	4b0b      	ldr	r3, [pc, #44]	; (b5e3c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5e0e:	f846 3b04 	str.w	r3, [r6], #4
   b5e12:	4669      	mov	r1, sp
   b5e14:	a803      	add	r0, sp, #12
   b5e16:	f7fe fa68 	bl	b42ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e1a:	aa03      	add	r2, sp, #12
   b5e1c:	4639      	mov	r1, r7
   b5e1e:	4630      	mov	r0, r6
   b5e20:	f7ff fef0 	bl	b5c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e24:	a803      	add	r0, sp, #12
   b5e26:	f7fe fa1f 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5e2a:	4668      	mov	r0, sp
   b5e2c:	f7fe fa1c 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e30:	4b03      	ldr	r3, [pc, #12]	; (b5e40 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5e32:	6023      	str	r3, [r4, #0]
}
   b5e34:	4620      	mov	r0, r4
        stream_(&stream) {
   b5e36:	6225      	str	r5, [r4, #32]
}
   b5e38:	b007      	add	sp, #28
   b5e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5e3c:	000b7624 	.word	0x000b7624
   b5e40:	000b7820 	.word	0x000b7820

000b5e44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5e44:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e46:	460f      	mov	r7, r1
   b5e48:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e4a:	491d      	ldr	r1, [pc, #116]	; (b5ec0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5e4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e4e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5e50:	4616      	mov	r6, r2
   b5e52:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e54:	f001 fa85 	bl	b7362 <strcmp>
   b5e58:	b9c0      	cbnz	r0, b5e8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5e5a:	b1a4      	cbz	r4, b5e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5e5c:	4629      	mov	r1, r5
   b5e5e:	a801      	add	r0, sp, #4
   b5e60:	f7ff fcbc 	bl	b57dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5e64:	4917      	ldr	r1, [pc, #92]	; (b5ec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5e66:	2024      	movs	r0, #36	; 0x24
   b5e68:	f000 ffb0 	bl	b6dcc <_ZnwjRKSt9nothrow_t>
   b5e6c:	4605      	mov	r5, r0
   b5e6e:	b130      	cbz	r0, b5e7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5e70:	ab01      	add	r3, sp, #4
   b5e72:	4632      	mov	r2, r6
   b5e74:	4621      	mov	r1, r4
   b5e76:	f7ff ffbf 	bl	b5df8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e7a:	4b13      	ldr	r3, [pc, #76]	; (b5ec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5e7c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5e7e:	a801      	add	r0, sp, #4
   b5e80:	f7fe f9f2 	bl	b4268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e84:	462c      	mov	r4, r5
}
   b5e86:	4620      	mov	r0, r4
   b5e88:	b005      	add	sp, #20
   b5e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5e8c:	490f      	ldr	r1, [pc, #60]	; (b5ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5e8e:	4638      	mov	r0, r7
   b5e90:	f001 fa67 	bl	b7362 <strcmp>
   b5e94:	b990      	cbnz	r0, b5ebc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5e96:	2c00      	cmp	r4, #0
   b5e98:	d0f5      	beq.n	b5e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5e9a:	4629      	mov	r1, r5
   b5e9c:	a801      	add	r0, sp, #4
   b5e9e:	f7ff fc9d 	bl	b57dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5ea2:	4908      	ldr	r1, [pc, #32]	; (b5ec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5ea4:	2024      	movs	r0, #36	; 0x24
   b5ea6:	f000 ff91 	bl	b6dcc <_ZnwjRKSt9nothrow_t>
   b5eaa:	4605      	mov	r5, r0
   b5eac:	2800      	cmp	r0, #0
   b5eae:	d0e6      	beq.n	b5e7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5eb0:	ab01      	add	r3, sp, #4
   b5eb2:	4632      	mov	r2, r6
   b5eb4:	4621      	mov	r1, r4
   b5eb6:	f7ff ff9f 	bl	b5df8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5eba:	e7e0      	b.n	b5e7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5ebc:	2400      	movs	r4, #0
   b5ebe:	e7e2      	b.n	b5e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5ec0:	000b779c 	.word	0x000b779c
   b5ec4:	000b79b1 	.word	0x000b79b1
   b5ec8:	000b7838 	.word	0x000b7838
   b5ecc:	000b77a0 	.word	0x000b77a0

000b5ed0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5ed0:	4b01      	ldr	r3, [pc, #4]	; (b5ed8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5ed2:	4a02      	ldr	r2, [pc, #8]	; (b5edc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5ed4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5ed6:	4770      	bx	lr
   b5ed8:	2003e690 	.word	0x2003e690
   b5edc:	000b77b1 	.word	0x000b77b1

000b5ee0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5ee4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5ee6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5eea:	4604      	mov	r4, r0
   b5eec:	460e      	mov	r6, r1
   b5eee:	4617      	mov	r7, r2
   b5ef0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5ef2:	f000 fb0d 	bl	b6510 <_Z16_fetch_usbserialv>
   b5ef6:	4581      	cmp	r9, r0
   b5ef8:	d04c      	beq.n	b5f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5efa:	792b      	ldrb	r3, [r5, #4]
   b5efc:	0719      	lsls	r1, r3, #28
   b5efe:	d504      	bpl.n	b5f0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5f00:	696a      	ldr	r2, [r5, #20]
   b5f02:	4954      	ldr	r1, [pc, #336]	; (b6054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5f04:	4620      	mov	r0, r4
   b5f06:	f7ff fa8d 	bl	b5424 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5f0a:	f1b8 0f00 	cmp.w	r8, #0
   b5f0e:	d00d      	beq.n	b5f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5f10:	215b      	movs	r1, #91	; 0x5b
   b5f12:	4620      	mov	r0, r4
   b5f14:	f7ff fa7a 	bl	b540c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5f18:	4641      	mov	r1, r8
   b5f1a:	4620      	mov	r0, r4
   b5f1c:	f7ff fa67 	bl	b53ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5f20:	6823      	ldr	r3, [r4, #0]
   b5f22:	494d      	ldr	r1, [pc, #308]	; (b6058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5f24:	68db      	ldr	r3, [r3, #12]
   b5f26:	2202      	movs	r2, #2
   b5f28:	4620      	mov	r0, r4
   b5f2a:	4798      	blx	r3
    if (attr.has_file) {
   b5f2c:	792b      	ldrb	r3, [r5, #4]
   b5f2e:	07da      	lsls	r2, r3, #31
   b5f30:	d523      	bpl.n	b5f7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5f32:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5f36:	212f      	movs	r1, #47	; 0x2f
   b5f38:	4640      	mov	r0, r8
   b5f3a:	f001 fa40 	bl	b73be <strrchr>
    if (s1) {
   b5f3e:	b108      	cbz	r0, b5f44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5f40:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5f44:	4641      	mov	r1, r8
   b5f46:	4620      	mov	r0, r4
   b5f48:	f7ff fa51 	bl	b53ee <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5f4c:	792b      	ldrb	r3, [r5, #4]
   b5f4e:	079b      	lsls	r3, r3, #30
   b5f50:	d508      	bpl.n	b5f64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5f52:	213a      	movs	r1, #58	; 0x3a
   b5f54:	4620      	mov	r0, r4
   b5f56:	f7ff fa59 	bl	b540c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5f5a:	68ea      	ldr	r2, [r5, #12]
   b5f5c:	493f      	ldr	r1, [pc, #252]	; (b605c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5f5e:	4620      	mov	r0, r4
   b5f60:	f7ff fa60 	bl	b5424 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5f64:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5f66:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5f68:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5f6c:	68db      	ldr	r3, [r3, #12]
   b5f6e:	bf14      	ite	ne
   b5f70:	493b      	ldrne	r1, [pc, #236]	; (b6060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5f72:	493c      	ldreq	r1, [pc, #240]	; (b6064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5f74:	2202      	movs	r2, #2
            write(": ", 2);
   b5f76:	4620      	mov	r0, r4
   b5f78:	4798      	blx	r3
    if (attr.has_function) {
   b5f7a:	792b      	ldrb	r3, [r5, #4]
   b5f7c:	0758      	lsls	r0, r3, #29
   b5f7e:	d51d      	bpl.n	b5fbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5f80:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5f82:	460b      	mov	r3, r1
   b5f84:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5f86:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f8a:	b160      	cbz	r0, b5fa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5f8c:	2820      	cmp	r0, #32
   b5f8e:	d108      	bne.n	b5fa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5f90:	4619      	mov	r1, r3
   b5f92:	e7f7      	b.n	b5f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5f94:	4834      	ldr	r0, [pc, #208]	; (b6068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5f96:	f000 fc4a 	bl	b682e <_ZN5spark12NetworkClass9listeningEv>
   b5f9a:	2800      	cmp	r0, #0
   b5f9c:	d0ad      	beq.n	b5efa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5fa2:	2828      	cmp	r0, #40	; 0x28
   b5fa4:	d1ee      	bne.n	b5f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5fa6:	6823      	ldr	r3, [r4, #0]
   b5fa8:	1a52      	subs	r2, r2, r1
   b5faa:	68db      	ldr	r3, [r3, #12]
   b5fac:	4620      	mov	r0, r4
   b5fae:	4798      	blx	r3
        write("(): ", 4);
   b5fb0:	6823      	ldr	r3, [r4, #0]
   b5fb2:	492e      	ldr	r1, [pc, #184]	; (b606c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5fb4:	68db      	ldr	r3, [r3, #12]
   b5fb6:	2204      	movs	r2, #4
   b5fb8:	4620      	mov	r0, r4
   b5fba:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5fbc:	2100      	movs	r1, #0
   b5fbe:	4638      	mov	r0, r7
   b5fc0:	f7fe ff20 	bl	b4e04 <log_level_name>
   b5fc4:	4601      	mov	r1, r0
    write(s);
   b5fc6:	4620      	mov	r0, r4
   b5fc8:	f7ff fa11 	bl	b53ee <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5fcc:	6823      	ldr	r3, [r4, #0]
   b5fce:	4925      	ldr	r1, [pc, #148]	; (b6064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5fd0:	68db      	ldr	r3, [r3, #12]
   b5fd2:	2202      	movs	r2, #2
   b5fd4:	4620      	mov	r0, r4
   b5fd6:	4798      	blx	r3
    if (msg) {
   b5fd8:	b11e      	cbz	r6, b5fe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5fda:	4631      	mov	r1, r6
   b5fdc:	4620      	mov	r0, r4
   b5fde:	f7ff fa06 	bl	b53ee <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5fe2:	792b      	ldrb	r3, [r5, #4]
   b5fe4:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5fe8:	d02c      	beq.n	b6044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5fea:	6823      	ldr	r3, [r4, #0]
   b5fec:	4920      	ldr	r1, [pc, #128]	; (b6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5fee:	68db      	ldr	r3, [r3, #12]
   b5ff0:	2202      	movs	r2, #2
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	4798      	blx	r3
        if (attr.has_code) {
   b5ff6:	792b      	ldrb	r3, [r5, #4]
   b5ff8:	06d9      	lsls	r1, r3, #27
   b5ffa:	d50a      	bpl.n	b6012 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5ffc:	6823      	ldr	r3, [r4, #0]
   b5ffe:	491d      	ldr	r1, [pc, #116]	; (b6074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6000:	68db      	ldr	r3, [r3, #12]
   b6002:	2207      	movs	r2, #7
   b6004:	4620      	mov	r0, r4
   b6006:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6008:	69aa      	ldr	r2, [r5, #24]
   b600a:	491b      	ldr	r1, [pc, #108]	; (b6078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b600c:	4620      	mov	r0, r4
   b600e:	f7ff fa09 	bl	b5424 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6012:	792b      	ldrb	r3, [r5, #4]
   b6014:	069a      	lsls	r2, r3, #26
   b6016:	d511      	bpl.n	b603c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6018:	06db      	lsls	r3, r3, #27
   b601a:	d505      	bpl.n	b6028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b601c:	6823      	ldr	r3, [r4, #0]
   b601e:	4910      	ldr	r1, [pc, #64]	; (b6060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6020:	68db      	ldr	r3, [r3, #12]
   b6022:	2202      	movs	r2, #2
   b6024:	4620      	mov	r0, r4
   b6026:	4798      	blx	r3
            write("details = ", 10);
   b6028:	6823      	ldr	r3, [r4, #0]
   b602a:	4914      	ldr	r1, [pc, #80]	; (b607c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b602c:	68db      	ldr	r3, [r3, #12]
   b602e:	4620      	mov	r0, r4
   b6030:	220a      	movs	r2, #10
   b6032:	4798      	blx	r3
            write(attr.details);
   b6034:	69e9      	ldr	r1, [r5, #28]
   b6036:	4620      	mov	r0, r4
   b6038:	f7ff f9d9 	bl	b53ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b603c:	215d      	movs	r1, #93	; 0x5d
   b603e:	4620      	mov	r0, r4
   b6040:	f7ff f9e4 	bl	b540c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6044:	6823      	ldr	r3, [r4, #0]
   b6046:	490e      	ldr	r1, [pc, #56]	; (b6080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6048:	68db      	ldr	r3, [r3, #12]
   b604a:	4620      	mov	r0, r4
   b604c:	2202      	movs	r2, #2
}
   b604e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6052:	4718      	bx	r3
   b6054:	000b77b5 	.word	0x000b77b5
   b6058:	000b77bc 	.word	0x000b77bc
   b605c:	000b77bf 	.word	0x000b77bf
   b6060:	000b77c2 	.word	0x000b77c2
   b6064:	000b77c7 	.word	0x000b77c7
   b6068:	2003e720 	.word	0x2003e720
   b606c:	000b77c5 	.word	0x000b77c5
   b6070:	000b77ca 	.word	0x000b77ca
   b6074:	000b77cd 	.word	0x000b77cd
   b6078:	000b77d5 	.word	0x000b77d5
   b607c:	000b77d8 	.word	0x000b77d8
   b6080:	000b77e3 	.word	0x000b77e3

000b6084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6088:	b085      	sub	sp, #20
    return stream_;
   b608a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b608e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6090:	4605      	mov	r5, r0
   b6092:	460f      	mov	r7, r1
   b6094:	4690      	mov	r8, r2
   b6096:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6098:	f000 fa3a 	bl	b6510 <_Z16_fetch_usbserialv>
   b609c:	4581      	cmp	r9, r0
   b609e:	d105      	bne.n	b60ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b60a0:	4849      	ldr	r0, [pc, #292]	; (b61c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b60a2:	f000 fbc4 	bl	b682e <_ZN5spark12NetworkClass9listeningEv>
   b60a6:	2800      	cmp	r0, #0
   b60a8:	f040 808a 	bne.w	b61c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b60ac:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b60ae:	4a47      	ldr	r2, [pc, #284]	; (b61cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b60b0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b60b2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b60b6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b60b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b60ba:	f88d 9008 	strb.w	r9, [sp, #8]
   b60be:	f000 fd5a 	bl	b6b76 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b60c2:	4649      	mov	r1, r9
   b60c4:	4640      	mov	r0, r8
   b60c6:	f7fe fe9d 	bl	b4e04 <log_level_name>
    json.name("l", 1).value(s);
   b60ca:	4941      	ldr	r1, [pc, #260]	; (b61d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b60cc:	4680      	mov	r8, r0
   b60ce:	2201      	movs	r2, #1
   b60d0:	a801      	add	r0, sp, #4
   b60d2:	f000 fddf 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b60d6:	4641      	mov	r1, r8
   b60d8:	f7ff f97b 	bl	b53d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b60dc:	b13f      	cbz	r7, b60ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b60de:	493d      	ldr	r1, [pc, #244]	; (b61d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b60e0:	2201      	movs	r2, #1
   b60e2:	a801      	add	r0, sp, #4
   b60e4:	f000 fdd6 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b60e8:	4639      	mov	r1, r7
   b60ea:	f7ff f972 	bl	b53d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b60ee:	b13e      	cbz	r6, b6100 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b60f0:	4939      	ldr	r1, [pc, #228]	; (b61d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b60f2:	2201      	movs	r2, #1
   b60f4:	a801      	add	r0, sp, #4
   b60f6:	f000 fdcd 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b60fa:	4631      	mov	r1, r6
   b60fc:	f7ff f969 	bl	b53d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6100:	7923      	ldrb	r3, [r4, #4]
   b6102:	07df      	lsls	r7, r3, #31
   b6104:	d50e      	bpl.n	b6124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6106:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6108:	212f      	movs	r1, #47	; 0x2f
   b610a:	4630      	mov	r0, r6
   b610c:	f001 f957 	bl	b73be <strrchr>
    if (s1) {
   b6110:	b100      	cbz	r0, b6114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6112:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6114:	4931      	ldr	r1, [pc, #196]	; (b61dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6116:	2201      	movs	r2, #1
   b6118:	a801      	add	r0, sp, #4
   b611a:	f000 fdbb 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b611e:	4631      	mov	r1, r6
   b6120:	f7ff f957 	bl	b53d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6124:	7923      	ldrb	r3, [r4, #4]
   b6126:	079e      	lsls	r6, r3, #30
   b6128:	d507      	bpl.n	b613a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b612a:	492d      	ldr	r1, [pc, #180]	; (b61e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b612c:	2202      	movs	r2, #2
   b612e:	a801      	add	r0, sp, #4
   b6130:	f000 fdb0 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b6134:	68e1      	ldr	r1, [r4, #12]
   b6136:	f000 fd2b 	bl	b6b90 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b613a:	7923      	ldrb	r3, [r4, #4]
   b613c:	0758      	lsls	r0, r3, #29
   b613e:	d514      	bpl.n	b616a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6140:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6142:	4633      	mov	r3, r6
   b6144:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6146:	f813 2b01 	ldrb.w	r2, [r3], #1
   b614a:	b12a      	cbz	r2, b6158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b614c:	2a20      	cmp	r2, #32
   b614e:	d101      	bne.n	b6154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6150:	461e      	mov	r6, r3
   b6152:	e7f7      	b.n	b6144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6154:	2a28      	cmp	r2, #40	; 0x28
   b6156:	d1f5      	bne.n	b6144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6158:	4922      	ldr	r1, [pc, #136]	; (b61e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b615a:	2202      	movs	r2, #2
   b615c:	a801      	add	r0, sp, #4
   b615e:	f000 fd99 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b6162:	1bba      	subs	r2, r7, r6
   b6164:	4631      	mov	r1, r6
   b6166:	f000 fda5 	bl	b6cb4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b616a:	7923      	ldrb	r3, [r4, #4]
   b616c:	0719      	lsls	r1, r3, #28
   b616e:	d507      	bpl.n	b6180 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6170:	491d      	ldr	r1, [pc, #116]	; (b61e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6172:	2201      	movs	r2, #1
   b6174:	a801      	add	r0, sp, #4
   b6176:	f000 fd8d 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b617a:	6961      	ldr	r1, [r4, #20]
   b617c:	f000 fd1a 	bl	b6bb4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6180:	7923      	ldrb	r3, [r4, #4]
   b6182:	06da      	lsls	r2, r3, #27
   b6184:	d508      	bpl.n	b6198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6186:	2204      	movs	r2, #4
   b6188:	4918      	ldr	r1, [pc, #96]	; (b61ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b618a:	eb0d 0002 	add.w	r0, sp, r2
   b618e:	f000 fd81 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b6192:	69a1      	ldr	r1, [r4, #24]
   b6194:	f000 fcfc 	bl	b6b90 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6198:	7923      	ldrb	r3, [r4, #4]
   b619a:	069b      	lsls	r3, r3, #26
   b619c:	d507      	bpl.n	b61ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b619e:	4914      	ldr	r1, [pc, #80]	; (b61f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b61a0:	2206      	movs	r2, #6
   b61a2:	a801      	add	r0, sp, #4
   b61a4:	f000 fd76 	bl	b6c94 <_ZN5spark10JSONWriter4nameEPKcj>
   b61a8:	69e1      	ldr	r1, [r4, #28]
   b61aa:	f7ff f912 	bl	b53d2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b61ae:	a801      	add	r0, sp, #4
   b61b0:	f000 fccb 	bl	b6b4a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b61b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b61b6:	490f      	ldr	r1, [pc, #60]	; (b61f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b61b8:	6803      	ldr	r3, [r0, #0]
   b61ba:	2202      	movs	r2, #2
   b61bc:	68db      	ldr	r3, [r3, #12]
   b61be:	4798      	blx	r3
}
   b61c0:	b005      	add	sp, #20
   b61c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b61c6:	bf00      	nop
   b61c8:	2003e720 	.word	0x2003e720
   b61cc:	000b7808 	.word	0x000b7808
   b61d0:	000b7792 	.word	0x000b7792
   b61d4:	000b77e6 	.word	0x000b77e6
   b61d8:	000b7a44 	.word	0x000b7a44
   b61dc:	000b77e8 	.word	0x000b77e8
   b61e0:	000b77ea 	.word	0x000b77ea
   b61e4:	000b77ed 	.word	0x000b77ed
   b61e8:	000b77f0 	.word	0x000b77f0
   b61ec:	000b77f2 	.word	0x000b77f2
   b61f0:	000b77f7 	.word	0x000b77f7
   b61f4:	000b77e3 	.word	0x000b77e3

000b61f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b61f8:	4b02      	ldr	r3, [pc, #8]	; (b6204 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b61fa:	681a      	ldr	r2, [r3, #0]
   b61fc:	4b02      	ldr	r3, [pc, #8]	; (b6208 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b61fe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6200:	4770      	bx	lr
   b6202:	bf00      	nop
   b6204:	2003e5b4 	.word	0x2003e5b4
   b6208:	2003e6bc 	.word	0x2003e6bc

000b620c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b620c:	2100      	movs	r1, #0
   b620e:	f7fe be11 	b.w	b4e34 <system_delay_ms>
	...

000b6214 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6214:	4b01      	ldr	r3, [pc, #4]	; (b621c <_GLOBAL__sub_I_RGB+0x8>)
   b6216:	2200      	movs	r2, #0
   b6218:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b621a:	4770      	bx	lr
   b621c:	2003e6c0 	.word	0x2003e6c0

000b6220 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6220:	4b01      	ldr	r3, [pc, #4]	; (b6228 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6222:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6224:	4770      	bx	lr
   b6226:	bf00      	nop
   b6228:	2003e5b8 	.word	0x2003e5b8

000b622c <serialEventRun>:
{
   b622c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b622e:	4b0b      	ldr	r3, [pc, #44]	; (b625c <serialEventRun+0x30>)
   b6230:	b143      	cbz	r3, b6244 <serialEventRun+0x18>
   b6232:	f000 f96d 	bl	b6510 <_Z16_fetch_usbserialv>
   b6236:	6803      	ldr	r3, [r0, #0]
   b6238:	691b      	ldr	r3, [r3, #16]
   b623a:	4798      	blx	r3
   b623c:	2800      	cmp	r0, #0
   b623e:	dd01      	ble.n	b6244 <serialEventRun+0x18>
        serialEvent();
   b6240:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6244:	4b06      	ldr	r3, [pc, #24]	; (b6260 <serialEventRun+0x34>)
   b6246:	b143      	cbz	r3, b625a <serialEventRun+0x2e>
   b6248:	f000 fd60 	bl	b6d0c <_Z22__fetch_global_Serial1v>
   b624c:	6803      	ldr	r3, [r0, #0]
   b624e:	691b      	ldr	r3, [r3, #16]
   b6250:	4798      	blx	r3
   b6252:	2800      	cmp	r0, #0
   b6254:	dd01      	ble.n	b625a <serialEventRun+0x2e>
        serialEvent1();
   b6256:	f3af 8000 	nop.w
}
   b625a:	bd08      	pop	{r3, pc}
	...

000b6264 <_post_loop>:
{
   b6264:	b508      	push	{r3, lr}
	serialEventRun();
   b6266:	f7ff ffe1 	bl	b622c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b626a:	f7fe fc93 	bl	b4b94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b626e:	4b01      	ldr	r3, [pc, #4]	; (b6274 <_post_loop+0x10>)
   b6270:	6018      	str	r0, [r3, #0]
}
   b6272:	bd08      	pop	{r3, pc}
   b6274:	2003e740 	.word	0x2003e740

000b6278 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6278:	4805      	ldr	r0, [pc, #20]	; (b6290 <_Z33system_initialize_user_backup_ramv+0x18>)
   b627a:	4a06      	ldr	r2, [pc, #24]	; (b6294 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b627c:	4906      	ldr	r1, [pc, #24]	; (b6298 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b627e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6280:	1a12      	subs	r2, r2, r0
   b6282:	f000 fff9 	bl	b7278 <memcpy>
    __backup_sram_signature = signature;
   b6286:	4b05      	ldr	r3, [pc, #20]	; (b629c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6288:	4a05      	ldr	r2, [pc, #20]	; (b62a0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b628a:	601a      	str	r2, [r3, #0]
}
   b628c:	bd08      	pop	{r3, pc}
   b628e:	bf00      	nop
   b6290:	2003f400 	.word	0x2003f400
   b6294:	2003f404 	.word	0x2003f404
   b6298:	000b7b94 	.word	0x000b7b94
   b629c:	2003f400 	.word	0x2003f400
   b62a0:	9a271c1e 	.word	0x9a271c1e

000b62a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b62a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b62a6:	2300      	movs	r3, #0
   b62a8:	9300      	str	r3, [sp, #0]
   b62aa:	461a      	mov	r2, r3
   b62ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b62b0:	f7fe fdda 	bl	b4e68 <system_ctrl_set_result>
}
   b62b4:	b003      	add	sp, #12
   b62b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b62bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b62bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b62be:	8843      	ldrh	r3, [r0, #2]
   b62c0:	2b0a      	cmp	r3, #10
   b62c2:	d008      	beq.n	b62d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b62c4:	2b50      	cmp	r3, #80	; 0x50
   b62c6:	d10b      	bne.n	b62e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b62c8:	4b09      	ldr	r3, [pc, #36]	; (b62f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b62ca:	681b      	ldr	r3, [r3, #0]
   b62cc:	b14b      	cbz	r3, b62e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b62ce:	b003      	add	sp, #12
   b62d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b62d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b62d6:	f7ff ffe5 	bl	b62a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b62da:	b003      	add	sp, #12
   b62dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b62e0:	2300      	movs	r3, #0
   b62e2:	9300      	str	r3, [sp, #0]
   b62e4:	461a      	mov	r2, r3
   b62e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b62ea:	f7fe fdbd 	bl	b4e68 <system_ctrl_set_result>
}
   b62ee:	e7f4      	b.n	b62da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b62f0:	2003e6d4 	.word	0x2003e6d4

000b62f4 <module_user_init_hook>:
{
   b62f4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b62f6:	4812      	ldr	r0, [pc, #72]	; (b6340 <module_user_init_hook+0x4c>)
   b62f8:	2100      	movs	r1, #0
   b62fa:	f7fe fe67 	bl	b4fcc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b62fe:	4b11      	ldr	r3, [pc, #68]	; (b6344 <module_user_init_hook+0x50>)
   b6300:	681a      	ldr	r2, [r3, #0]
   b6302:	4b11      	ldr	r3, [pc, #68]	; (b6348 <module_user_init_hook+0x54>)
   b6304:	429a      	cmp	r2, r3
   b6306:	4b11      	ldr	r3, [pc, #68]	; (b634c <module_user_init_hook+0x58>)
   b6308:	bf0c      	ite	eq
   b630a:	2201      	moveq	r2, #1
   b630c:	2200      	movne	r2, #0
   b630e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6310:	d001      	beq.n	b6316 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6312:	f7ff ffb1 	bl	b6278 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6316:	f7fe fc2d 	bl	b4b74 <HAL_RNG_GetRandomNumber>
   b631a:	4604      	mov	r4, r0
    srand(seed);
   b631c:	f000 ffdc 	bl	b72d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6320:	4b0b      	ldr	r3, [pc, #44]	; (b6350 <module_user_init_hook+0x5c>)
   b6322:	b113      	cbz	r3, b632a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6324:	4620      	mov	r0, r4
   b6326:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b632a:	2100      	movs	r1, #0
   b632c:	4808      	ldr	r0, [pc, #32]	; (b6350 <module_user_init_hook+0x5c>)
   b632e:	f7fe fe15 	bl	b4f5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6336:	4807      	ldr	r0, [pc, #28]	; (b6354 <module_user_init_hook+0x60>)
   b6338:	2100      	movs	r1, #0
   b633a:	f7fe bd8b 	b.w	b4e54 <system_ctrl_set_app_request_handler>
   b633e:	bf00      	nop
   b6340:	000b6221 	.word	0x000b6221
   b6344:	2003f400 	.word	0x2003f400
   b6348:	9a271c1e 	.word	0x9a271c1e
   b634c:	2003e6d0 	.word	0x2003e6d0
   b6350:	00000000 	.word	0x00000000
   b6354:	000b62bd 	.word	0x000b62bd

000b6358 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6358:	4770      	bx	lr

000b635a <_ZN9IPAddressD0Ev>:
   b635a:	b510      	push	{r4, lr}
   b635c:	2118      	movs	r1, #24
   b635e:	4604      	mov	r4, r0
   b6360:	f7fd fe9d 	bl	b409e <_ZdlPvj>
   b6364:	4620      	mov	r0, r4
   b6366:	bd10      	pop	{r4, pc}

000b6368 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6368:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b636a:	7d03      	ldrb	r3, [r0, #20]
   b636c:	2b06      	cmp	r3, #6
{
   b636e:	b08d      	sub	sp, #52	; 0x34
   b6370:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6372:	f100 0704 	add.w	r7, r0, #4
   b6376:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b637a:	d012      	beq.n	b63a2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b637c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6380:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6384:	220a      	movs	r2, #10
   b6386:	4630      	mov	r0, r6
   b6388:	f7fe ff73 	bl	b5272 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b638c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b638e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6390:	d019      	beq.n	b63c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6392:	2c00      	cmp	r4, #0
   b6394:	d0f4      	beq.n	b6380 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6396:	212e      	movs	r1, #46	; 0x2e
   b6398:	4630      	mov	r0, r6
   b639a:	f7fe ff5b 	bl	b5254 <_ZN5Print5printEc>
   b639e:	4404      	add	r4, r0
   b63a0:	e7ee      	b.n	b6380 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b63a2:	232f      	movs	r3, #47	; 0x2f
   b63a4:	466a      	mov	r2, sp
   b63a6:	4639      	mov	r1, r7
   b63a8:	200a      	movs	r0, #10
		buf[0] = 0;
   b63aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b63ae:	f7fe fc21 	bl	b4bf4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b63b2:	4668      	mov	r0, sp
   b63b4:	f000 ffe7 	bl	b7386 <strlen>
   b63b8:	6833      	ldr	r3, [r6, #0]
   b63ba:	4602      	mov	r2, r0
   b63bc:	68db      	ldr	r3, [r3, #12]
   b63be:	4669      	mov	r1, sp
   b63c0:	4630      	mov	r0, r6
   b63c2:	4798      	blx	r3
   b63c4:	4604      	mov	r4, r0
    }
    return n;
}
   b63c6:	4620      	mov	r0, r4
   b63c8:	b00d      	add	sp, #52	; 0x34
   b63ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b63cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b63cc:	b510      	push	{r4, lr}
   b63ce:	4b05      	ldr	r3, [pc, #20]	; (b63e4 <_ZN9IPAddressC1Ev+0x18>)
   b63d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b63d2:	2211      	movs	r2, #17
   b63d4:	f840 3b04 	str.w	r3, [r0], #4
   b63d8:	2100      	movs	r1, #0
   b63da:	f000 ff75 	bl	b72c8 <memset>
}
   b63de:	4620      	mov	r0, r4
   b63e0:	bd10      	pop	{r4, pc}
   b63e2:	bf00      	nop
   b63e4:	000b789c 	.word	0x000b789c

000b63e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b63e8:	4603      	mov	r3, r0
   b63ea:	4a07      	ldr	r2, [pc, #28]	; (b6408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b63ec:	b510      	push	{r4, lr}
   b63ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b63f2:	f101 0210 	add.w	r2, r1, #16
   b63f6:	f851 4b04 	ldr.w	r4, [r1], #4
   b63fa:	f843 4b04 	str.w	r4, [r3], #4
   b63fe:	4291      	cmp	r1, r2
   b6400:	d1f9      	bne.n	b63f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6402:	780a      	ldrb	r2, [r1, #0]
   b6404:	701a      	strb	r2, [r3, #0]
}
   b6406:	bd10      	pop	{r4, pc}
   b6408:	000b789c 	.word	0x000b789c

000b640c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b640c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b640e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6412:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6416:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b641a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b641e:	2304      	movs	r3, #4
   b6420:	6041      	str	r1, [r0, #4]
   b6422:	7503      	strb	r3, [r0, #20]
}
   b6424:	bd10      	pop	{r4, pc}
	...

000b6428 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6428:	b507      	push	{r0, r1, r2, lr}
   b642a:	4b06      	ldr	r3, [pc, #24]	; (b6444 <_ZN9IPAddressC1EPKh+0x1c>)
   b642c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b642e:	78cb      	ldrb	r3, [r1, #3]
   b6430:	9300      	str	r3, [sp, #0]
   b6432:	788b      	ldrb	r3, [r1, #2]
   b6434:	784a      	ldrb	r2, [r1, #1]
   b6436:	7809      	ldrb	r1, [r1, #0]
   b6438:	f7ff ffe8 	bl	b640c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b643c:	b003      	add	sp, #12
   b643e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6442:	bf00      	nop
   b6444:	000b789c 	.word	0x000b789c

000b6448 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6448:	7441      	strb	r1, [r0, #17]
}
   b644a:	4770      	bx	lr

000b644c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b644c:	4770      	bx	lr

000b644e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b644e:	4770      	bx	lr

000b6450 <_ZN9USBSerial4readEv>:
{
   b6450:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6452:	2100      	movs	r1, #0
   b6454:	7c00      	ldrb	r0, [r0, #16]
   b6456:	f7fe fca5 	bl	b4da4 <HAL_USB_USART_Receive_Data>
}
   b645a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b645e:	bd08      	pop	{r3, pc}

000b6460 <_ZN9USBSerial4peekEv>:
{
   b6460:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6462:	2101      	movs	r1, #1
   b6464:	7c00      	ldrb	r0, [r0, #16]
   b6466:	f7fe fc9d 	bl	b4da4 <HAL_USB_USART_Receive_Data>
}
   b646a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b646e:	bd08      	pop	{r3, pc}

000b6470 <_ZN9USBSerial17availableForWriteEv>:
{
   b6470:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6472:	7c00      	ldrb	r0, [r0, #16]
   b6474:	f7fe fc8e 	bl	b4d94 <HAL_USB_USART_Available_Data_For_Write>
}
   b6478:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b647c:	bd08      	pop	{r3, pc}

000b647e <_ZN9USBSerial9availableEv>:
{
   b647e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6480:	7c00      	ldrb	r0, [r0, #16]
   b6482:	f7fe fc7f 	bl	b4d84 <HAL_USB_USART_Available_Data>
}
   b6486:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b648a:	bd08      	pop	{r3, pc}

000b648c <_ZN9USBSerial5writeEh>:
{
   b648c:	b513      	push	{r0, r1, r4, lr}
   b648e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6490:	7c00      	ldrb	r0, [r0, #16]
{
   b6492:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6494:	f7fe fc7e 	bl	b4d94 <HAL_USB_USART_Available_Data_For_Write>
   b6498:	2800      	cmp	r0, #0
   b649a:	9901      	ldr	r1, [sp, #4]
   b649c:	dc01      	bgt.n	b64a2 <_ZN9USBSerial5writeEh+0x16>
   b649e:	7c60      	ldrb	r0, [r4, #17]
   b64a0:	b120      	cbz	r0, b64ac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b64a2:	7c20      	ldrb	r0, [r4, #16]
   b64a4:	f7fe fc86 	bl	b4db4 <HAL_USB_USART_Send_Data>
   b64a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b64ac:	b002      	add	sp, #8
   b64ae:	bd10      	pop	{r4, pc}

000b64b0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b64b0:	7c00      	ldrb	r0, [r0, #16]
   b64b2:	f7fe bc87 	b.w	b4dc4 <HAL_USB_USART_Flush_Data>

000b64b6 <_ZN9USBSerialD0Ev>:
   b64b6:	b510      	push	{r4, lr}
   b64b8:	2114      	movs	r1, #20
   b64ba:	4604      	mov	r4, r0
   b64bc:	f7fd fdef 	bl	b409e <_ZdlPvj>
   b64c0:	4620      	mov	r0, r4
   b64c2:	bd10      	pop	{r4, pc}

000b64c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b64c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b64c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64ca:	4604      	mov	r4, r0
   b64cc:	4608      	mov	r0, r1
   b64ce:	2100      	movs	r1, #0
   b64d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b64d4:	4b04      	ldr	r3, [pc, #16]	; (b64e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b64d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b64d8:	2301      	movs	r3, #1
  _serial = serial;
   b64da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b64dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b64de:	4611      	mov	r1, r2
   b64e0:	f7fe fc38 	bl	b4d54 <HAL_USB_USART_Init>
}
   b64e4:	4620      	mov	r0, r4
   b64e6:	bd10      	pop	{r4, pc}
   b64e8:	000b78b0 	.word	0x000b78b0

000b64ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b64ec:	7c00      	ldrb	r0, [r0, #16]
   b64ee:	2200      	movs	r2, #0
   b64f0:	f7fe bc38 	b.w	b4d64 <HAL_USB_USART_Begin>

000b64f4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b64f4:	7c00      	ldrb	r0, [r0, #16]
   b64f6:	f7fe bc3d 	b.w	b4d74 <HAL_USB_USART_End>

000b64fa <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b64fa:	7c00      	ldrb	r0, [r0, #16]
   b64fc:	f7fe bc6a 	b.w	b4dd4 <HAL_USB_USART_Is_Connected>

000b6500 <_Z19acquireSerialBufferv>:
{
   b6500:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6502:	2214      	movs	r2, #20
{
   b6504:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6506:	2100      	movs	r1, #0
   b6508:	f000 fede 	bl	b72c8 <memset>
}
   b650c:	4620      	mov	r0, r4
   b650e:	bd10      	pop	{r4, pc}

000b6510 <_Z16_fetch_usbserialv>:
{
   b6510:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6512:	4c0f      	ldr	r4, [pc, #60]	; (b6550 <_Z16_fetch_usbserialv+0x40>)
{
   b6514:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6516:	a803      	add	r0, sp, #12
   b6518:	f7ff fff2 	bl	b6500 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b651c:	7821      	ldrb	r1, [r4, #0]
   b651e:	f3bf 8f5b 	dmb	ish
   b6522:	f011 0101 	ands.w	r1, r1, #1
   b6526:	d10f      	bne.n	b6548 <_Z16_fetch_usbserialv+0x38>
   b6528:	4620      	mov	r0, r4
   b652a:	9101      	str	r1, [sp, #4]
   b652c:	f7fd fdc6 	bl	b40bc <__cxa_guard_acquire>
   b6530:	9901      	ldr	r1, [sp, #4]
   b6532:	b148      	cbz	r0, b6548 <_Z16_fetch_usbserialv+0x38>
   b6534:	aa03      	add	r2, sp, #12
   b6536:	4807      	ldr	r0, [pc, #28]	; (b6554 <_Z16_fetch_usbserialv+0x44>)
   b6538:	f7ff ffc4 	bl	b64c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b653c:	4620      	mov	r0, r4
   b653e:	f7fd fdc2 	bl	b40c6 <__cxa_guard_release>
   b6542:	4805      	ldr	r0, [pc, #20]	; (b6558 <_Z16_fetch_usbserialv+0x48>)
   b6544:	f000 fe8a 	bl	b725c <atexit>
	return _usbserial;
}
   b6548:	4802      	ldr	r0, [pc, #8]	; (b6554 <_Z16_fetch_usbserialv+0x44>)
   b654a:	b008      	add	sp, #32
   b654c:	bd10      	pop	{r4, pc}
   b654e:	bf00      	nop
   b6550:	2003e6d8 	.word	0x2003e6d8
   b6554:	2003e6dc 	.word	0x2003e6dc
   b6558:	000b644d 	.word	0x000b644d

000b655c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b655c:	2200      	movs	r2, #0
   b655e:	6840      	ldr	r0, [r0, #4]
   b6560:	4611      	mov	r1, r2
   b6562:	f7fe bca3 	b.w	b4eac <network_ready>

000b6566 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6566:	2200      	movs	r2, #0
   b6568:	6840      	ldr	r0, [r0, #4]
   b656a:	4611      	mov	r1, r2
   b656c:	f7fe bcbe 	b.w	b4eec <network_listening>

000b6570 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6570:	2200      	movs	r2, #0
   b6572:	6840      	ldr	r0, [r0, #4]
   b6574:	4611      	mov	r1, r2
   b6576:	f7fe bcc9 	b.w	b4f0c <network_get_listen_timeout>

000b657a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b657a:	6840      	ldr	r0, [r0, #4]
   b657c:	2200      	movs	r2, #0
   b657e:	f7fe bcbd 	b.w	b4efc <network_set_listen_timeout>

000b6582 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6582:	6840      	ldr	r0, [r0, #4]
   b6584:	2200      	movs	r2, #0
   b6586:	f081 0101 	eor.w	r1, r1, #1
   b658a:	f7fe bca7 	b.w	b4edc <network_listen>

000b658e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b658e:	2300      	movs	r3, #0
   b6590:	6840      	ldr	r0, [r0, #4]
   b6592:	461a      	mov	r2, r3
   b6594:	4619      	mov	r1, r3
   b6596:	f7fe bc99 	b.w	b4ecc <network_off>

000b659a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b659a:	2300      	movs	r3, #0
   b659c:	6840      	ldr	r0, [r0, #4]
   b659e:	461a      	mov	r2, r3
   b65a0:	4619      	mov	r1, r3
   b65a2:	f7fe bc8b 	b.w	b4ebc <network_on>

000b65a6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b65a6:	2200      	movs	r2, #0
   b65a8:	6840      	ldr	r0, [r0, #4]
   b65aa:	4611      	mov	r1, r2
   b65ac:	f7fe bc6e 	b.w	b4e8c <network_connecting>

000b65b0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65b0:	6840      	ldr	r0, [r0, #4]
   b65b2:	2200      	movs	r2, #0
   b65b4:	2102      	movs	r1, #2
   b65b6:	f7fe bc71 	b.w	b4e9c <network_disconnect>

000b65ba <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b65ba:	2300      	movs	r3, #0
   b65bc:	6840      	ldr	r0, [r0, #4]
   b65be:	461a      	mov	r2, r3
   b65c0:	f7fe bc5c 	b.w	b4e7c <network_connect>

000b65c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b65c4:	4b08      	ldr	r3, [pc, #32]	; (b65e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b65c6:	b510      	push	{r4, lr}
   b65c8:	2428      	movs	r4, #40	; 0x28
   b65ca:	4622      	mov	r2, r4
   b65cc:	4618      	mov	r0, r3
   b65ce:	2100      	movs	r1, #0
   b65d0:	f000 fe7a 	bl	b72c8 <memset>
   b65d4:	4b05      	ldr	r3, [pc, #20]	; (b65ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b65d6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b65d8:	f04f 32ff 	mov.w	r2, #4294967295
   b65dc:	6042      	str	r2, [r0, #4]
   b65de:	2204      	movs	r2, #4
   b65e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b65e2:	4a03      	ldr	r2, [pc, #12]	; (b65f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b65e4:	601a      	str	r2, [r3, #0]
   b65e6:	bd10      	pop	{r4, pc}
   b65e8:	2003e6f8 	.word	0x2003e6f8
   b65ec:	2003e6f0 	.word	0x2003e6f0
   b65f0:	000b78e0 	.word	0x000b78e0

000b65f4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b65f4:	4770      	bx	lr

000b65f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b65f6:	7441      	strb	r1, [r0, #17]
}
   b65f8:	4770      	bx	lr

000b65fa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b65fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b65fc:	7c00      	ldrb	r0, [r0, #16]
   b65fe:	f7fe fb31 	bl	b4c64 <hal_usart_available_data_for_write>
}
   b6602:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6606:	bd08      	pop	{r3, pc}

000b6608 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6608:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b660a:	7c00      	ldrb	r0, [r0, #16]
   b660c:	f7fe fb0a 	bl	b4c24 <hal_usart_available>
}
   b6610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6614:	bd08      	pop	{r3, pc}

000b6616 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6616:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6618:	7c00      	ldrb	r0, [r0, #16]
   b661a:	f7fe fb13 	bl	b4c44 <hal_usart_peek>
}
   b661e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6622:	bd08      	pop	{r3, pc}

000b6624 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6624:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6626:	7c00      	ldrb	r0, [r0, #16]
   b6628:	f7fe fb04 	bl	b4c34 <hal_usart_read>
}
   b662c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6630:	bd08      	pop	{r3, pc}

000b6632 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6632:	7c00      	ldrb	r0, [r0, #16]
   b6634:	f7fe bb0e 	b.w	b4c54 <hal_usart_flush>

000b6638 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6638:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b663a:	7c45      	ldrb	r5, [r0, #17]
{
   b663c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b663e:	b12d      	cbz	r5, b664c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6640:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6642:	b003      	add	sp, #12
   b6644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6648:	f7fe bae4 	b.w	b4c14 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b664c:	7c00      	ldrb	r0, [r0, #16]
   b664e:	9101      	str	r1, [sp, #4]
   b6650:	f7fe fb08 	bl	b4c64 <hal_usart_available_data_for_write>
   b6654:	2800      	cmp	r0, #0
   b6656:	9901      	ldr	r1, [sp, #4]
   b6658:	dcf2      	bgt.n	b6640 <_ZN11USARTSerial5writeEh+0x8>
}
   b665a:	4628      	mov	r0, r5
   b665c:	b003      	add	sp, #12
   b665e:	bd30      	pop	{r4, r5, pc}

000b6660 <_ZN11USARTSerialD0Ev>:
   b6660:	b510      	push	{r4, lr}
   b6662:	2114      	movs	r1, #20
   b6664:	4604      	mov	r4, r0
   b6666:	f7fd fd1a 	bl	b409e <_ZdlPvj>
   b666a:	4620      	mov	r0, r4
   b666c:	bd10      	pop	{r4, pc}
	...

000b6670 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6670:	b510      	push	{r4, lr}
   b6672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6676:	4604      	mov	r4, r0
   b6678:	4608      	mov	r0, r1
   b667a:	4611      	mov	r1, r2
   b667c:	2200      	movs	r2, #0
   b667e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6682:	4b04      	ldr	r3, [pc, #16]	; (b6694 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6684:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6686:	2301      	movs	r3, #1
  _serial = serial;
   b6688:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b668a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b668c:	f7fe fafa 	bl	b4c84 <hal_usart_init_ex>
}
   b6690:	4620      	mov	r0, r4
   b6692:	bd10      	pop	{r4, pc}
   b6694:	000b791c 	.word	0x000b791c

000b6698 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6698:	7c00      	ldrb	r0, [r0, #16]
   b669a:	2300      	movs	r3, #0
   b669c:	f7fe baea 	b.w	b4c74 <hal_usart_begin_config>

000b66a0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b66a0:	2200      	movs	r2, #0
   b66a2:	f7ff bff9 	b.w	b6698 <_ZN11USARTSerial5beginEmm>

000b66a6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b66a6:	7c00      	ldrb	r0, [r0, #16]
   b66a8:	f7fe baac 	b.w	b4c04 <hal_usart_end>

000b66ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b66ac:	4770      	bx	lr

000b66ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b66ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66b0:	4606      	mov	r6, r0
   b66b2:	4615      	mov	r5, r2
   b66b4:	460c      	mov	r4, r1
   b66b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b66b8:	42bc      	cmp	r4, r7
   b66ba:	d006      	beq.n	b66ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b66bc:	6833      	ldr	r3, [r6, #0]
   b66be:	f814 1b01 	ldrb.w	r1, [r4], #1
   b66c2:	689b      	ldr	r3, [r3, #8]
   b66c4:	4630      	mov	r0, r6
   b66c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b66c8:	e7f6      	b.n	b66b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b66ca:	4628      	mov	r0, r5
   b66cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b66ce:	7c00      	ldrb	r0, [r0, #16]
   b66d0:	2200      	movs	r2, #0
   b66d2:	f7fe baf7 	b.w	b4cc4 <hal_i2c_write>

000b66d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b66d6:	7c00      	ldrb	r0, [r0, #16]
   b66d8:	2100      	movs	r1, #0
   b66da:	f7fe bafb 	b.w	b4cd4 <hal_i2c_available>

000b66de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b66de:	7c00      	ldrb	r0, [r0, #16]
   b66e0:	2100      	movs	r1, #0
   b66e2:	f7fe baff 	b.w	b4ce4 <hal_i2c_read>

000b66e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b66e6:	7c00      	ldrb	r0, [r0, #16]
   b66e8:	2100      	movs	r1, #0
   b66ea:	f7fe bb03 	b.w	b4cf4 <hal_i2c_peek>

000b66ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b66ee:	7c00      	ldrb	r0, [r0, #16]
   b66f0:	2100      	movs	r1, #0
   b66f2:	f7fe bb07 	b.w	b4d04 <hal_i2c_flush>

000b66f6 <_ZN7TwoWireD0Ev>:
   b66f6:	b510      	push	{r4, lr}
   b66f8:	2114      	movs	r1, #20
   b66fa:	4604      	mov	r4, r0
   b66fc:	f7fd fccf 	bl	b409e <_ZdlPvj>
   b6700:	4620      	mov	r0, r4
   b6702:	bd10      	pop	{r4, pc}

000b6704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6704:	b510      	push	{r4, lr}
   b6706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b670a:	4604      	mov	r4, r0
   b670c:	4608      	mov	r0, r1
   b670e:	2100      	movs	r1, #0
   b6710:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6714:	4b03      	ldr	r3, [pc, #12]	; (b6724 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6716:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6718:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b671a:	4611      	mov	r1, r2
   b671c:	f7fe fafa 	bl	b4d14 <hal_i2c_init>
}
   b6720:	4620      	mov	r0, r4
   b6722:	bd10      	pop	{r4, pc}
   b6724:	000b794c 	.word	0x000b794c

000b6728 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6728:	2300      	movs	r3, #0
   b672a:	7c00      	ldrb	r0, [r0, #16]
   b672c:	461a      	mov	r2, r3
   b672e:	4619      	mov	r1, r3
   b6730:	f7fe bab0 	b.w	b4c94 <hal_i2c_begin>

000b6734 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6736:	2200      	movs	r2, #0
   b6738:	2314      	movs	r3, #20
   b673a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b673e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6742:	780b      	ldrb	r3, [r1, #0]
   b6744:	f88d 3008 	strb.w	r3, [sp, #8]
   b6748:	684b      	ldr	r3, [r1, #4]
   b674a:	9303      	str	r3, [sp, #12]
   b674c:	68cb      	ldr	r3, [r1, #12]
   b674e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6750:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6752:	7a0b      	ldrb	r3, [r1, #8]
   b6754:	9305      	str	r3, [sp, #20]
   b6756:	a901      	add	r1, sp, #4
   b6758:	f7fe faf4 	bl	b4d44 <hal_i2c_request_ex>
}
   b675c:	b007      	add	sp, #28
   b675e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6762 <_ZN7TwoWire11requestFromEhjh>:
{
   b6762:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6764:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6766:	f88d 1000 	strb.w	r1, [sp]
   b676a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b676e:	9103      	str	r1, [sp, #12]
   b6770:	bf18      	it	ne
   b6772:	2301      	movne	r3, #1
   b6774:	4669      	mov	r1, sp
    size_ = size;
   b6776:	9201      	str	r2, [sp, #4]
   b6778:	f88d 3008 	strb.w	r3, [sp, #8]
   b677c:	f7ff ffda 	bl	b6734 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6780:	b005      	add	sp, #20
   b6782:	f85d fb04 	ldr.w	pc, [sp], #4

000b6786 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6786:	7c00      	ldrb	r0, [r0, #16]
   b6788:	2200      	movs	r2, #0
   b678a:	f7fe ba8b 	b.w	b4ca4 <hal_i2c_begin_transmission>

000b678e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b678e:	b2c9      	uxtb	r1, r1
   b6790:	f7ff bff9 	b.w	b6786 <_ZN7TwoWire17beginTransmissionEh>

000b6794 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6794:	7c00      	ldrb	r0, [r0, #16]
   b6796:	2200      	movs	r2, #0
   b6798:	f7fe ba8c 	b.w	b4cb4 <hal_i2c_end_transmission>

000b679c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b679c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b679e:	2100      	movs	r1, #0
   b67a0:	7c00      	ldrb	r0, [r0, #16]
   b67a2:	f7fe fabf 	bl	b4d24 <hal_i2c_lock>
}
   b67a6:	fab0 f080 	clz	r0, r0
   b67aa:	0940      	lsrs	r0, r0, #5
   b67ac:	bd08      	pop	{r3, pc}

000b67ae <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b67ae:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b67b0:	2100      	movs	r1, #0
   b67b2:	7c00      	ldrb	r0, [r0, #16]
   b67b4:	f7fe fabe 	bl	b4d34 <hal_i2c_unlock>
}
   b67b8:	fab0 f080 	clz	r0, r0
   b67bc:	0940      	lsrs	r0, r0, #5
   b67be:	bd08      	pop	{r3, pc}

000b67c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b67c0:	2300      	movs	r3, #0
   b67c2:	6840      	ldr	r0, [r0, #4]
   b67c4:	461a      	mov	r2, r3
   b67c6:	f7fe bb59 	b.w	b4e7c <network_connect>

000b67ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b67ca:	6840      	ldr	r0, [r0, #4]
   b67cc:	2200      	movs	r2, #0
   b67ce:	2102      	movs	r1, #2
   b67d0:	f7fe bb64 	b.w	b4e9c <network_disconnect>

000b67d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b67d4:	2200      	movs	r2, #0
   b67d6:	6840      	ldr	r0, [r0, #4]
   b67d8:	4611      	mov	r1, r2
   b67da:	f7fe bb57 	b.w	b4e8c <network_connecting>

000b67de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67de:	2200      	movs	r2, #0
   b67e0:	6840      	ldr	r0, [r0, #4]
   b67e2:	4611      	mov	r1, r2
   b67e4:	f7fe bb62 	b.w	b4eac <network_ready>

000b67e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67e8:	2300      	movs	r3, #0
   b67ea:	6840      	ldr	r0, [r0, #4]
   b67ec:	461a      	mov	r2, r3
   b67ee:	4619      	mov	r1, r3
   b67f0:	f7fe bb64 	b.w	b4ebc <network_on>

000b67f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b67f4:	2300      	movs	r3, #0
   b67f6:	6840      	ldr	r0, [r0, #4]
   b67f8:	461a      	mov	r2, r3
   b67fa:	4619      	mov	r1, r3
   b67fc:	f7fe bb66 	b.w	b4ecc <network_off>

000b6800 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6800:	6840      	ldr	r0, [r0, #4]
   b6802:	2100      	movs	r1, #0
   b6804:	f7fe bb8a 	b.w	b4f1c <network_is_on>

000b6808 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6808:	6840      	ldr	r0, [r0, #4]
   b680a:	2100      	movs	r1, #0
   b680c:	f7fe bb8e 	b.w	b4f2c <network_is_off>

000b6810 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6810:	6840      	ldr	r0, [r0, #4]
   b6812:	2200      	movs	r2, #0
   b6814:	f081 0101 	eor.w	r1, r1, #1
   b6818:	f7fe bb60 	b.w	b4edc <network_listen>

000b681c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b681c:	6840      	ldr	r0, [r0, #4]
   b681e:	2200      	movs	r2, #0
   b6820:	f7fe bb6c 	b.w	b4efc <network_set_listen_timeout>

000b6824 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6824:	2200      	movs	r2, #0
   b6826:	6840      	ldr	r0, [r0, #4]
   b6828:	4611      	mov	r1, r2
   b682a:	f7fe bb6f 	b.w	b4f0c <network_get_listen_timeout>

000b682e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b682e:	2200      	movs	r2, #0
   b6830:	6840      	ldr	r0, [r0, #4]
   b6832:	4611      	mov	r1, r2
   b6834:	f7fe bb5a 	b.w	b4eec <network_listening>

000b6838 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b683c:	b095      	sub	sp, #84	; 0x54
   b683e:	4614      	mov	r4, r2
   b6840:	460d      	mov	r5, r1
   b6842:	4607      	mov	r7, r0
    IPAddress addr;
   b6844:	f7ff fdc2 	bl	b63cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6848:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b684a:	221c      	movs	r2, #28
   b684c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b684e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6850:	f000 fd3a 	bl	b72c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6854:	2340      	movs	r3, #64	; 0x40
   b6856:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6858:	4620      	mov	r0, r4
   b685a:	466b      	mov	r3, sp
   b685c:	aa0c      	add	r2, sp, #48	; 0x30
   b685e:	2100      	movs	r1, #0
   b6860:	f7fe f980 	bl	b4b64 <netdb_getaddrinfo>
    if (!r) {
   b6864:	4604      	mov	r4, r0
   b6866:	2800      	cmp	r0, #0
   b6868:	d14b      	bne.n	b6902 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b686a:	4602      	mov	r2, r0
   b686c:	2101      	movs	r1, #1
   b686e:	6868      	ldr	r0, [r5, #4]
   b6870:	f7fe fb1c 	bl	b4eac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6874:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6876:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6878:	4622      	mov	r2, r4
   b687a:	6868      	ldr	r0, [r5, #4]
   b687c:	f7fe fb16 	bl	b4eac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6880:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6882:	4681      	mov	r9, r0
        bool ok = false;
   b6884:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6886:	2e00      	cmp	r6, #0
   b6888:	d03b      	beq.n	b6902 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b688a:	2900      	cmp	r1, #0
   b688c:	d139      	bne.n	b6902 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b688e:	6873      	ldr	r3, [r6, #4]
   b6890:	2b02      	cmp	r3, #2
   b6892:	d003      	beq.n	b689c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6894:	2b0a      	cmp	r3, #10
   b6896:	d011      	beq.n	b68bc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6898:	69f6      	ldr	r6, [r6, #28]
   b689a:	e7f4      	b.n	b6886 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b689c:	f1b8 0f00 	cmp.w	r8, #0
   b68a0:	d0fa      	beq.n	b6898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b68a2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b68a4:	a806      	add	r0, sp, #24
   b68a6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b68a8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b68aa:	f7ff fdbd 	bl	b6428 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b68ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68b0:	1d3c      	adds	r4, r7, #4
   b68b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68b4:	682b      	ldr	r3, [r5, #0]
   b68b6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68b8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b68ba:	e7ed      	b.n	b6898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b68bc:	f1b9 0f00 	cmp.w	r9, #0
   b68c0:	d0ea      	beq.n	b6898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b68c2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b68c4:	2210      	movs	r2, #16
   b68c6:	a801      	add	r0, sp, #4
   b68c8:	f000 fcfe 	bl	b72c8 <memset>
                    a.v = 6;
   b68cc:	2306      	movs	r3, #6
   b68ce:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b68d2:	ad01      	add	r5, sp, #4
   b68d4:	f104 0308 	add.w	r3, r4, #8
   b68d8:	3418      	adds	r4, #24
   b68da:	6818      	ldr	r0, [r3, #0]
   b68dc:	6859      	ldr	r1, [r3, #4]
   b68de:	462a      	mov	r2, r5
   b68e0:	c203      	stmia	r2!, {r0, r1}
   b68e2:	3308      	adds	r3, #8
   b68e4:	42a3      	cmp	r3, r4
   b68e6:	4615      	mov	r5, r2
   b68e8:	d1f7      	bne.n	b68da <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b68ea:	a901      	add	r1, sp, #4
   b68ec:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b68ee:	ad07      	add	r5, sp, #28
   b68f0:	f7ff fd7a 	bl	b63e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68f6:	1d3c      	adds	r4, r7, #4
   b68f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68fa:	682b      	ldr	r3, [r5, #0]
   b68fc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68fe:	4649      	mov	r1, r9
   b6900:	e7ca      	b.n	b6898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6902:	9800      	ldr	r0, [sp, #0]
   b6904:	f7fe f926 	bl	b4b54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6908:	4638      	mov	r0, r7
   b690a:	b015      	add	sp, #84	; 0x54
   b690c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6910 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6910:	4b02      	ldr	r3, [pc, #8]	; (b691c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6912:	4a03      	ldr	r2, [pc, #12]	; (b6920 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6914:	601a      	str	r2, [r3, #0]
   b6916:	2200      	movs	r2, #0
   b6918:	605a      	str	r2, [r3, #4]

} // spark
   b691a:	4770      	bx	lr
   b691c:	2003e720 	.word	0x2003e720
   b6920:	000b7974 	.word	0x000b7974

000b6924 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6924:	f100 0310 	add.w	r3, r0, #16
   b6928:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b692a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b692e:	2901      	cmp	r1, #1
   b6930:	4618      	mov	r0, r3
   b6932:	d108      	bne.n	b6946 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6934:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6938:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b693c:	3a01      	subs	r2, #1
   b693e:	f103 0310 	add.w	r3, r3, #16
   b6942:	d1f2      	bne.n	b692a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6944:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6946:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6948:	bf04      	itt	eq
   b694a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b694e:	1852      	addeq	r2, r2, r1
   b6950:	e7f4      	b.n	b693c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6952 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6952:	b40e      	push	{r1, r2, r3}
   b6954:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6956:	b088      	sub	sp, #32
   b6958:	af00      	add	r7, sp, #0
   b695a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b695e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6960:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6964:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6966:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6968:	462b      	mov	r3, r5
   b696a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b696c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b696e:	f7fe fb15 	bl	b4f9c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6972:	280f      	cmp	r0, #15
   b6974:	687a      	ldr	r2, [r7, #4]
   b6976:	d91a      	bls.n	b69ae <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6978:	f100 0308 	add.w	r3, r0, #8
   b697c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6980:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6982:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6986:	1c41      	adds	r1, r0, #1
   b6988:	462b      	mov	r3, r5
   b698a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b698c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b698e:	f7fe fb05 	bl	b4f9c <vsnprintf>
        if (n > 0) {
   b6992:	1e02      	subs	r2, r0, #0
   b6994:	dd04      	ble.n	b69a0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6996:	6823      	ldr	r3, [r4, #0]
   b6998:	4669      	mov	r1, sp
   b699a:	689b      	ldr	r3, [r3, #8]
   b699c:	4620      	mov	r0, r4
   b699e:	4798      	blx	r3
   b69a0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b69a2:	3720      	adds	r7, #32
   b69a4:	46bd      	mov	sp, r7
   b69a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b69aa:	b003      	add	sp, #12
   b69ac:	4770      	bx	lr
    } else if (n > 0) {
   b69ae:	2800      	cmp	r0, #0
   b69b0:	d0f7      	beq.n	b69a2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b69b2:	6823      	ldr	r3, [r4, #0]
   b69b4:	4602      	mov	r2, r0
   b69b6:	689b      	ldr	r3, [r3, #8]
   b69b8:	f107 0110 	add.w	r1, r7, #16
   b69bc:	4620      	mov	r0, r4
   b69be:	4798      	blx	r3
}
   b69c0:	e7ef      	b.n	b69a2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b69c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b69c2:	b538      	push	{r3, r4, r5, lr}
   b69c4:	680b      	ldr	r3, [r1, #0]
   b69c6:	6003      	str	r3, [r0, #0]
   b69c8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b69ca:	6843      	ldr	r3, [r0, #4]
   b69cc:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b69ce:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b69d0:	d008      	beq.n	b69e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b69d2:	b115      	cbz	r5, b69da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b69d4:	686b      	ldr	r3, [r5, #4]
   b69d6:	3301      	adds	r3, #1
   b69d8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b69da:	6860      	ldr	r0, [r4, #4]
   b69dc:	b108      	cbz	r0, b69e2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b69de:	f7fe fbda 	bl	b5196 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b69e2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b69e4:	bd38      	pop	{r3, r4, r5, pc}

000b69e6 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b69e6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b69e8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b69ea:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b69ee:	689b      	ldr	r3, [r3, #8]
   b69f0:	2201      	movs	r2, #1
   b69f2:	f10d 0107 	add.w	r1, sp, #7
   b69f6:	4798      	blx	r3
}
   b69f8:	b003      	add	sp, #12
   b69fa:	f85d fb04 	ldr.w	pc, [sp], #4

000b69fe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b69fe:	460b      	mov	r3, r1
   b6a00:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6a02:	2200      	movs	r2, #0
   b6a04:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6a06:	e9c0 2200 	strd	r2, r2, [r0]
   b6a0a:	4604      	mov	r4, r0
        t_ = t;
   b6a0c:	6083      	str	r3, [r0, #8]
    if (t) {
   b6a0e:	b90b      	cbnz	r3, b6a14 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6a10:	4620      	mov	r0, r4
   b6a12:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6a14:	f7ff ffd5 	bl	b69c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6a18:	e7fa      	b.n	b6a10 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6a1a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6a1a:	6883      	ldr	r3, [r0, #8]
   b6a1c:	b1eb      	cbz	r3, b6a5a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6a1e:	781a      	ldrb	r2, [r3, #0]
   b6a20:	2a03      	cmp	r2, #3
   b6a22:	d81a      	bhi.n	b6a5a <_ZNK5spark9JSONValue4typeEv+0x40>
   b6a24:	e8df f002 	tbb	[pc, r2]
   b6a28:	1b021704 	.word	0x1b021704
   b6a2c:	2005      	movs	r0, #5
   b6a2e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6a30:	6802      	ldr	r2, [r0, #0]
   b6a32:	685b      	ldr	r3, [r3, #4]
   b6a34:	6852      	ldr	r2, [r2, #4]
   b6a36:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6a38:	282d      	cmp	r0, #45	; 0x2d
   b6a3a:	d012      	beq.n	b6a62 <_ZNK5spark9JSONValue4typeEv+0x48>
   b6a3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6a40:	2b09      	cmp	r3, #9
   b6a42:	d90e      	bls.n	b6a62 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6a44:	2874      	cmp	r0, #116	; 0x74
   b6a46:	d00e      	beq.n	b6a66 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6a48:	2866      	cmp	r0, #102	; 0x66
   b6a4a:	d00c      	beq.n	b6a66 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6a4c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6a50:	4258      	negs	r0, r3
   b6a52:	4158      	adcs	r0, r3
   b6a54:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6a56:	2006      	movs	r0, #6
   b6a58:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6a5a:	2000      	movs	r0, #0
   b6a5c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6a5e:	2004      	movs	r0, #4
   b6a60:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6a62:	2003      	movs	r0, #3
   b6a64:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6a66:	2002      	movs	r0, #2
}
   b6a68:	4770      	bx	lr

000b6a6a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6a6a:	b510      	push	{r4, lr}
   b6a6c:	4604      	mov	r4, r0
    switch (type()) {
   b6a6e:	f7ff ffd4 	bl	b6a1a <_ZNK5spark9JSONValue4typeEv>
   b6a72:	2802      	cmp	r0, #2
   b6a74:	d00e      	beq.n	b6a94 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6a76:	1ec3      	subs	r3, r0, #3
   b6a78:	b2db      	uxtb	r3, r3
   b6a7a:	2b01      	cmp	r3, #1
   b6a7c:	d814      	bhi.n	b6aa8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6a7e:	6822      	ldr	r2, [r4, #0]
   b6a80:	68a3      	ldr	r3, [r4, #8]
   b6a82:	6850      	ldr	r0, [r2, #4]
   b6a84:	685b      	ldr	r3, [r3, #4]
}
   b6a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6a8a:	220a      	movs	r2, #10
   b6a8c:	2100      	movs	r1, #0
   b6a8e:	4418      	add	r0, r3
   b6a90:	f000 bd2c 	b.w	b74ec <strtol>
        const char* const s = d_->json + t_->start;
   b6a94:	6822      	ldr	r2, [r4, #0]
   b6a96:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6a98:	6852      	ldr	r2, [r2, #4]
   b6a9a:	685b      	ldr	r3, [r3, #4]
   b6a9c:	5cd0      	ldrb	r0, [r2, r3]
   b6a9e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6aa2:	4258      	negs	r0, r3
   b6aa4:	4158      	adcs	r0, r3
}
   b6aa6:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6aa8:	2000      	movs	r0, #0
   b6aaa:	e7fc      	b.n	b6aa6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6aac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6aac:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6aae:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6ab0:	e9c0 3300 	strd	r3, r3, [r0]
   b6ab4:	4604      	mov	r4, r0
        n_(0) {
   b6ab6:	480e      	ldr	r0, [pc, #56]	; (b6af0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6ab8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6abc:	b1a9      	cbz	r1, b6aea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6abe:	780b      	ldrb	r3, [r1, #0]
   b6ac0:	2b03      	cmp	r3, #3
   b6ac2:	d006      	beq.n	b6ad2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6ac4:	b98b      	cbnz	r3, b6aea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6ac6:	6813      	ldr	r3, [r2, #0]
   b6ac8:	6858      	ldr	r0, [r3, #4]
   b6aca:	684b      	ldr	r3, [r1, #4]
   b6acc:	5cc3      	ldrb	r3, [r0, r3]
   b6ace:	2b6e      	cmp	r3, #110	; 0x6e
   b6ad0:	d007      	beq.n	b6ae2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6ad2:	6813      	ldr	r3, [r2, #0]
   b6ad4:	684d      	ldr	r5, [r1, #4]
   b6ad6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6ad8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6ada:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6adc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6ade:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6ae0:	60e3      	str	r3, [r4, #12]
   b6ae2:	4611      	mov	r1, r2
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	f7ff ff6c 	bl	b69c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6aea:	4620      	mov	r0, r4
   b6aec:	bd38      	pop	{r3, r4, r5, pc}
   b6aee:	bf00      	nop
   b6af0:	000b77e5 	.word	0x000b77e5

000b6af4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6af4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6af6:	2500      	movs	r5, #0
   b6af8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6afa:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6afe:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6b02:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6b06:	4604      	mov	r4, r0
   b6b08:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b6b0a:	b14b      	cbz	r3, b6b20 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b6b0c:	781a      	ldrb	r2, [r3, #0]
   b6b0e:	2a01      	cmp	r2, #1
   b6b10:	d106      	bne.n	b6b20 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b6b12:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b6b16:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b6b18:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b6b1a:	6143      	str	r3, [r0, #20]
   b6b1c:	f7ff ff51 	bl	b69c2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6b20:	4620      	mov	r0, r4
   b6b22:	bd38      	pop	{r3, r4, r5, pc}

000b6b24 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b6b24:	b510      	push	{r4, lr}
    if (!n_) {
   b6b26:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b6b28:	4604      	mov	r4, r0
    if (!n_) {
   b6b2a:	b163      	cbz	r3, b6b46 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b6b2c:	6880      	ldr	r0, [r0, #8]
   b6b2e:	60e0      	str	r0, [r4, #12]
    --n_;
   b6b30:	3b01      	subs	r3, #1
    ++t_;
   b6b32:	3010      	adds	r0, #16
   b6b34:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6b36:	6120      	str	r0, [r4, #16]
    --n_;
   b6b38:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6b3a:	b113      	cbz	r3, b6b42 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6b3c:	f7ff fef2 	bl	b6924 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b6b40:	60a0      	str	r0, [r4, #8]
    return true;
   b6b42:	2001      	movs	r0, #1
   b6b44:	e000      	b.n	b6b48 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6b46:	4618      	mov	r0, r3
}
   b6b48:	bd10      	pop	{r4, pc}

000b6b4a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6b4a:	b510      	push	{r4, lr}
    write('}');
   b6b4c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b6b4e:	4604      	mov	r4, r0
    write('}');
   b6b50:	f7ff ff49 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b6b54:	2301      	movs	r3, #1
   b6b56:	7123      	strb	r3, [r4, #4]
}
   b6b58:	4620      	mov	r0, r4
   b6b5a:	bd10      	pop	{r4, pc}

000b6b5c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b6b5c:	b508      	push	{r3, lr}
    switch (state_) {
   b6b5e:	7903      	ldrb	r3, [r0, #4]
   b6b60:	2b01      	cmp	r3, #1
   b6b62:	d002      	beq.n	b6b6a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b6b64:	2b02      	cmp	r3, #2
   b6b66:	d004      	beq.n	b6b72 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b6b68:	bd08      	pop	{r3, pc}
        write(',');
   b6b6a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b6b6c:	f7ff ff3b 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
}
   b6b70:	e7fa      	b.n	b6b68 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b6b72:	213a      	movs	r1, #58	; 0x3a
   b6b74:	e7fa      	b.n	b6b6c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b6b76 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b6b76:	b510      	push	{r4, lr}
   b6b78:	4604      	mov	r4, r0
    writeSeparator();
   b6b7a:	f7ff ffef 	bl	b6b5c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b6b7e:	4620      	mov	r0, r4
   b6b80:	217b      	movs	r1, #123	; 0x7b
   b6b82:	f7ff ff30 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b6b86:	2300      	movs	r3, #0
   b6b88:	7123      	strb	r3, [r4, #4]
}
   b6b8a:	4620      	mov	r0, r4
   b6b8c:	bd10      	pop	{r4, pc}
	...

000b6b90 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b6b90:	b513      	push	{r0, r1, r4, lr}
   b6b92:	4604      	mov	r4, r0
   b6b94:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6b96:	f7ff ffe1 	bl	b6b5c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b6b9a:	6823      	ldr	r3, [r4, #0]
   b6b9c:	9a01      	ldr	r2, [sp, #4]
   b6b9e:	68db      	ldr	r3, [r3, #12]
   b6ba0:	4903      	ldr	r1, [pc, #12]	; (b6bb0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	4798      	blx	r3
    state_ = NEXT;
   b6ba6:	2301      	movs	r3, #1
}
   b6ba8:	4620      	mov	r0, r4
    state_ = NEXT;
   b6baa:	7123      	strb	r3, [r4, #4]
}
   b6bac:	b002      	add	sp, #8
   b6bae:	bd10      	pop	{r4, pc}
   b6bb0:	000b77bf 	.word	0x000b77bf

000b6bb4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b6bb4:	b513      	push	{r0, r1, r4, lr}
   b6bb6:	4604      	mov	r4, r0
   b6bb8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b6bba:	f7ff ffcf 	bl	b6b5c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b6bbe:	6823      	ldr	r3, [r4, #0]
   b6bc0:	9a01      	ldr	r2, [sp, #4]
   b6bc2:	68db      	ldr	r3, [r3, #12]
   b6bc4:	4903      	ldr	r1, [pc, #12]	; (b6bd4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b6bc6:	4620      	mov	r0, r4
   b6bc8:	4798      	blx	r3
    state_ = NEXT;
   b6bca:	2301      	movs	r3, #1
}
   b6bcc:	4620      	mov	r0, r4
    state_ = NEXT;
   b6bce:	7123      	strb	r3, [r4, #4]
}
   b6bd0:	b002      	add	sp, #8
   b6bd2:	bd10      	pop	{r4, pc}
   b6bd4:	000b79a8 	.word	0x000b79a8

000b6bd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6bdc:	460d      	mov	r5, r1
    write('"');
   b6bde:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b6be0:	4690      	mov	r8, r2
   b6be2:	4604      	mov	r4, r0
    write('"');
   b6be4:	f7ff feff 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b6be8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b6c90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b6bec:	44a8      	add	r8, r5
    const char *s = str;
   b6bee:	462f      	mov	r7, r5
    while (s != end) {
   b6bf0:	4547      	cmp	r7, r8
   b6bf2:	46ba      	mov	sl, r7
   b6bf4:	d03d      	beq.n	b6c72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b6bf6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b6bfa:	2e22      	cmp	r6, #34	; 0x22
   b6bfc:	d006      	beq.n	b6c0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6bfe:	2e5c      	cmp	r6, #92	; 0x5c
   b6c00:	d004      	beq.n	b6c0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b6c02:	4630      	mov	r0, r6
   b6c04:	f000 fb30 	bl	b7268 <isprint>
   b6c08:	2800      	cmp	r0, #0
   b6c0a:	d1f1      	bne.n	b6bf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b6c0c:	6823      	ldr	r3, [r4, #0]
   b6c0e:	ebaa 0205 	sub.w	r2, sl, r5
   b6c12:	689b      	ldr	r3, [r3, #8]
   b6c14:	4629      	mov	r1, r5
   b6c16:	4620      	mov	r0, r4
   b6c18:	4798      	blx	r3
            write('\\');
   b6c1a:	215c      	movs	r1, #92	; 0x5c
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	f7ff fee2 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b6c22:	2e0d      	cmp	r6, #13
   b6c24:	d80a      	bhi.n	b6c3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b6c26:	2e07      	cmp	r6, #7
   b6c28:	d91c      	bls.n	b6c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6c2a:	f1a6 0308 	sub.w	r3, r6, #8
   b6c2e:	2b05      	cmp	r3, #5
   b6c30:	d818      	bhi.n	b6c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b6c32:	e8df f003 	tbb	[pc, r3]
   b6c36:	0f0d      	.short	0x0f0d
   b6c38:	15131711 	.word	0x15131711
   b6c3c:	2e22      	cmp	r6, #34	; 0x22
   b6c3e:	d001      	beq.n	b6c44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b6c40:	2e5c      	cmp	r6, #92	; 0x5c
   b6c42:	d10f      	bne.n	b6c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b6c44:	4631      	mov	r1, r6
                write('b');
   b6c46:	4620      	mov	r0, r4
   b6c48:	f7ff fecd 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b6c4c:	463d      	mov	r5, r7
    while (s != end) {
   b6c4e:	e7cf      	b.n	b6bf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b6c50:	2162      	movs	r1, #98	; 0x62
   b6c52:	e7f8      	b.n	b6c46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b6c54:	2174      	movs	r1, #116	; 0x74
   b6c56:	e7f6      	b.n	b6c46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b6c58:	216e      	movs	r1, #110	; 0x6e
   b6c5a:	e7f4      	b.n	b6c46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b6c5c:	2166      	movs	r1, #102	; 0x66
   b6c5e:	e7f2      	b.n	b6c46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b6c60:	2172      	movs	r1, #114	; 0x72
   b6c62:	e7f0      	b.n	b6c46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b6c64:	6823      	ldr	r3, [r4, #0]
   b6c66:	4632      	mov	r2, r6
   b6c68:	68db      	ldr	r3, [r3, #12]
   b6c6a:	4649      	mov	r1, r9
   b6c6c:	4620      	mov	r0, r4
   b6c6e:	4798      	blx	r3
                break;
   b6c70:	e7ec      	b.n	b6c4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b6c72:	42bd      	cmp	r5, r7
   b6c74:	d005      	beq.n	b6c82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b6c76:	6823      	ldr	r3, [r4, #0]
   b6c78:	1b7a      	subs	r2, r7, r5
   b6c7a:	689b      	ldr	r3, [r3, #8]
   b6c7c:	4629      	mov	r1, r5
   b6c7e:	4620      	mov	r0, r4
   b6c80:	4798      	blx	r3
    }
    write('"');
   b6c82:	2122      	movs	r1, #34	; 0x22
   b6c84:	4620      	mov	r0, r4
   b6c86:	f7ff feae 	bl	b69e6 <_ZN5spark10JSONWriter5writeEc>
}
   b6c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c8e:	bf00      	nop
   b6c90:	000b79ab 	.word	0x000b79ab

000b6c94 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b6c94:	b513      	push	{r0, r1, r4, lr}
   b6c96:	4604      	mov	r4, r0
   b6c98:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6c9c:	f7ff ff5e 	bl	b6b5c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b6ca0:	4620      	mov	r0, r4
   b6ca2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6ca6:	f7ff ff97 	bl	b6bd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b6caa:	2302      	movs	r3, #2
}
   b6cac:	4620      	mov	r0, r4
    state_ = VALUE;
   b6cae:	7123      	strb	r3, [r4, #4]
}
   b6cb0:	b002      	add	sp, #8
   b6cb2:	bd10      	pop	{r4, pc}

000b6cb4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b6cb4:	b513      	push	{r0, r1, r4, lr}
   b6cb6:	4604      	mov	r4, r0
   b6cb8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b6cbc:	f7ff ff4e 	bl	b6b5c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b6cc0:	4620      	mov	r0, r4
   b6cc2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b6cc6:	f7ff ff87 	bl	b6bd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b6cca:	2301      	movs	r3, #1
}
   b6ccc:	4620      	mov	r0, r4
    state_ = NEXT;
   b6cce:	7123      	strb	r3, [r4, #4]
}
   b6cd0:	b002      	add	sp, #8
   b6cd2:	bd10      	pop	{r4, pc}

000b6cd4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cd4:	4770      	bx	lr
	...

000b6cd8 <_Z20acquireSerial1Bufferv>:
{
   b6cd8:	b538      	push	{r3, r4, r5, lr}
   b6cda:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6cdc:	2514      	movs	r5, #20
   b6cde:	462a      	mov	r2, r5
   b6ce0:	2100      	movs	r1, #0
   b6ce2:	f000 faf1 	bl	b72c8 <memset>
   b6ce6:	8025      	strh	r5, [r4, #0]
   b6ce8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cea:	4907      	ldr	r1, [pc, #28]	; (b6d08 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6cec:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cee:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6cf0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cf2:	f000 f86d 	bl	b6dd0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cf6:	4904      	ldr	r1, [pc, #16]	; (b6d08 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6cf8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cfa:	4628      	mov	r0, r5
   b6cfc:	f000 f868 	bl	b6dd0 <_ZnajRKSt9nothrow_t>
    };
   b6d00:	60e0      	str	r0, [r4, #12]
}
   b6d02:	4620      	mov	r0, r4
   b6d04:	bd38      	pop	{r3, r4, r5, pc}
   b6d06:	bf00      	nop
   b6d08:	000b79b1 	.word	0x000b79b1

000b6d0c <_Z22__fetch_global_Serial1v>:
{
   b6d0c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d0e:	4d0e      	ldr	r5, [pc, #56]	; (b6d48 <_Z22__fetch_global_Serial1v+0x3c>)
   b6d10:	7829      	ldrb	r1, [r5, #0]
   b6d12:	f3bf 8f5b 	dmb	ish
   b6d16:	f011 0401 	ands.w	r4, r1, #1
{
   b6d1a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d1c:	d111      	bne.n	b6d42 <_Z22__fetch_global_Serial1v+0x36>
   b6d1e:	4628      	mov	r0, r5
   b6d20:	f7fd f9cc 	bl	b40bc <__cxa_guard_acquire>
   b6d24:	b168      	cbz	r0, b6d42 <_Z22__fetch_global_Serial1v+0x36>
   b6d26:	a801      	add	r0, sp, #4
   b6d28:	f7ff ffd6 	bl	b6cd8 <_Z20acquireSerial1Bufferv>
   b6d2c:	aa01      	add	r2, sp, #4
   b6d2e:	4621      	mov	r1, r4
   b6d30:	4806      	ldr	r0, [pc, #24]	; (b6d4c <_Z22__fetch_global_Serial1v+0x40>)
   b6d32:	f7ff fc9d 	bl	b6670 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6d36:	4628      	mov	r0, r5
   b6d38:	f7fd f9c5 	bl	b40c6 <__cxa_guard_release>
   b6d3c:	4804      	ldr	r0, [pc, #16]	; (b6d50 <_Z22__fetch_global_Serial1v+0x44>)
   b6d3e:	f000 fa8d 	bl	b725c <atexit>
    return serial1;
}
   b6d42:	4802      	ldr	r0, [pc, #8]	; (b6d4c <_Z22__fetch_global_Serial1v+0x40>)
   b6d44:	b007      	add	sp, #28
   b6d46:	bd30      	pop	{r4, r5, pc}
   b6d48:	2003e728 	.word	0x2003e728
   b6d4c:	2003e72c 	.word	0x2003e72c
   b6d50:	000b6cd5 	.word	0x000b6cd5

000b6d54 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d54:	4770      	bx	lr
	...

000b6d58 <_Z17acquireWireBufferv>:
{
   b6d58:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6d5a:	2520      	movs	r5, #32
   b6d5c:	2314      	movs	r3, #20
{
   b6d5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6d60:	6003      	str	r3, [r0, #0]
   b6d62:	6085      	str	r5, [r0, #8]
   b6d64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6d66:	4906      	ldr	r1, [pc, #24]	; (b6d80 <_Z17acquireWireBufferv+0x28>)
   b6d68:	4628      	mov	r0, r5
   b6d6a:	f000 f831 	bl	b6dd0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6d6e:	4904      	ldr	r1, [pc, #16]	; (b6d80 <_Z17acquireWireBufferv+0x28>)
	};
   b6d70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6d72:	4628      	mov	r0, r5
   b6d74:	f000 f82c 	bl	b6dd0 <_ZnajRKSt9nothrow_t>
	};
   b6d78:	60e0      	str	r0, [r4, #12]
}
   b6d7a:	4620      	mov	r0, r4
   b6d7c:	bd38      	pop	{r3, r4, r5, pc}
   b6d7e:	bf00      	nop
   b6d80:	000b79b1 	.word	0x000b79b1

000b6d84 <_Z19__fetch_global_Wirev>:
{
   b6d84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d86:	4d0e      	ldr	r5, [pc, #56]	; (b6dc0 <_Z19__fetch_global_Wirev+0x3c>)
   b6d88:	7829      	ldrb	r1, [r5, #0]
   b6d8a:	f3bf 8f5b 	dmb	ish
   b6d8e:	f011 0401 	ands.w	r4, r1, #1
{
   b6d92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d94:	d111      	bne.n	b6dba <_Z19__fetch_global_Wirev+0x36>
   b6d96:	4628      	mov	r0, r5
   b6d98:	f7fd f990 	bl	b40bc <__cxa_guard_acquire>
   b6d9c:	b168      	cbz	r0, b6dba <_Z19__fetch_global_Wirev+0x36>
   b6d9e:	a801      	add	r0, sp, #4
   b6da0:	f7ff ffda 	bl	b6d58 <_Z17acquireWireBufferv>
   b6da4:	aa01      	add	r2, sp, #4
   b6da6:	4621      	mov	r1, r4
   b6da8:	4806      	ldr	r0, [pc, #24]	; (b6dc4 <_Z19__fetch_global_Wirev+0x40>)
   b6daa:	f7ff fcab 	bl	b6704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6dae:	4628      	mov	r0, r5
   b6db0:	f7fd f989 	bl	b40c6 <__cxa_guard_release>
   b6db4:	4804      	ldr	r0, [pc, #16]	; (b6dc8 <_Z19__fetch_global_Wirev+0x44>)
   b6db6:	f000 fa51 	bl	b725c <atexit>
	return wire;
}
   b6dba:	4802      	ldr	r0, [pc, #8]	; (b6dc4 <_Z19__fetch_global_Wirev+0x40>)
   b6dbc:	b007      	add	sp, #28
   b6dbe:	bd30      	pop	{r4, r5, pc}
   b6dc0:	2003e744 	.word	0x2003e744
   b6dc4:	2003e748 	.word	0x2003e748
   b6dc8:	000b6d55 	.word	0x000b6d55

000b6dcc <_ZnwjRKSt9nothrow_t>:
   b6dcc:	f7fd b963 	b.w	b4096 <_Znwj>

000b6dd0 <_ZnajRKSt9nothrow_t>:
   b6dd0:	f7fd b963 	b.w	b409a <_Znaj>

000b6dd4 <__aeabi_drsub>:
   b6dd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6dd8:	e002      	b.n	b6de0 <__adddf3>
   b6dda:	bf00      	nop

000b6ddc <__aeabi_dsub>:
   b6ddc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6de0 <__adddf3>:
   b6de0:	b530      	push	{r4, r5, lr}
   b6de2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6de6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6dea:	ea94 0f05 	teq	r4, r5
   b6dee:	bf08      	it	eq
   b6df0:	ea90 0f02 	teqeq	r0, r2
   b6df4:	bf1f      	itttt	ne
   b6df6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6dfa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6dfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6e02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6e06:	f000 80e2 	beq.w	b6fce <__adddf3+0x1ee>
   b6e0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6e0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6e12:	bfb8      	it	lt
   b6e14:	426d      	neglt	r5, r5
   b6e16:	dd0c      	ble.n	b6e32 <__adddf3+0x52>
   b6e18:	442c      	add	r4, r5
   b6e1a:	ea80 0202 	eor.w	r2, r0, r2
   b6e1e:	ea81 0303 	eor.w	r3, r1, r3
   b6e22:	ea82 0000 	eor.w	r0, r2, r0
   b6e26:	ea83 0101 	eor.w	r1, r3, r1
   b6e2a:	ea80 0202 	eor.w	r2, r0, r2
   b6e2e:	ea81 0303 	eor.w	r3, r1, r3
   b6e32:	2d36      	cmp	r5, #54	; 0x36
   b6e34:	bf88      	it	hi
   b6e36:	bd30      	pophi	{r4, r5, pc}
   b6e38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6e3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6e40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6e44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6e48:	d002      	beq.n	b6e50 <__adddf3+0x70>
   b6e4a:	4240      	negs	r0, r0
   b6e4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6e50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6e54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6e58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6e5c:	d002      	beq.n	b6e64 <__adddf3+0x84>
   b6e5e:	4252      	negs	r2, r2
   b6e60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6e64:	ea94 0f05 	teq	r4, r5
   b6e68:	f000 80a7 	beq.w	b6fba <__adddf3+0x1da>
   b6e6c:	f1a4 0401 	sub.w	r4, r4, #1
   b6e70:	f1d5 0e20 	rsbs	lr, r5, #32
   b6e74:	db0d      	blt.n	b6e92 <__adddf3+0xb2>
   b6e76:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6e7a:	fa22 f205 	lsr.w	r2, r2, r5
   b6e7e:	1880      	adds	r0, r0, r2
   b6e80:	f141 0100 	adc.w	r1, r1, #0
   b6e84:	fa03 f20e 	lsl.w	r2, r3, lr
   b6e88:	1880      	adds	r0, r0, r2
   b6e8a:	fa43 f305 	asr.w	r3, r3, r5
   b6e8e:	4159      	adcs	r1, r3
   b6e90:	e00e      	b.n	b6eb0 <__adddf3+0xd0>
   b6e92:	f1a5 0520 	sub.w	r5, r5, #32
   b6e96:	f10e 0e20 	add.w	lr, lr, #32
   b6e9a:	2a01      	cmp	r2, #1
   b6e9c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6ea0:	bf28      	it	cs
   b6ea2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6ea6:	fa43 f305 	asr.w	r3, r3, r5
   b6eaa:	18c0      	adds	r0, r0, r3
   b6eac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6eb4:	d507      	bpl.n	b6ec6 <__adddf3+0xe6>
   b6eb6:	f04f 0e00 	mov.w	lr, #0
   b6eba:	f1dc 0c00 	rsbs	ip, ip, #0
   b6ebe:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6ec2:	eb6e 0101 	sbc.w	r1, lr, r1
   b6ec6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6eca:	d31b      	bcc.n	b6f04 <__adddf3+0x124>
   b6ecc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6ed0:	d30c      	bcc.n	b6eec <__adddf3+0x10c>
   b6ed2:	0849      	lsrs	r1, r1, #1
   b6ed4:	ea5f 0030 	movs.w	r0, r0, rrx
   b6ed8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6edc:	f104 0401 	add.w	r4, r4, #1
   b6ee0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6ee4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6ee8:	f080 809a 	bcs.w	b7020 <__adddf3+0x240>
   b6eec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6ef0:	bf08      	it	eq
   b6ef2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6ef6:	f150 0000 	adcs.w	r0, r0, #0
   b6efa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6efe:	ea41 0105 	orr.w	r1, r1, r5
   b6f02:	bd30      	pop	{r4, r5, pc}
   b6f04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6f08:	4140      	adcs	r0, r0
   b6f0a:	eb41 0101 	adc.w	r1, r1, r1
   b6f0e:	3c01      	subs	r4, #1
   b6f10:	bf28      	it	cs
   b6f12:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6f16:	d2e9      	bcs.n	b6eec <__adddf3+0x10c>
   b6f18:	f091 0f00 	teq	r1, #0
   b6f1c:	bf04      	itt	eq
   b6f1e:	4601      	moveq	r1, r0
   b6f20:	2000      	moveq	r0, #0
   b6f22:	fab1 f381 	clz	r3, r1
   b6f26:	bf08      	it	eq
   b6f28:	3320      	addeq	r3, #32
   b6f2a:	f1a3 030b 	sub.w	r3, r3, #11
   b6f2e:	f1b3 0220 	subs.w	r2, r3, #32
   b6f32:	da0c      	bge.n	b6f4e <__adddf3+0x16e>
   b6f34:	320c      	adds	r2, #12
   b6f36:	dd08      	ble.n	b6f4a <__adddf3+0x16a>
   b6f38:	f102 0c14 	add.w	ip, r2, #20
   b6f3c:	f1c2 020c 	rsb	r2, r2, #12
   b6f40:	fa01 f00c 	lsl.w	r0, r1, ip
   b6f44:	fa21 f102 	lsr.w	r1, r1, r2
   b6f48:	e00c      	b.n	b6f64 <__adddf3+0x184>
   b6f4a:	f102 0214 	add.w	r2, r2, #20
   b6f4e:	bfd8      	it	le
   b6f50:	f1c2 0c20 	rsble	ip, r2, #32
   b6f54:	fa01 f102 	lsl.w	r1, r1, r2
   b6f58:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6f5c:	bfdc      	itt	le
   b6f5e:	ea41 010c 	orrle.w	r1, r1, ip
   b6f62:	4090      	lslle	r0, r2
   b6f64:	1ae4      	subs	r4, r4, r3
   b6f66:	bfa2      	ittt	ge
   b6f68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6f6c:	4329      	orrge	r1, r5
   b6f6e:	bd30      	popge	{r4, r5, pc}
   b6f70:	ea6f 0404 	mvn.w	r4, r4
   b6f74:	3c1f      	subs	r4, #31
   b6f76:	da1c      	bge.n	b6fb2 <__adddf3+0x1d2>
   b6f78:	340c      	adds	r4, #12
   b6f7a:	dc0e      	bgt.n	b6f9a <__adddf3+0x1ba>
   b6f7c:	f104 0414 	add.w	r4, r4, #20
   b6f80:	f1c4 0220 	rsb	r2, r4, #32
   b6f84:	fa20 f004 	lsr.w	r0, r0, r4
   b6f88:	fa01 f302 	lsl.w	r3, r1, r2
   b6f8c:	ea40 0003 	orr.w	r0, r0, r3
   b6f90:	fa21 f304 	lsr.w	r3, r1, r4
   b6f94:	ea45 0103 	orr.w	r1, r5, r3
   b6f98:	bd30      	pop	{r4, r5, pc}
   b6f9a:	f1c4 040c 	rsb	r4, r4, #12
   b6f9e:	f1c4 0220 	rsb	r2, r4, #32
   b6fa2:	fa20 f002 	lsr.w	r0, r0, r2
   b6fa6:	fa01 f304 	lsl.w	r3, r1, r4
   b6faa:	ea40 0003 	orr.w	r0, r0, r3
   b6fae:	4629      	mov	r1, r5
   b6fb0:	bd30      	pop	{r4, r5, pc}
   b6fb2:	fa21 f004 	lsr.w	r0, r1, r4
   b6fb6:	4629      	mov	r1, r5
   b6fb8:	bd30      	pop	{r4, r5, pc}
   b6fba:	f094 0f00 	teq	r4, #0
   b6fbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6fc2:	bf06      	itte	eq
   b6fc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6fc8:	3401      	addeq	r4, #1
   b6fca:	3d01      	subne	r5, #1
   b6fcc:	e74e      	b.n	b6e6c <__adddf3+0x8c>
   b6fce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6fd2:	bf18      	it	ne
   b6fd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6fd8:	d029      	beq.n	b702e <__adddf3+0x24e>
   b6fda:	ea94 0f05 	teq	r4, r5
   b6fde:	bf08      	it	eq
   b6fe0:	ea90 0f02 	teqeq	r0, r2
   b6fe4:	d005      	beq.n	b6ff2 <__adddf3+0x212>
   b6fe6:	ea54 0c00 	orrs.w	ip, r4, r0
   b6fea:	bf04      	itt	eq
   b6fec:	4619      	moveq	r1, r3
   b6fee:	4610      	moveq	r0, r2
   b6ff0:	bd30      	pop	{r4, r5, pc}
   b6ff2:	ea91 0f03 	teq	r1, r3
   b6ff6:	bf1e      	ittt	ne
   b6ff8:	2100      	movne	r1, #0
   b6ffa:	2000      	movne	r0, #0
   b6ffc:	bd30      	popne	{r4, r5, pc}
   b6ffe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7002:	d105      	bne.n	b7010 <__adddf3+0x230>
   b7004:	0040      	lsls	r0, r0, #1
   b7006:	4149      	adcs	r1, r1
   b7008:	bf28      	it	cs
   b700a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b700e:	bd30      	pop	{r4, r5, pc}
   b7010:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7014:	bf3c      	itt	cc
   b7016:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b701a:	bd30      	popcc	{r4, r5, pc}
   b701c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7020:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7024:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7028:	f04f 0000 	mov.w	r0, #0
   b702c:	bd30      	pop	{r4, r5, pc}
   b702e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7032:	bf1a      	itte	ne
   b7034:	4619      	movne	r1, r3
   b7036:	4610      	movne	r0, r2
   b7038:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b703c:	bf1c      	itt	ne
   b703e:	460b      	movne	r3, r1
   b7040:	4602      	movne	r2, r0
   b7042:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7046:	bf06      	itte	eq
   b7048:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b704c:	ea91 0f03 	teqeq	r1, r3
   b7050:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7054:	bd30      	pop	{r4, r5, pc}
   b7056:	bf00      	nop

000b7058 <__aeabi_ui2d>:
   b7058:	f090 0f00 	teq	r0, #0
   b705c:	bf04      	itt	eq
   b705e:	2100      	moveq	r1, #0
   b7060:	4770      	bxeq	lr
   b7062:	b530      	push	{r4, r5, lr}
   b7064:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7068:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b706c:	f04f 0500 	mov.w	r5, #0
   b7070:	f04f 0100 	mov.w	r1, #0
   b7074:	e750      	b.n	b6f18 <__adddf3+0x138>
   b7076:	bf00      	nop

000b7078 <__aeabi_i2d>:
   b7078:	f090 0f00 	teq	r0, #0
   b707c:	bf04      	itt	eq
   b707e:	2100      	moveq	r1, #0
   b7080:	4770      	bxeq	lr
   b7082:	b530      	push	{r4, r5, lr}
   b7084:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7088:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b708c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7090:	bf48      	it	mi
   b7092:	4240      	negmi	r0, r0
   b7094:	f04f 0100 	mov.w	r1, #0
   b7098:	e73e      	b.n	b6f18 <__adddf3+0x138>
   b709a:	bf00      	nop

000b709c <__aeabi_f2d>:
   b709c:	0042      	lsls	r2, r0, #1
   b709e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b70a2:	ea4f 0131 	mov.w	r1, r1, rrx
   b70a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b70aa:	bf1f      	itttt	ne
   b70ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b70b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b70b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b70b8:	4770      	bxne	lr
   b70ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b70be:	bf08      	it	eq
   b70c0:	4770      	bxeq	lr
   b70c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b70c6:	bf04      	itt	eq
   b70c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b70cc:	4770      	bxeq	lr
   b70ce:	b530      	push	{r4, r5, lr}
   b70d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b70d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b70d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b70dc:	e71c      	b.n	b6f18 <__adddf3+0x138>
   b70de:	bf00      	nop

000b70e0 <__aeabi_ul2d>:
   b70e0:	ea50 0201 	orrs.w	r2, r0, r1
   b70e4:	bf08      	it	eq
   b70e6:	4770      	bxeq	lr
   b70e8:	b530      	push	{r4, r5, lr}
   b70ea:	f04f 0500 	mov.w	r5, #0
   b70ee:	e00a      	b.n	b7106 <__aeabi_l2d+0x16>

000b70f0 <__aeabi_l2d>:
   b70f0:	ea50 0201 	orrs.w	r2, r0, r1
   b70f4:	bf08      	it	eq
   b70f6:	4770      	bxeq	lr
   b70f8:	b530      	push	{r4, r5, lr}
   b70fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b70fe:	d502      	bpl.n	b7106 <__aeabi_l2d+0x16>
   b7100:	4240      	negs	r0, r0
   b7102:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7106:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b710a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b710e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7112:	f43f aed8 	beq.w	b6ec6 <__adddf3+0xe6>
   b7116:	f04f 0203 	mov.w	r2, #3
   b711a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b711e:	bf18      	it	ne
   b7120:	3203      	addne	r2, #3
   b7122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7126:	bf18      	it	ne
   b7128:	3203      	addne	r2, #3
   b712a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b712e:	f1c2 0320 	rsb	r3, r2, #32
   b7132:	fa00 fc03 	lsl.w	ip, r0, r3
   b7136:	fa20 f002 	lsr.w	r0, r0, r2
   b713a:	fa01 fe03 	lsl.w	lr, r1, r3
   b713e:	ea40 000e 	orr.w	r0, r0, lr
   b7142:	fa21 f102 	lsr.w	r1, r1, r2
   b7146:	4414      	add	r4, r2
   b7148:	e6bd      	b.n	b6ec6 <__adddf3+0xe6>
   b714a:	bf00      	nop

000b714c <__gedf2>:
   b714c:	f04f 3cff 	mov.w	ip, #4294967295
   b7150:	e006      	b.n	b7160 <__cmpdf2+0x4>
   b7152:	bf00      	nop

000b7154 <__ledf2>:
   b7154:	f04f 0c01 	mov.w	ip, #1
   b7158:	e002      	b.n	b7160 <__cmpdf2+0x4>
   b715a:	bf00      	nop

000b715c <__cmpdf2>:
   b715c:	f04f 0c01 	mov.w	ip, #1
   b7160:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7164:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7168:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b716c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7170:	bf18      	it	ne
   b7172:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7176:	d01b      	beq.n	b71b0 <__cmpdf2+0x54>
   b7178:	b001      	add	sp, #4
   b717a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b717e:	bf0c      	ite	eq
   b7180:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7184:	ea91 0f03 	teqne	r1, r3
   b7188:	bf02      	ittt	eq
   b718a:	ea90 0f02 	teqeq	r0, r2
   b718e:	2000      	moveq	r0, #0
   b7190:	4770      	bxeq	lr
   b7192:	f110 0f00 	cmn.w	r0, #0
   b7196:	ea91 0f03 	teq	r1, r3
   b719a:	bf58      	it	pl
   b719c:	4299      	cmppl	r1, r3
   b719e:	bf08      	it	eq
   b71a0:	4290      	cmpeq	r0, r2
   b71a2:	bf2c      	ite	cs
   b71a4:	17d8      	asrcs	r0, r3, #31
   b71a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b71aa:	f040 0001 	orr.w	r0, r0, #1
   b71ae:	4770      	bx	lr
   b71b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b71b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b71b8:	d102      	bne.n	b71c0 <__cmpdf2+0x64>
   b71ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b71be:	d107      	bne.n	b71d0 <__cmpdf2+0x74>
   b71c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b71c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b71c8:	d1d6      	bne.n	b7178 <__cmpdf2+0x1c>
   b71ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b71ce:	d0d3      	beq.n	b7178 <__cmpdf2+0x1c>
   b71d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   b71d4:	4770      	bx	lr
   b71d6:	bf00      	nop

000b71d8 <__aeabi_cdrcmple>:
   b71d8:	4684      	mov	ip, r0
   b71da:	4610      	mov	r0, r2
   b71dc:	4662      	mov	r2, ip
   b71de:	468c      	mov	ip, r1
   b71e0:	4619      	mov	r1, r3
   b71e2:	4663      	mov	r3, ip
   b71e4:	e000      	b.n	b71e8 <__aeabi_cdcmpeq>
   b71e6:	bf00      	nop

000b71e8 <__aeabi_cdcmpeq>:
   b71e8:	b501      	push	{r0, lr}
   b71ea:	f7ff ffb7 	bl	b715c <__cmpdf2>
   b71ee:	2800      	cmp	r0, #0
   b71f0:	bf48      	it	mi
   b71f2:	f110 0f00 	cmnmi.w	r0, #0
   b71f6:	bd01      	pop	{r0, pc}

000b71f8 <__aeabi_dcmpeq>:
   b71f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b71fc:	f7ff fff4 	bl	b71e8 <__aeabi_cdcmpeq>
   b7200:	bf0c      	ite	eq
   b7202:	2001      	moveq	r0, #1
   b7204:	2000      	movne	r0, #0
   b7206:	f85d fb08 	ldr.w	pc, [sp], #8
   b720a:	bf00      	nop

000b720c <__aeabi_dcmplt>:
   b720c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7210:	f7ff ffea 	bl	b71e8 <__aeabi_cdcmpeq>
   b7214:	bf34      	ite	cc
   b7216:	2001      	movcc	r0, #1
   b7218:	2000      	movcs	r0, #0
   b721a:	f85d fb08 	ldr.w	pc, [sp], #8
   b721e:	bf00      	nop

000b7220 <__aeabi_dcmple>:
   b7220:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7224:	f7ff ffe0 	bl	b71e8 <__aeabi_cdcmpeq>
   b7228:	bf94      	ite	ls
   b722a:	2001      	movls	r0, #1
   b722c:	2000      	movhi	r0, #0
   b722e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7232:	bf00      	nop

000b7234 <__aeabi_dcmpge>:
   b7234:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7238:	f7ff ffce 	bl	b71d8 <__aeabi_cdrcmple>
   b723c:	bf94      	ite	ls
   b723e:	2001      	movls	r0, #1
   b7240:	2000      	movhi	r0, #0
   b7242:	f85d fb08 	ldr.w	pc, [sp], #8
   b7246:	bf00      	nop

000b7248 <__aeabi_dcmpgt>:
   b7248:	f84d ed08 	str.w	lr, [sp, #-8]!
   b724c:	f7ff ffc4 	bl	b71d8 <__aeabi_cdrcmple>
   b7250:	bf34      	ite	cc
   b7252:	2001      	movcc	r0, #1
   b7254:	2000      	movcs	r0, #0
   b7256:	f85d fb08 	ldr.w	pc, [sp], #8
   b725a:	bf00      	nop

000b725c <atexit>:
   b725c:	2300      	movs	r3, #0
   b725e:	4601      	mov	r1, r0
   b7260:	461a      	mov	r2, r3
   b7262:	4618      	mov	r0, r3
   b7264:	f000 b94c 	b.w	b7500 <__register_exitproc>

000b7268 <isprint>:
   b7268:	4b02      	ldr	r3, [pc, #8]	; (b7274 <isprint+0xc>)
   b726a:	4418      	add	r0, r3
   b726c:	7840      	ldrb	r0, [r0, #1]
   b726e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7272:	4770      	bx	lr
   b7274:	000b7a46 	.word	0x000b7a46

000b7278 <memcpy>:
   b7278:	440a      	add	r2, r1
   b727a:	4291      	cmp	r1, r2
   b727c:	f100 33ff 	add.w	r3, r0, #4294967295
   b7280:	d100      	bne.n	b7284 <memcpy+0xc>
   b7282:	4770      	bx	lr
   b7284:	b510      	push	{r4, lr}
   b7286:	f811 4b01 	ldrb.w	r4, [r1], #1
   b728a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b728e:	4291      	cmp	r1, r2
   b7290:	d1f9      	bne.n	b7286 <memcpy+0xe>
   b7292:	bd10      	pop	{r4, pc}

000b7294 <memmove>:
   b7294:	4288      	cmp	r0, r1
   b7296:	b510      	push	{r4, lr}
   b7298:	eb01 0402 	add.w	r4, r1, r2
   b729c:	d902      	bls.n	b72a4 <memmove+0x10>
   b729e:	4284      	cmp	r4, r0
   b72a0:	4623      	mov	r3, r4
   b72a2:	d807      	bhi.n	b72b4 <memmove+0x20>
   b72a4:	1e43      	subs	r3, r0, #1
   b72a6:	42a1      	cmp	r1, r4
   b72a8:	d008      	beq.n	b72bc <memmove+0x28>
   b72aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b72ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   b72b2:	e7f8      	b.n	b72a6 <memmove+0x12>
   b72b4:	4402      	add	r2, r0
   b72b6:	4601      	mov	r1, r0
   b72b8:	428a      	cmp	r2, r1
   b72ba:	d100      	bne.n	b72be <memmove+0x2a>
   b72bc:	bd10      	pop	{r4, pc}
   b72be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b72c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b72c6:	e7f7      	b.n	b72b8 <memmove+0x24>

000b72c8 <memset>:
   b72c8:	4402      	add	r2, r0
   b72ca:	4603      	mov	r3, r0
   b72cc:	4293      	cmp	r3, r2
   b72ce:	d100      	bne.n	b72d2 <memset+0xa>
   b72d0:	4770      	bx	lr
   b72d2:	f803 1b01 	strb.w	r1, [r3], #1
   b72d6:	e7f9      	b.n	b72cc <memset+0x4>

000b72d8 <srand>:
   b72d8:	b538      	push	{r3, r4, r5, lr}
   b72da:	4b10      	ldr	r3, [pc, #64]	; (b731c <srand+0x44>)
   b72dc:	681d      	ldr	r5, [r3, #0]
   b72de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72e0:	4604      	mov	r4, r0
   b72e2:	b9b3      	cbnz	r3, b7312 <srand+0x3a>
   b72e4:	2018      	movs	r0, #24
   b72e6:	f7fd fe41 	bl	b4f6c <malloc>
   b72ea:	4602      	mov	r2, r0
   b72ec:	63a8      	str	r0, [r5, #56]	; 0x38
   b72ee:	b920      	cbnz	r0, b72fa <srand+0x22>
   b72f0:	4b0b      	ldr	r3, [pc, #44]	; (b7320 <srand+0x48>)
   b72f2:	480c      	ldr	r0, [pc, #48]	; (b7324 <srand+0x4c>)
   b72f4:	2142      	movs	r1, #66	; 0x42
   b72f6:	f7fd fe61 	bl	b4fbc <__assert_func>
   b72fa:	490b      	ldr	r1, [pc, #44]	; (b7328 <srand+0x50>)
   b72fc:	4b0b      	ldr	r3, [pc, #44]	; (b732c <srand+0x54>)
   b72fe:	e9c0 1300 	strd	r1, r3, [r0]
   b7302:	4b0b      	ldr	r3, [pc, #44]	; (b7330 <srand+0x58>)
   b7304:	6083      	str	r3, [r0, #8]
   b7306:	230b      	movs	r3, #11
   b7308:	8183      	strh	r3, [r0, #12]
   b730a:	2100      	movs	r1, #0
   b730c:	2001      	movs	r0, #1
   b730e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7312:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7314:	2200      	movs	r2, #0
   b7316:	611c      	str	r4, [r3, #16]
   b7318:	615a      	str	r2, [r3, #20]
   b731a:	bd38      	pop	{r3, r4, r5, pc}
   b731c:	2003e5b8 	.word	0x2003e5b8
   b7320:	000b79b2 	.word	0x000b79b2
   b7324:	000b79c9 	.word	0x000b79c9
   b7328:	abcd330e 	.word	0xabcd330e
   b732c:	e66d1234 	.word	0xe66d1234
   b7330:	0005deec 	.word	0x0005deec

000b7334 <strchr>:
   b7334:	b2c9      	uxtb	r1, r1
   b7336:	4603      	mov	r3, r0
   b7338:	f810 2b01 	ldrb.w	r2, [r0], #1
   b733c:	b11a      	cbz	r2, b7346 <strchr+0x12>
   b733e:	428a      	cmp	r2, r1
   b7340:	d1f9      	bne.n	b7336 <strchr+0x2>
   b7342:	4618      	mov	r0, r3
   b7344:	4770      	bx	lr
   b7346:	2900      	cmp	r1, #0
   b7348:	bf18      	it	ne
   b734a:	2300      	movne	r3, #0
   b734c:	e7f9      	b.n	b7342 <strchr+0xe>

000b734e <strchrnul>:
   b734e:	b510      	push	{r4, lr}
   b7350:	4604      	mov	r4, r0
   b7352:	f7ff ffef 	bl	b7334 <strchr>
   b7356:	b918      	cbnz	r0, b7360 <strchrnul+0x12>
   b7358:	4620      	mov	r0, r4
   b735a:	f000 f814 	bl	b7386 <strlen>
   b735e:	4420      	add	r0, r4
   b7360:	bd10      	pop	{r4, pc}

000b7362 <strcmp>:
   b7362:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7366:	f811 3b01 	ldrb.w	r3, [r1], #1
   b736a:	2a01      	cmp	r2, #1
   b736c:	bf28      	it	cs
   b736e:	429a      	cmpcs	r2, r3
   b7370:	d0f7      	beq.n	b7362 <strcmp>
   b7372:	1ad0      	subs	r0, r2, r3
   b7374:	4770      	bx	lr

000b7376 <strcpy>:
   b7376:	4603      	mov	r3, r0
   b7378:	f811 2b01 	ldrb.w	r2, [r1], #1
   b737c:	f803 2b01 	strb.w	r2, [r3], #1
   b7380:	2a00      	cmp	r2, #0
   b7382:	d1f9      	bne.n	b7378 <strcpy+0x2>
   b7384:	4770      	bx	lr

000b7386 <strlen>:
   b7386:	4603      	mov	r3, r0
   b7388:	f813 2b01 	ldrb.w	r2, [r3], #1
   b738c:	2a00      	cmp	r2, #0
   b738e:	d1fb      	bne.n	b7388 <strlen+0x2>
   b7390:	1a18      	subs	r0, r3, r0
   b7392:	3801      	subs	r0, #1
   b7394:	4770      	bx	lr

000b7396 <strncmp>:
   b7396:	b510      	push	{r4, lr}
   b7398:	b17a      	cbz	r2, b73ba <strncmp+0x24>
   b739a:	4603      	mov	r3, r0
   b739c:	3901      	subs	r1, #1
   b739e:	1884      	adds	r4, r0, r2
   b73a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b73a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b73a8:	4290      	cmp	r0, r2
   b73aa:	d101      	bne.n	b73b0 <strncmp+0x1a>
   b73ac:	42a3      	cmp	r3, r4
   b73ae:	d101      	bne.n	b73b4 <strncmp+0x1e>
   b73b0:	1a80      	subs	r0, r0, r2
   b73b2:	bd10      	pop	{r4, pc}
   b73b4:	2800      	cmp	r0, #0
   b73b6:	d1f3      	bne.n	b73a0 <strncmp+0xa>
   b73b8:	e7fa      	b.n	b73b0 <strncmp+0x1a>
   b73ba:	4610      	mov	r0, r2
   b73bc:	e7f9      	b.n	b73b2 <strncmp+0x1c>

000b73be <strrchr>:
   b73be:	b538      	push	{r3, r4, r5, lr}
   b73c0:	4603      	mov	r3, r0
   b73c2:	460c      	mov	r4, r1
   b73c4:	b969      	cbnz	r1, b73e2 <strrchr+0x24>
   b73c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b73ca:	f7ff bfb3 	b.w	b7334 <strchr>
   b73ce:	1c43      	adds	r3, r0, #1
   b73d0:	4605      	mov	r5, r0
   b73d2:	4621      	mov	r1, r4
   b73d4:	4618      	mov	r0, r3
   b73d6:	f7ff ffad 	bl	b7334 <strchr>
   b73da:	2800      	cmp	r0, #0
   b73dc:	d1f7      	bne.n	b73ce <strrchr+0x10>
   b73de:	4628      	mov	r0, r5
   b73e0:	bd38      	pop	{r3, r4, r5, pc}
   b73e2:	2500      	movs	r5, #0
   b73e4:	e7f5      	b.n	b73d2 <strrchr+0x14>
	...

000b73e8 <_strtol_l.constprop.0>:
   b73e8:	2b01      	cmp	r3, #1
   b73ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b73ee:	d001      	beq.n	b73f4 <_strtol_l.constprop.0+0xc>
   b73f0:	2b24      	cmp	r3, #36	; 0x24
   b73f2:	d906      	bls.n	b7402 <_strtol_l.constprop.0+0x1a>
   b73f4:	f7fd fdda 	bl	b4fac <__errno>
   b73f8:	2316      	movs	r3, #22
   b73fa:	6003      	str	r3, [r0, #0]
   b73fc:	2000      	movs	r0, #0
   b73fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7402:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b74e8 <_strtol_l.constprop.0+0x100>
   b7406:	460d      	mov	r5, r1
   b7408:	462e      	mov	r6, r5
   b740a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b740e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7412:	f017 0708 	ands.w	r7, r7, #8
   b7416:	d1f7      	bne.n	b7408 <_strtol_l.constprop.0+0x20>
   b7418:	2c2d      	cmp	r4, #45	; 0x2d
   b741a:	d132      	bne.n	b7482 <_strtol_l.constprop.0+0x9a>
   b741c:	782c      	ldrb	r4, [r5, #0]
   b741e:	2701      	movs	r7, #1
   b7420:	1cb5      	adds	r5, r6, #2
   b7422:	2b00      	cmp	r3, #0
   b7424:	d05b      	beq.n	b74de <_strtol_l.constprop.0+0xf6>
   b7426:	2b10      	cmp	r3, #16
   b7428:	d109      	bne.n	b743e <_strtol_l.constprop.0+0x56>
   b742a:	2c30      	cmp	r4, #48	; 0x30
   b742c:	d107      	bne.n	b743e <_strtol_l.constprop.0+0x56>
   b742e:	782c      	ldrb	r4, [r5, #0]
   b7430:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7434:	2c58      	cmp	r4, #88	; 0x58
   b7436:	d14d      	bne.n	b74d4 <_strtol_l.constprop.0+0xec>
   b7438:	786c      	ldrb	r4, [r5, #1]
   b743a:	2310      	movs	r3, #16
   b743c:	3502      	adds	r5, #2
   b743e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7442:	f108 38ff 	add.w	r8, r8, #4294967295
   b7446:	f04f 0c00 	mov.w	ip, #0
   b744a:	fbb8 f9f3 	udiv	r9, r8, r3
   b744e:	4666      	mov	r6, ip
   b7450:	fb03 8a19 	mls	sl, r3, r9, r8
   b7454:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7458:	f1be 0f09 	cmp.w	lr, #9
   b745c:	d816      	bhi.n	b748c <_strtol_l.constprop.0+0xa4>
   b745e:	4674      	mov	r4, lr
   b7460:	42a3      	cmp	r3, r4
   b7462:	dd24      	ble.n	b74ae <_strtol_l.constprop.0+0xc6>
   b7464:	f1bc 0f00 	cmp.w	ip, #0
   b7468:	db1e      	blt.n	b74a8 <_strtol_l.constprop.0+0xc0>
   b746a:	45b1      	cmp	r9, r6
   b746c:	d31c      	bcc.n	b74a8 <_strtol_l.constprop.0+0xc0>
   b746e:	d101      	bne.n	b7474 <_strtol_l.constprop.0+0x8c>
   b7470:	45a2      	cmp	sl, r4
   b7472:	db19      	blt.n	b74a8 <_strtol_l.constprop.0+0xc0>
   b7474:	fb06 4603 	mla	r6, r6, r3, r4
   b7478:	f04f 0c01 	mov.w	ip, #1
   b747c:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7480:	e7e8      	b.n	b7454 <_strtol_l.constprop.0+0x6c>
   b7482:	2c2b      	cmp	r4, #43	; 0x2b
   b7484:	bf04      	itt	eq
   b7486:	782c      	ldrbeq	r4, [r5, #0]
   b7488:	1cb5      	addeq	r5, r6, #2
   b748a:	e7ca      	b.n	b7422 <_strtol_l.constprop.0+0x3a>
   b748c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7490:	f1be 0f19 	cmp.w	lr, #25
   b7494:	d801      	bhi.n	b749a <_strtol_l.constprop.0+0xb2>
   b7496:	3c37      	subs	r4, #55	; 0x37
   b7498:	e7e2      	b.n	b7460 <_strtol_l.constprop.0+0x78>
   b749a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b749e:	f1be 0f19 	cmp.w	lr, #25
   b74a2:	d804      	bhi.n	b74ae <_strtol_l.constprop.0+0xc6>
   b74a4:	3c57      	subs	r4, #87	; 0x57
   b74a6:	e7db      	b.n	b7460 <_strtol_l.constprop.0+0x78>
   b74a8:	f04f 3cff 	mov.w	ip, #4294967295
   b74ac:	e7e6      	b.n	b747c <_strtol_l.constprop.0+0x94>
   b74ae:	f1bc 0f00 	cmp.w	ip, #0
   b74b2:	da05      	bge.n	b74c0 <_strtol_l.constprop.0+0xd8>
   b74b4:	2322      	movs	r3, #34	; 0x22
   b74b6:	6003      	str	r3, [r0, #0]
   b74b8:	4646      	mov	r6, r8
   b74ba:	b942      	cbnz	r2, b74ce <_strtol_l.constprop.0+0xe6>
   b74bc:	4630      	mov	r0, r6
   b74be:	e79e      	b.n	b73fe <_strtol_l.constprop.0+0x16>
   b74c0:	b107      	cbz	r7, b74c4 <_strtol_l.constprop.0+0xdc>
   b74c2:	4276      	negs	r6, r6
   b74c4:	2a00      	cmp	r2, #0
   b74c6:	d0f9      	beq.n	b74bc <_strtol_l.constprop.0+0xd4>
   b74c8:	f1bc 0f00 	cmp.w	ip, #0
   b74cc:	d000      	beq.n	b74d0 <_strtol_l.constprop.0+0xe8>
   b74ce:	1e69      	subs	r1, r5, #1
   b74d0:	6011      	str	r1, [r2, #0]
   b74d2:	e7f3      	b.n	b74bc <_strtol_l.constprop.0+0xd4>
   b74d4:	2430      	movs	r4, #48	; 0x30
   b74d6:	2b00      	cmp	r3, #0
   b74d8:	d1b1      	bne.n	b743e <_strtol_l.constprop.0+0x56>
   b74da:	2308      	movs	r3, #8
   b74dc:	e7af      	b.n	b743e <_strtol_l.constprop.0+0x56>
   b74de:	2c30      	cmp	r4, #48	; 0x30
   b74e0:	d0a5      	beq.n	b742e <_strtol_l.constprop.0+0x46>
   b74e2:	230a      	movs	r3, #10
   b74e4:	e7ab      	b.n	b743e <_strtol_l.constprop.0+0x56>
   b74e6:	bf00      	nop
   b74e8:	000b7a47 	.word	0x000b7a47

000b74ec <strtol>:
   b74ec:	4613      	mov	r3, r2
   b74ee:	460a      	mov	r2, r1
   b74f0:	4601      	mov	r1, r0
   b74f2:	4802      	ldr	r0, [pc, #8]	; (b74fc <strtol+0x10>)
   b74f4:	6800      	ldr	r0, [r0, #0]
   b74f6:	f7ff bf77 	b.w	b73e8 <_strtol_l.constprop.0>
   b74fa:	bf00      	nop
   b74fc:	2003e5b8 	.word	0x2003e5b8

000b7500 <__register_exitproc>:
   b7500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7504:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b75c0 <__register_exitproc+0xc0>
   b7508:	4606      	mov	r6, r0
   b750a:	f8d8 0000 	ldr.w	r0, [r8]
   b750e:	461f      	mov	r7, r3
   b7510:	460d      	mov	r5, r1
   b7512:	4691      	mov	r9, r2
   b7514:	f000 f856 	bl	b75c4 <__retarget_lock_acquire_recursive>
   b7518:	4b25      	ldr	r3, [pc, #148]	; (b75b0 <__register_exitproc+0xb0>)
   b751a:	681c      	ldr	r4, [r3, #0]
   b751c:	b934      	cbnz	r4, b752c <__register_exitproc+0x2c>
   b751e:	4c25      	ldr	r4, [pc, #148]	; (b75b4 <__register_exitproc+0xb4>)
   b7520:	601c      	str	r4, [r3, #0]
   b7522:	4b25      	ldr	r3, [pc, #148]	; (b75b8 <__register_exitproc+0xb8>)
   b7524:	b113      	cbz	r3, b752c <__register_exitproc+0x2c>
   b7526:	681b      	ldr	r3, [r3, #0]
   b7528:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b752c:	6863      	ldr	r3, [r4, #4]
   b752e:	2b1f      	cmp	r3, #31
   b7530:	dd07      	ble.n	b7542 <__register_exitproc+0x42>
   b7532:	f8d8 0000 	ldr.w	r0, [r8]
   b7536:	f000 f847 	bl	b75c8 <__retarget_lock_release_recursive>
   b753a:	f04f 30ff 	mov.w	r0, #4294967295
   b753e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7542:	b34e      	cbz	r6, b7598 <__register_exitproc+0x98>
   b7544:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7548:	b988      	cbnz	r0, b756e <__register_exitproc+0x6e>
   b754a:	4b1c      	ldr	r3, [pc, #112]	; (b75bc <__register_exitproc+0xbc>)
   b754c:	b923      	cbnz	r3, b7558 <__register_exitproc+0x58>
   b754e:	f8d8 0000 	ldr.w	r0, [r8]
   b7552:	f000 f838 	bl	b75c6 <__retarget_lock_release>
   b7556:	e7f0      	b.n	b753a <__register_exitproc+0x3a>
   b7558:	f44f 7084 	mov.w	r0, #264	; 0x108
   b755c:	f7fd fd06 	bl	b4f6c <malloc>
   b7560:	2800      	cmp	r0, #0
   b7562:	d0f4      	beq.n	b754e <__register_exitproc+0x4e>
   b7564:	2300      	movs	r3, #0
   b7566:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b756a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b756e:	6863      	ldr	r3, [r4, #4]
   b7570:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7574:	2201      	movs	r2, #1
   b7576:	409a      	lsls	r2, r3
   b7578:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b757c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7580:	4313      	orrs	r3, r2
   b7582:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7586:	2e02      	cmp	r6, #2
   b7588:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b758c:	bf02      	ittt	eq
   b758e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7592:	4313      	orreq	r3, r2
   b7594:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7598:	6863      	ldr	r3, [r4, #4]
   b759a:	f8d8 0000 	ldr.w	r0, [r8]
   b759e:	1c5a      	adds	r2, r3, #1
   b75a0:	3302      	adds	r3, #2
   b75a2:	6062      	str	r2, [r4, #4]
   b75a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b75a8:	f000 f80e 	bl	b75c8 <__retarget_lock_release_recursive>
   b75ac:	2000      	movs	r0, #0
   b75ae:	e7c6      	b.n	b753e <__register_exitproc+0x3e>
   b75b0:	2003e7e8 	.word	0x2003e7e8
   b75b4:	2003e75c 	.word	0x2003e75c
   b75b8:	00000000 	.word	0x00000000
   b75bc:	000b4f6d 	.word	0x000b4f6d
   b75c0:	2003e61c 	.word	0x2003e61c

000b75c4 <__retarget_lock_acquire_recursive>:
   b75c4:	4770      	bx	lr

000b75c6 <__retarget_lock_release>:
   b75c6:	4770      	bx	lr

000b75c8 <__retarget_lock_release_recursive>:
   b75c8:	4770      	bx	lr

000b75ca <link_code_end>:
	...

000b75cc <dynalib_user>:
   b75cc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b75dc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b75ec:	7620 7269 7574 6c61 6100 7466 7265 6c20      virtual.after l
   b75fc:	616f 6964 676e 7400 7365 6974 676e 0021     oading.testing!.
   b760c:	6661 6574 2072 7075 6164 6574 0000 0000     after update....

000b761c <_ZTVN5spark10LogHandlerE>:
	...
   b762c:	40a5 000b 40cd 000b                         .@...@..

000b7634 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b763c:	4101 000b 4135 000b 5ee1 000b 40cf 000b     .A..5A...^...@..

000b764c <_ZTV10MB85RC256V>:
	...
   b7654:	40d9 000b 40ed 000b 4709 000b 479f 000b     .@...@...G...G..
   b7664:	4821 000b 7325 203a 6425 202c 6425 202c     !H..%s: %d, %d, 
   b7674:	6c25 2c66 2520 0073                         %lf, %s.

000b767c <_ZTV16MyPersistentData>:
	...
   b7684:	4449 000b 44bd 000b 449b 000b 48d9 000b     ID...D...D...H..
   b7694:	4901 000b 4a91 000b 4b29 000b 441d 000b     .I...J..)K...D..
   b76a4:	4435 000b                                   5D..

000b76a8 <_ZTV6MB85RC>:
	...
   b76b0:	46c9 000b 46cb 000b 4709 000b 479f 000b     .F...F...G...G..
   b76c0:	4821 000b 6f67 3a74 6d20 6761 6369 253d     !H..got: magic=%
   b76d0:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   b76e0:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   b76f0:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   b7700:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   b7710:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   b7720:	253d 3830 0078 0000                         =%08x...

000b7728 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   b7730:	48d3 000b 494f 000b 48d1 000b 48d9 000b     .H..OI...H...H..
   b7740:	4901 000b 4a91 000b 4b29 000b               .I...J..)K..

000b774c <_ZTVN5spark13EthernetClassE>:
	...
   b7754:	503b 000b 5031 000b 5027 000b 501d 000b     ;P..1P..'P...P..
   b7764:	5011 000b 5005 000b 6801 000b 6809 000b     .P...P...h...h..
   b7774:	4ff9 000b 4ff1 000b 4fe7 000b 4fdd 000b     .O...O...O...O..
   b7784:	6839 000b 6162 6475 5300 7265 6169 006c     9h..baud.Serial.
   b7794:	6553 6972 6c61 0031 534a 4e4f 7453 6572     Serial1.JSONStre
   b77a4:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   b77b4:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   b77c4:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   b77d4:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   b77e4:	000a 006d 0066 6e6c 6600 006e 0074 6f63     ..m.f.ln.fn.t.co
   b77f4:	6564 6400 7465 6961 006c 0000               de.detail...

000b7800 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7808:	532d 000b 5353 000b 5311 000b 6953 000b     -S..SS...S..Si..

000b7818 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7820:	5789 000b 57a1 000b 5ee1 000b 40cf 000b     .W...W...^...@..

000b7830 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7838:	57b5 000b 57c9 000b 6085 000b 5319 000b     .W...W...`...S..

000b7848 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7850:	532b 000b 5361 000b 5e45 000b 531b 000b     +S..aS..E^...S..

000b7860 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7868:	5329 000b 536f 000b 56f1 000b 5391 000b     )S..oS...V...S..
   b7878:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b7888:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b7894 <_ZTV9IPAddress>:
	...
   b789c:	6369 000b 6359 000b 635b 000b               ic..Yc..[c..

000b78a8 <_ZTV9USBSerial>:
	...
   b78b0:	644f 000b 64b7 000b 648d 000b 5205 000b     Od...d...d...R..
   b78c0:	647f 000b 6451 000b 6461 000b 64b1 000b     .d..Qd..ad...d..
   b78d0:	6471 000b 6449 000b                         qd..Id..

000b78d8 <_ZTVN5spark13CellularClassE>:
	...
   b78e0:	65bb 000b 65b1 000b 65a7 000b 655d 000b     .e...e...e..]e..
   b78f0:	659b 000b 658f 000b 6801 000b 6809 000b     .e...e...h...h..
   b7900:	6583 000b 657b 000b 6571 000b 6567 000b     .e..{e..qe..ge..
   b7910:	6839 000b                                   9h..

000b7914 <_ZTV11USARTSerial>:
	...
   b791c:	65f5 000b 6661 000b 6639 000b 5205 000b     .e..af..9f...R..
   b792c:	6609 000b 6625 000b 6617 000b 6633 000b     .f..%f...f..3f..
   b793c:	65f7 000b 65fb 000b                         .e...e..

000b7944 <_ZTV7TwoWire>:
	...
   b794c:	66ad 000b 66f7 000b 66cf 000b 66af 000b     .f...f...f...f..
   b795c:	66d7 000b 66df 000b 66e7 000b 66ef 000b     .f...f...f...f..

000b796c <_ZTVN5spark12NetworkClassE>:
	...
   b7974:	67c1 000b 67cb 000b 67d5 000b 67df 000b     .g...g...g...g..
   b7984:	67e9 000b 67f5 000b 6801 000b 6809 000b     .g...g...h...h..
   b7994:	6811 000b 681d 000b 6825 000b 682f 000b     .h...h..%h../h..
   b79a4:	6839 000b 7525 7500 3025 7834                9h..%u.u%04x.

000b79b1 <_ZSt7nothrow>:
   b79b1:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b79c1:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b79d1:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b79e1:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b79f1:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7a01:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7a11:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7a21:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7a31:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b7a41:	646e 632e                                    nd.c.

000b7a46 <_ctype_>:
   b7a46:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7a56:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7a66:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7a76:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7a86:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7a96:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7aa6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7ab6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7ac6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7b47 <link_const_variable_data_end>:
	...

000b7b48 <link_constructors_location>:
   b7b48:	000b4351 	.word	0x000b4351
   b7b4c:	000b5045 	.word	0x000b5045
   b7b50:	000b5059 	.word	0x000b5059
   b7b54:	000b51f5 	.word	0x000b51f5
   b7b58:	000b5ed1 	.word	0x000b5ed1
   b7b5c:	000b61f9 	.word	0x000b61f9
   b7b60:	000b6215 	.word	0x000b6215
   b7b64:	000b65c5 	.word	0x000b65c5
   b7b68:	000b6911 	.word	0x000b6911

000b7b6c <link_constructors_end>:
   b7b6c:	00000000 	.word	0x00000000
