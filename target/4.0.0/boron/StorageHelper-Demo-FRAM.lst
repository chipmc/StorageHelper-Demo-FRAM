
/Users/chipmc/Documents/Maker/Particle/Utilities/StorageHelper-Demo-FRAM/target/4.0.0/boron/StorageHelper-Demo-FRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003b30  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7b50  000b7b50  00007b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7b74  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e5ac  000b7b78  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  2003e620  2003e620  0002e620  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7bec  000b7bec  00027bec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7c14  000b7c14  00027c14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010e029  00000000  00000000  00027c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000128ff  00000000  00000000  00135c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038526  00000000  00000000  00148540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a38  00000000  00000000  00180a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a758  00000000  00000000  0018349e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e2d  00000000  00000000  0018dbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d31d  00000000  00000000  001c4a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132aa3  00000000  00000000  00201d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007a10  00000000  00000000  003347e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f917 	bl	b7264 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f939 	bl	b72b4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5ac 	.word	0x2003e5ac
   b404c:	000b7b78 	.word	0x000b7b78
   b4050:	2003e620 	.word	0x2003e620
   b4054:	2003e620 	.word	0x2003e620
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fdfb 	bl	b6c5c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b7b24 	.word	0x000b7b24
   b4080:	000b7b4c 	.word	0x000b7b4c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b9e0 	b.w	b4448 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa01 	bl	b4490 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bd9b 	b.w	b6bcc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bf63 	b.w	b4f60 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bf61 	b.w	b4f60 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bf67 	b.w	b4f70 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fea4 	bl	b4df8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b4bb9 	.word	0x000b4bb9
   b40b8:	000b75cc 	.word	0x000b75cc

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z17testStorageAccessv>:
#include "Particle.h"
#include "Another_Module.h"
#include "MyPersistentData.h"


void testStorageAccess() {
   b40cc:	b508      	push	{r3, lr}
    data.logData("From another module:");
   b40ce:	f000 f89d 	bl	b420c <_ZN16MyPersistentData8instanceEv>

   b40d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    data.logData("From another module:");
   b40d6:	4901      	ldr	r1, [pc, #4]	; (b40dc <_Z17testStorageAccessv+0x10>)
   b40d8:	f000 b962 	b.w	b43a0 <_ZN16MyPersistentData7logDataEPKc>
   b40dc:	000b75e1 	.word	0x000b75e1

000b40e0 <_ZN16MyPersistentDataD1Ev>:
}

MyPersistentData::MyPersistentData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &myData.header, sizeof(MyData), DATA_MAGIC, DATA_VERSION) {
};

MyPersistentData::~MyPersistentData() {
   b40e0:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b40e2:	4b04      	ldr	r3, [pc, #16]	; (b40f4 <_ZN16MyPersistentDataD1Ev+0x14>)
   b40e4:	6003      	str	r3, [r0, #0]
   b40e6:	4604      	mov	r4, r0
            if (handle_) {
   b40e8:	6840      	ldr	r0, [r0, #4]
   b40ea:	b108      	cbz	r0, b40f0 <_ZN16MyPersistentDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b40ec:	f000 fd44 	bl	b4b78 <os_mutex_recursive_destroy>
}
   b40f0:	4620      	mov	r0, r4
   b40f2:	bd10      	pop	{r4, pc}
   b40f4:	000b7730 	.word	0x000b7730

000b40f8 <_ZN16MyPersistentDataD0Ev>:
MyPersistentData::~MyPersistentData() {
   b40f8:	b510      	push	{r4, lr}
   b40fa:	4604      	mov	r4, r0
}
   b40fc:	f7ff fff0 	bl	b40e0 <_ZN16MyPersistentDataD1Ev>
   b4100:	4620      	mov	r0, r4
   b4102:	2158      	movs	r1, #88	; 0x58
   b4104:	f7ff ffcb 	bl	b409e <_ZdlPvj>
   b4108:	4620      	mov	r0, r4
   b410a:	bd10      	pop	{r4, pc}

000b410c <_ZN10MB85RC256VD1Ev>:
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
};

class MB85RC256V : public MB85RC {
   b410c:	b510      	push	{r4, lr}
   b410e:	4b03      	ldr	r3, [pc, #12]	; (b411c <_ZN10MB85RC256VD1Ev+0x10>)
   b4110:	6003      	str	r3, [r0, #0]
   b4112:	4604      	mov	r4, r0
   b4114:	f000 fae2 	bl	b46dc <_ZN6MB85RCD1Ev>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}
   b411c:	000b7614 	.word	0x000b7614

000b4120 <_ZN10MB85RC256VD0Ev>:
   b4120:	b510      	push	{r4, lr}
   b4122:	4604      	mov	r4, r0
   b4124:	f7ff fff2 	bl	b410c <_ZN10MB85RC256VD1Ev>
   b4128:	4620      	mov	r0, r4
   b412a:	2110      	movs	r1, #16
   b412c:	f7ff ffb7 	bl	b409e <_ZdlPvj>
   b4130:	4620      	mov	r0, r4
   b4132:	bd10      	pop	{r4, pc}

000b4134 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4134:	b40e      	push	{r1, r2, r3}
   b4136:	b500      	push	{lr}
   b4138:	b08c      	sub	sp, #48	; 0x30
   b413a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b413c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4140:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4144:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4146:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b414a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b414c:	6801      	ldr	r1, [r0, #0]
   b414e:	aa04      	add	r2, sp, #16
   b4150:	201e      	movs	r0, #30
    attr.flags = 0;
   b4152:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	f000 fe57 	bl	b4e08 <log_message_v>
}
   b415a:	b00c      	add	sp, #48	; 0x30
   b415c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4160:	b003      	add	sp, #12
   b4162:	4770      	bx	lr

000b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b4164:	b510      	push	{r4, lr}
            if (!handle_) {
   b4166:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b4168:	4604      	mov	r4, r0
            if (!handle_) {
   b416a:	b90b      	cbnz	r3, b4170 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b416c:	f000 fcfc 	bl	b4b68 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b4170:	6820      	ldr	r0, [r4, #0]
        }
   b4172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b4176:	f000 bd07 	b.w	b4b88 <os_mutex_recursive_lock>

000b417a <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b417a:	b538      	push	{r3, r4, r5, lr}
   b417c:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b417e:	3004      	adds	r0, #4
   b4180:	f7ff fff0 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b4184:	6a20      	ldr	r0, [r4, #32]
   b4186:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b4188:	6803      	ldr	r3, [r0, #0]
   b418a:	68dd      	ldr	r5, [r3, #12]
   b418c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b4190:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b4192:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b4194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b4198:	f000 bcfe 	b.w	b4b98 <os_mutex_recursive_unlock>

000b419c <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b419c:	b538      	push	{r3, r4, r5, lr}
   b419e:	4604      	mov	r4, r0
   b41a0:	3004      	adds	r0, #4
   b41a2:	f7ff ffdf 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b41a6:	6a20      	ldr	r0, [r4, #32]
   b41a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b41aa:	6803      	ldr	r3, [r0, #0]
   b41ac:	689d      	ldr	r5, [r3, #8]
   b41ae:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b41b2:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b41b4:	68a2      	ldr	r2, [r4, #8]
   b41b6:	6823      	ldr	r3, [r4, #0]
   b41b8:	88d1      	ldrh	r1, [r2, #6]
   b41ba:	695b      	ldr	r3, [r3, #20]
   b41bc:	4620      	mov	r0, r4
   b41be:	4798      	blx	r3
   b41c0:	b918      	cbnz	r0, b41ca <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b41c2:	6823      	ldr	r3, [r4, #0]
   b41c4:	4620      	mov	r0, r4
   b41c6:	699b      	ldr	r3, [r3, #24]
   b41c8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b41ca:	6860      	ldr	r0, [r4, #4]
   b41cc:	f000 fce4 	bl	b4b98 <os_mutex_recursive_unlock>
        }
   b41d0:	2001      	movs	r0, #1
   b41d2:	bd38      	pop	{r3, r4, r5, pc}

000b41d4 <_ZN16MyPersistentDataC1Ev>:
MyPersistentData::MyPersistentData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &myData.header, sizeof(MyData), DATA_MAGIC, DATA_VERSION) {
   b41d4:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b41d8:	6081      	str	r1, [r0, #8]
   b41da:	4909      	ldr	r1, [pc, #36]	; (b4200 <_ZN16MyPersistentDataC1Ev+0x2c>)
   b41dc:	f04f 0c30 	mov.w	ip, #48	; 0x30
   b41e0:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b41e4:	2101      	movs	r1, #1
   b41e6:	8281      	strh	r1, [r0, #20]
   b41e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b41ec:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b41ee:	4905      	ldr	r1, [pc, #20]	; (b4204 <_ZN16MyPersistentDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b41f0:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b41f2:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b41f6:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b41f8:	6182      	str	r2, [r0, #24]
   b41fa:	4a03      	ldr	r2, [pc, #12]	; (b4208 <_ZN16MyPersistentDataC1Ev+0x34>)
   b41fc:	6002      	str	r2, [r0, #0]
};
   b41fe:	4770      	bx	lr
   b4200:	20a99e73 	.word	0x20a99e73
   b4204:	2003e624 	.word	0x2003e624
   b4208:	000b7630 	.word	0x000b7630

000b420c <_ZN16MyPersistentData8instanceEv>:
MyPersistentData &MyPersistentData::instance() {
   b420c:	b510      	push	{r4, lr}
    if (!_instance) {
   b420e:	4c06      	ldr	r4, [pc, #24]	; (b4228 <_ZN16MyPersistentData8instanceEv+0x1c>)
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	b93b      	cbnz	r3, b4224 <_ZN16MyPersistentData8instanceEv+0x18>
        _instance = new MyPersistentData();
   b4214:	2058      	movs	r0, #88	; 0x58
   b4216:	f7ff ff3e 	bl	b4096 <_Znwj>
   b421a:	4603      	mov	r3, r0
   b421c:	b108      	cbz	r0, b4222 <_ZN16MyPersistentData8instanceEv+0x16>
   b421e:	f7ff ffd9 	bl	b41d4 <_ZN16MyPersistentDataC1Ev>
   b4222:	6023      	str	r3, [r4, #0]
}
   b4224:	6820      	ldr	r0, [r4, #0]
   b4226:	bd10      	pop	{r4, pc}
   b4228:	2003e620 	.word	0x2003e620

000b422c <_ZN16MyPersistentData5setupEv>:

void MyPersistentData::setup() {
   b422c:	b510      	push	{r4, lr}
    fram.begin();
   b422e:	6a00      	ldr	r0, [r0, #32]
   b4230:	f000 fa6a 	bl	b4708 <_ZN6MB85RC5beginEv>
    data.load();
   b4234:	f7ff ffea 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b4238:	6803      	ldr	r3, [r0, #0]
}
   b423a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    data.load();
   b423e:	685b      	ldr	r3, [r3, #4]
   b4240:	4718      	bx	r3

000b4242 <_ZN16MyPersistentData4loopEv>:

void MyPersistentData::loop() {
   b4242:	b510      	push	{r4, lr}
    data.flush(false);
   b4244:	f7ff ffe2 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b4248:	6803      	ldr	r3, [r0, #0]
}
   b424a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    data.flush(false);
   b424e:	68db      	ldr	r3, [r3, #12]
   b4250:	2100      	movs	r1, #0
   b4252:	4718      	bx	r3

000b4254 <_ZNK16MyPersistentData14getValue_test1Ev>:

int MyPersistentData::getValue_test1() const 
{
   b4254:	b538      	push	{r3, r4, r5, lr}
   b4256:	4604      	mov	r4, r0
   b4258:	3004      	adds	r0, #4
   b425a:	f7ff ff83 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b425e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b4260:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b4262:	3b04      	subs	r3, #4
   b4264:	2b0f      	cmp	r3, #15
                    result = *(const T *)p;
   b4266:	bf86      	itte	hi
   b4268:	68a3      	ldrhi	r3, [r4, #8]
   b426a:	691d      	ldrhi	r5, [r3, #16]
            T result = 0;
   b426c:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b426e:	f000 fc93 	bl	b4b98 <os_mutex_recursive_unlock>
    return getValue<int>(offsetof(MyData, test1));
}
   b4272:	4628      	mov	r0, r5
   b4274:	bd38      	pop	{r3, r4, r5, pc}

000b4276 <_ZN16MyPersistentData14setValue_test1Ei>:


void MyPersistentData::setValue_test1(int value) {
   b4276:	b538      	push	{r3, r4, r5, lr}
   b4278:	4604      	mov	r4, r0
   b427a:	3004      	adds	r0, #4
   b427c:	460d      	mov	r5, r1
   b427e:	f7ff ff71 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b4282:	68e3      	ldr	r3, [r4, #12]
   b4284:	3b04      	subs	r3, #4
   b4286:	2b0f      	cmp	r3, #15
   b4288:	d90d      	bls.n	b42a6 <_ZN16MyPersistentData14setValue_test1Ei+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b428a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b428c:	691a      	ldr	r2, [r3, #16]
   b428e:	4295      	cmp	r5, r2
   b4290:	d009      	beq.n	b42a6 <_ZN16MyPersistentData14setValue_test1Ei+0x30>
                        *(T *)p = value;
   b4292:	611d      	str	r5, [r3, #16]
                        savedDataHeader->hash = getHash();
   b4294:	4620      	mov	r0, r4
   b4296:	68a5      	ldr	r5, [r4, #8]
   b4298:	f000 fbb6 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b429c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b429e:	6823      	ldr	r3, [r4, #0]
   b42a0:	4620      	mov	r0, r4
   b42a2:	691b      	ldr	r3, [r3, #16]
   b42a4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b42a6:	6860      	ldr	r0, [r4, #4]
    setValue<int>(offsetof(MyData, test1), value);
}
   b42a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b42ac:	f000 bc74 	b.w	b4b98 <os_mutex_recursive_unlock>

000b42b0 <_ZNK16MyPersistentData14getValue_test2Ev>:

bool MyPersistentData::getValue_test2() const {
   b42b0:	b538      	push	{r3, r4, r5, lr}
   b42b2:	4604      	mov	r4, r0
   b42b4:	3004      	adds	r0, #4
   b42b6:	f7ff ff55 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b42ba:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b42bc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b42be:	3b01      	subs	r3, #1
   b42c0:	2b13      	cmp	r3, #19
                    result = *(const T *)p;
   b42c2:	bf86      	itte	hi
   b42c4:	68a3      	ldrhi	r3, [r4, #8]
   b42c6:	7d1d      	ldrbhi	r5, [r3, #20]
            T result = 0;
   b42c8:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b42ca:	f000 fc65 	bl	b4b98 <os_mutex_recursive_unlock>
    return getValue<bool>(offsetof(MyData, test2));
}
   b42ce:	4628      	mov	r0, r5
   b42d0:	bd38      	pop	{r3, r4, r5, pc}

000b42d2 <_ZN16MyPersistentData14setValue_test2Eb>:

void MyPersistentData::setValue_test2(bool value) {
   b42d2:	b538      	push	{r3, r4, r5, lr}
   b42d4:	4604      	mov	r4, r0
   b42d6:	3004      	adds	r0, #4
   b42d8:	460d      	mov	r5, r1
   b42da:	f7ff ff43 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b42de:	68e3      	ldr	r3, [r4, #12]
   b42e0:	3b01      	subs	r3, #1
   b42e2:	2b13      	cmp	r3, #19
   b42e4:	d90d      	bls.n	b4302 <_ZN16MyPersistentData14setValue_test2Eb+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b42e6:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b42e8:	7d1a      	ldrb	r2, [r3, #20]
   b42ea:	42aa      	cmp	r2, r5
   b42ec:	d009      	beq.n	b4302 <_ZN16MyPersistentData14setValue_test2Eb+0x30>
                        *(T *)p = value;
   b42ee:	751d      	strb	r5, [r3, #20]
                        savedDataHeader->hash = getHash();
   b42f0:	4620      	mov	r0, r4
   b42f2:	68a5      	ldr	r5, [r4, #8]
   b42f4:	f000 fb88 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b42f8:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b42fa:	6823      	ldr	r3, [r4, #0]
   b42fc:	4620      	mov	r0, r4
   b42fe:	691b      	ldr	r3, [r3, #16]
   b4300:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b4302:	6860      	ldr	r0, [r4, #4]
    setValue<bool>(offsetof(MyData, test2), value);
}
   b4304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4308:	f000 bc46 	b.w	b4b98 <os_mutex_recursive_unlock>
   b430c:	0000      	movs	r0, r0
	...

000b4310 <_ZNK16MyPersistentData14getValue_test3Ev>:

double MyPersistentData::getValue_test3() const {
   b4310:	b510      	push	{r4, lr}
   b4312:	4604      	mov	r4, r0
   b4314:	ed2d 8b02 	vpush	{d8}
   b4318:	3004      	adds	r0, #4
   b431a:	f7ff ff23 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b431e:	68e3      	ldr	r3, [r4, #12]
   b4320:	3b08      	subs	r3, #8
   b4322:	2b17      	cmp	r3, #23
   b4324:	d90c      	bls.n	b4340 <_ZNK16MyPersistentData14getValue_test3Ev+0x30>
                    result = *(const T *)p;
   b4326:	68a3      	ldr	r3, [r4, #8]
   b4328:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b432c:	6860      	ldr	r0, [r4, #4]
   b432e:	f000 fc33 	bl	b4b98 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(MyData, test3));
}
   b4332:	eeb0 0a48 	vmov.f32	s0, s16
   b4336:	eef0 0a68 	vmov.f32	s1, s17
   b433a:	ecbd 8b02 	vpop	{d8}
   b433e:	bd10      	pop	{r4, pc}
            T result = 0;
   b4340:	ed9f 8b01 	vldr	d8, [pc, #4]	; b4348 <_ZNK16MyPersistentData14getValue_test3Ev+0x38>
   b4344:	e7f2      	b.n	b432c <_ZNK16MyPersistentData14getValue_test3Ev+0x1c>
   b4346:	bf00      	nop
	...

000b4350 <_ZN16MyPersistentData14setValue_test3Ed>:

void MyPersistentData::setValue_test3(double value) {
   b4350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4352:	4604      	mov	r4, r0
   b4354:	3004      	adds	r0, #4
   b4356:	ec57 6b10 	vmov	r6, r7, d0
   b435a:	f7ff ff03 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b435e:	68e3      	ldr	r3, [r4, #12]
   b4360:	3b08      	subs	r3, #8
   b4362:	2b17      	cmp	r3, #23
   b4364:	d912      	bls.n	b438c <_ZN16MyPersistentData14setValue_test3Ed+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b4366:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b4368:	4630      	mov	r0, r6
   b436a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b436e:	4639      	mov	r1, r7
   b4370:	f002 ff38 	bl	b71e4 <__aeabi_dcmpeq>
   b4374:	b950      	cbnz	r0, b438c <_ZN16MyPersistentData14setValue_test3Ed+0x3c>
                        *(T *)p = value;
   b4376:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b437a:	4620      	mov	r0, r4
   b437c:	68a5      	ldr	r5, [r4, #8]
   b437e:	f000 fb43 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4382:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b4384:	6823      	ldr	r3, [r4, #0]
   b4386:	4620      	mov	r0, r4
   b4388:	691b      	ldr	r3, [r3, #16]
   b438a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b438c:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(MyData, test3), value);
}
   b438e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b4392:	f000 bc01 	b.w	b4b98 <os_mutex_recursive_unlock>

000b4396 <_ZN16MyPersistentData14setValue_test4EPKc>:
String MyPersistentData::getValue_test4() const {
    String result;
    getValueString(offsetof(MyData, test4), sizeof(MyData::test4), result);
    return result;
}
bool MyPersistentData::setValue_test4(const char *str) {
   b4396:	460b      	mov	r3, r1
    return setValueString(offsetof(MyData, test4), sizeof(MyData::test4), str);
   b4398:	220a      	movs	r2, #10
   b439a:	2120      	movs	r1, #32
   b439c:	f000 bb4c 	b.w	b4a38 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b43a0 <_ZN16MyPersistentData7logDataEPKc>:
}

void MyPersistentData::logData(const char *msg) {
   b43a0:	b530      	push	{r4, r5, lr}
   b43a2:	b087      	sub	sp, #28
    Log.info("%s: %d, %d, %lf, %s", msg, myData.test1, (int)myData.test2, myData.test3, myData.test4);
   b43a4:	f100 0348 	add.w	r3, r0, #72	; 0x48
   b43a8:	9304      	str	r3, [sp, #16]
   b43aa:	e9d0 4510 	ldrd	r4, r5, [r0, #64]	; 0x40
   b43ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b43b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   b43b6:	9300      	str	r3, [sp, #0]
   b43b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b43ba:	4803      	ldr	r0, [pc, #12]	; (b43c8 <_ZN16MyPersistentData7logDataEPKc+0x28>)
void MyPersistentData::logData(const char *msg) {
   b43bc:	460a      	mov	r2, r1
    Log.info("%s: %d, %d, %lf, %s", msg, myData.test1, (int)myData.test2, myData.test3, myData.test4);
   b43be:	4903      	ldr	r1, [pc, #12]	; (b43cc <_ZN16MyPersistentData7logDataEPKc+0x2c>)
   b43c0:	f7ff feb8 	bl	b4134 <_ZNK5spark6Logger4infoEPKcz>
   b43c4:	b007      	add	sp, #28
   b43c6:	bd30      	pop	{r4, r5, pc}
   b43c8:	2003e6b0 	.word	0x2003e6b0
   b43cc:	000b75f6 	.word	0x000b75f6

000b43d0 <_GLOBAL__sub_I_fram>:
   b43d0:	b510      	push	{r4, lr}
MB85RC256V fram(Wire, 0);
   b43d2:	f002 fc8d 	bl	b6cf0 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC256V(TwoWire &wire, int addr = 0) : MB85RC(wire, 32768, addr) {};
   b43d6:	4c05      	ldr	r4, [pc, #20]	; (b43ec <_GLOBAL__sub_I_fram+0x1c>)
   b43d8:	4601      	mov	r1, r0
   b43da:	2300      	movs	r3, #0
   b43dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   b43e0:	4620      	mov	r0, r4
   b43e2:	f000 f987 	bl	b46f4 <_ZN6MB85RCC1ER7TwoWireji>
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <_GLOBAL__sub_I_fram+0x20>)
   b43e8:	6023      	str	r3, [r4, #0]
   b43ea:	bd10      	pop	{r4, pc}
   b43ec:	2003e624 	.word	0x2003e624
   b43f0:	000b7614 	.word	0x000b7614

000b43f4 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b43f4:	4770      	bx	lr

000b43f6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b43f6:	6a00      	ldr	r0, [r0, #32]
   b43f8:	6803      	ldr	r3, [r0, #0]
   b43fa:	68db      	ldr	r3, [r3, #12]
   b43fc:	4718      	bx	r3
	...

000b4400 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4400:	4b0a      	ldr	r3, [pc, #40]	; (b442c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4402:	b510      	push	{r4, lr}
   b4404:	4604      	mov	r4, r0
   b4406:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4408:	f001 fad8 	bl	b59bc <_ZN5spark10LogManager8instanceEv>
   b440c:	4621      	mov	r1, r4
   b440e:	f001 fd10 	bl	b5e32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4412:	f002 fb93 	bl	b6b3c <_Z16_fetch_usbserialv>
   b4416:	f002 fb83 	bl	b6b20 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b441a:	4620      	mov	r0, r4
   b441c:	4b04      	ldr	r3, [pc, #16]	; (b4430 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b441e:	f840 3b04 	str.w	r3, [r0], #4
   b4422:	f001 fba1 	bl	b5b68 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4426:	4620      	mov	r0, r4
   b4428:	bd10      	pop	{r4, pc}
   b442a:	bf00      	nop
   b442c:	000b7698 	.word	0x000b7698
   b4430:	000b7680 	.word	0x000b7680

000b4434 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4434:	b510      	push	{r4, lr}
   b4436:	4604      	mov	r4, r0
    }
   b4438:	f7ff ffe2 	bl	b4400 <_ZN5spark16SerialLogHandlerD1Ev>
   b443c:	4620      	mov	r0, r4
   b443e:	2124      	movs	r1, #36	; 0x24
   b4440:	f7ff fe2d 	bl	b409e <_ZdlPvj>
   b4444:	4620      	mov	r0, r4
   b4446:	bd10      	pop	{r4, pc}

000b4448 <setup>:
SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);

void setup() {
   b4448:	b570      	push	{r4, r5, r6, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b444a:	2000      	movs	r0, #0
   b444c:	f000 fbc4 	bl	b4bd8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4450:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4454:	4604      	mov	r4, r0
   b4456:	2000      	movs	r0, #0
   b4458:	f000 fbbe 	bl	b4bd8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b445c:	1b00      	subs	r0, r0, r4
   b445e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4462:	42a8      	cmp	r0, r5
   b4464:	f171 0300 	sbcs.w	r3, r1, #0
   b4468:	d207      	bcs.n	b447a <setup+0x32>
    // Optional: Enable to make it easier to see debug USB serial messages at startup
    waitFor(Serial.isConnected, 10000);
   b446a:	f002 fb67 	bl	b6b3c <_Z16_fetch_usbserialv>
   b446e:	f002 fb5a 	bl	b6b26 <_ZN9USBSerial11isConnectedEv>
   b4472:	b910      	cbnz	r0, b447a <setup+0x32>
            spark_process();
   b4474:	f000 fd04 	bl	b4e80 <spark_process>
        while (_while() && !_condition()) {
   b4478:	e7ed      	b.n	b4456 <setup+0xe>
   b447a:	f002 fb5f 	bl	b6b3c <_Z16_fetch_usbserialv>
   b447e:	f002 fb52 	bl	b6b26 <_ZN9USBSerial11isConnectedEv>
    data.setup();
   b4482:	f7ff fec3 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b4486:	6803      	ldr	r3, [r0, #0]
}
   b4488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    data.setup();
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	4718      	bx	r3

000b4490 <loop>:

void loop() {
   b4490:	b510      	push	{r4, lr}

    static unsigned long lastCheck = 0;
    if (millis() - lastCheck >= 10000) {
   b4492:	4c29      	ldr	r4, [pc, #164]	; (b4538 <loop+0xa8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4494:	f000 fb98 	bl	b4bc8 <HAL_Timer_Get_Milli_Seconds>
   b4498:	6823      	ldr	r3, [r4, #0]
   b449a:	1ac0      	subs	r0, r0, r3
   b449c:	f242 730f 	movw	r3, #9999	; 0x270f
   b44a0:	4298      	cmp	r0, r3
   b44a2:	d93e      	bls.n	b4522 <loop+0x92>
   b44a4:	f000 fb90 	bl	b4bc8 <HAL_Timer_Get_Milli_Seconds>
        lastCheck = millis();
   b44a8:	6020      	str	r0, [r4, #0]


        data.logData("after loading");
   b44aa:	f7ff feaf 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44ae:	4923      	ldr	r1, [pc, #140]	; (b453c <loop+0xac>)
   b44b0:	f7ff ff76 	bl	b43a0 <_ZN16MyPersistentData7logDataEPKc>

        data.setValue_test1(data.getValue_test1() + 1);
   b44b4:	f7ff feaa 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44b8:	4604      	mov	r4, r0
   b44ba:	f7ff fea7 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44be:	f7ff fec9 	bl	b4254 <_ZNK16MyPersistentData14getValue_test1Ev>
   b44c2:	1c41      	adds	r1, r0, #1
   b44c4:	4620      	mov	r0, r4
   b44c6:	f7ff fed6 	bl	b4276 <_ZN16MyPersistentData14setValue_test1Ei>
        data.setValue_test2(!data.getValue_test2());
   b44ca:	f7ff fe9f 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44ce:	4604      	mov	r4, r0
   b44d0:	f7ff fe9c 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44d4:	f7ff feec 	bl	b42b0 <_ZNK16MyPersistentData14getValue_test2Ev>
   b44d8:	f080 0001 	eor.w	r0, r0, #1
   b44dc:	b2c1      	uxtb	r1, r0
   b44de:	4620      	mov	r0, r4
   b44e0:	f7ff fef7 	bl	b42d2 <_ZN16MyPersistentData14setValue_test2Eb>
        data.setValue_test3(data.getValue_test3() - 0.1);
   b44e4:	f7ff fe92 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44e8:	4604      	mov	r4, r0
   b44ea:	f7ff fe8f 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b44ee:	f7ff ff0f 	bl	b4310 <_ZNK16MyPersistentData14getValue_test3Ev>
   b44f2:	a30f      	add	r3, pc, #60	; (adr r3, b4530 <loop+0xa0>)
   b44f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b44f8:	ec51 0b10 	vmov	r0, r1, d0
   b44fc:	f002 fc64 	bl	b6dc8 <__aeabi_dsub>
   b4500:	ec41 0b10 	vmov	d0, r0, r1
   b4504:	4620      	mov	r0, r4
   b4506:	f7ff ff23 	bl	b4350 <_ZN16MyPersistentData14setValue_test3Ed>
        data.setValue_test4("testing!"); 
   b450a:	f7ff fe7f 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b450e:	490c      	ldr	r1, [pc, #48]	; (b4540 <loop+0xb0>)
   b4510:	f7ff ff41 	bl	b4396 <_ZN16MyPersistentData14setValue_test4EPKc>

        data.logData("after update");
   b4514:	f7ff fe7a 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b4518:	490a      	ldr	r1, [pc, #40]	; (b4544 <loop+0xb4>)
   b451a:	f7ff ff41 	bl	b43a0 <_ZN16MyPersistentData7logDataEPKc>

        testStorageAccess();
   b451e:	f7ff fdd5 	bl	b40cc <_Z17testStorageAccessv>

    }  

    data.loop();
   b4522:	f7ff fe73 	bl	b420c <_ZN16MyPersistentData8instanceEv>
   b4526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    data.loop();
   b452a:	f7ff be8a 	b.w	b4242 <_ZN16MyPersistentData4loopEv>
   b452e:	bf00      	nop
   b4530:	9999999a 	.word	0x9999999a
   b4534:	3fb99999 	.word	0x3fb99999
   b4538:	2003e640 	.word	0x2003e640
   b453c:	000b7654 	.word	0x000b7654
   b4540:	000b7662 	.word	0x000b7662
   b4544:	000b766b 	.word	0x000b766b

000b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4548:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b454a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b454e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4550:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4552:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4556:	42ae      	cmp	r6, r5
   b4558:	d004      	beq.n	b4564 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b455a:	4628      	mov	r0, r5
   b455c:	f002 f984 	bl	b6868 <_ZN6StringD1Ev>
   b4560:	3514      	adds	r5, #20
   b4562:	e7f8      	b.n	b4556 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4564:	6820      	ldr	r0, [r4, #0]
   b4566:	f000 fd03 	bl	b4f70 <free>
    AllocatorT::free(data_);
}
   b456a:	4620      	mov	r0, r4
   b456c:	bd70      	pop	{r4, r5, r6, pc}

000b456e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b456e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4572:	4604      	mov	r4, r0
   b4574:	460d      	mov	r5, r1
   b4576:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4578:	d916      	bls.n	b45a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b457a:	4290      	cmp	r0, r2
   b457c:	d215      	bcs.n	b45aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b457e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4582:	1a75      	subs	r5, r6, r1
   b4584:	f1a1 0714 	sub.w	r7, r1, #20
   b4588:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b458a:	42b7      	cmp	r7, r6
   b458c:	d01c      	beq.n	b45c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b458e:	b12c      	cbz	r4, b459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4590:	4631      	mov	r1, r6
   b4592:	4620      	mov	r0, r4
   b4594:	f002 f9d0 	bl	b6938 <_ZN6StringC1EOS_>
   b4598:	7c33      	ldrb	r3, [r6, #16]
   b459a:	7423      	strb	r3, [r4, #16]
   b459c:	4630      	mov	r0, r6
   b459e:	f002 f963 	bl	b6868 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b45a2:	3e14      	subs	r6, #20
   b45a4:	3c14      	subs	r4, #20
   b45a6:	e7f0      	b.n	b458a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b45a8:	d00e      	beq.n	b45c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b45aa:	42b5      	cmp	r5, r6
   b45ac:	d00c      	beq.n	b45c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b45ae:	b12c      	cbz	r4, b45bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b45b0:	4629      	mov	r1, r5
   b45b2:	4620      	mov	r0, r4
   b45b4:	f002 f9c0 	bl	b6938 <_ZN6StringC1EOS_>
   b45b8:	7c2b      	ldrb	r3, [r5, #16]
   b45ba:	7423      	strb	r3, [r4, #16]
   b45bc:	4628      	mov	r0, r5
   b45be:	f002 f953 	bl	b6868 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b45c2:	3514      	adds	r5, #20
   b45c4:	3414      	adds	r4, #20
   b45c6:	e7f0      	b.n	b45aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b45c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b45ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b45ce:	2300      	movs	r3, #0
   b45d0:	e9c0 3300 	strd	r3, r3, [r0]
   b45d4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b45d6:	684f      	ldr	r7, [r1, #4]
   b45d8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b45da:	4604      	mov	r4, r0
   b45dc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b45de:	dd23      	ble.n	b4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b45e0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b45e4:	fb08 f007 	mul.w	r0, r8, r7
   b45e8:	f000 fcba 	bl	b4f60 <malloc>
            if (!d) {
   b45ec:	4605      	mov	r5, r0
   b45ee:	b1d8      	cbz	r0, b4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b45f0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b45f4:	fb08 1202 	mla	r2, r8, r2, r1
   b45f8:	f7ff ffb9 	bl	b456e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b45fc:	6820      	ldr	r0, [r4, #0]
   b45fe:	f000 fcb7 	bl	b4f70 <free>
        data_ = d;
   b4602:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4604:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4606:	e9d6 7300 	ldrd	r7, r3, [r6]
   b460a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b460e:	45b8      	cmp	r8, r7
   b4610:	d008      	beq.n	b4624 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4612:	4639      	mov	r1, r7
   b4614:	4628      	mov	r0, r5
   b4616:	f002 f9a9 	bl	b696c <_ZN6StringC1ERKS_>
   b461a:	7c3b      	ldrb	r3, [r7, #16]
   b461c:	742b      	strb	r3, [r5, #16]
   b461e:	3714      	adds	r7, #20
   b4620:	3514      	adds	r5, #20
   b4622:	e7f4      	b.n	b460e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4624:	6873      	ldr	r3, [r6, #4]
   b4626:	6063      	str	r3, [r4, #4]
}
   b4628:	4620      	mov	r0, r4
   b462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4630 <_GLOBAL__sub_I_SystemMode>:
   b4630:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
   b4632:	2100      	movs	r1, #0
   b4634:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
   b4636:	2001      	movs	r0, #1
   b4638:	f000 fc06 	bl	b4e48 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b463c:	4b21      	ldr	r3, [pc, #132]	; (b46c4 <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
   b463e:	4a22      	ldr	r2, [pc, #136]	; (b46c8 <_GLOBAL__sub_I_SystemMode+0x98>)
   b4640:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4642:	2400      	movs	r4, #0
   b4644:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4648:	2003      	movs	r0, #3
   b464a:	f000 fbf5 	bl	b4e38 <set_system_mode>
        capacity_(0) {
   b464e:	e9cd 4400 	strd	r4, r4, [sp]
   b4652:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4654:	f002 fa72 	bl	b6b3c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4658:	4c1c      	ldr	r4, [pc, #112]	; (b46cc <_GLOBAL__sub_I_SystemMode+0x9c>)
   b465a:	4605      	mov	r5, r0
   b465c:	4669      	mov	r1, sp
   b465e:	a803      	add	r0, sp, #12
   b4660:	f7ff ffb3 	bl	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4664:	4626      	mov	r6, r4
        stream_(&stream) {
   b4666:	a903      	add	r1, sp, #12
   b4668:	a806      	add	r0, sp, #24
   b466a:	f7ff ffae 	bl	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b466e:	4b18      	ldr	r3, [pc, #96]	; (b46d0 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4670:	f846 3b04 	str.w	r3, [r6], #4
   b4674:	a906      	add	r1, sp, #24
   b4676:	a809      	add	r0, sp, #36	; 0x24
   b4678:	f7ff ffa7 	bl	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b467c:	aa09      	add	r2, sp, #36	; 0x24
   b467e:	2101      	movs	r1, #1
   b4680:	4630      	mov	r0, r6
   b4682:	f001 fcb9 	bl	b5ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4686:	a809      	add	r0, sp, #36	; 0x24
   b4688:	f7ff ff5e 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b468c:	a806      	add	r0, sp, #24
   b468e:	f7ff ff5b 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4692:	4b10      	ldr	r3, [pc, #64]	; (b46d4 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4694:	6023      	str	r3, [r4, #0]
   b4696:	6225      	str	r5, [r4, #32]
   b4698:	a803      	add	r0, sp, #12
   b469a:	f7ff ff55 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b469e:	4b0e      	ldr	r3, [pc, #56]	; (b46d8 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b46a0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b46a2:	f002 fa4b 	bl	b6b3c <_Z16_fetch_usbserialv>
   b46a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b46aa:	f002 fa35 	bl	b6b18 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b46ae:	f001 f985 	bl	b59bc <_ZN5spark10LogManager8instanceEv>
   b46b2:	4621      	mov	r1, r4
   b46b4:	f001 fb76 	bl	b5da4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   b46b8:	4668      	mov	r0, sp
   b46ba:	f7ff ff45 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b46be:	b00c      	add	sp, #48	; 0x30
   b46c0:	bd70      	pop	{r4, r5, r6, pc}
   b46c2:	bf00      	nop
   b46c4:	2003e634 	.word	0x2003e634
   b46c8:	ffff0000 	.word	0xffff0000
   b46cc:	2003e644 	.word	0x2003e644
   b46d0:	000b7680 	.word	0x000b7680
   b46d4:	000b78a0 	.word	0x000b78a0
   b46d8:	000b7698 	.word	0x000b7698

000b46dc <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b46dc:	4770      	bx	lr

000b46de <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b46de:	b510      	push	{r4, lr}
}
   b46e0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b46e2:	4604      	mov	r4, r0
}
   b46e4:	f7ff fcdb 	bl	b409e <_ZdlPvj>
   b46e8:	4620      	mov	r0, r4
   b46ea:	bd10      	pop	{r4, pc}

000b46ec <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b46ec:	6803      	ldr	r3, [r0, #0]
   b46ee:	b2c9      	uxtb	r1, r1
   b46f0:	689b      	ldr	r3, [r3, #8]
   b46f2:	4718      	bx	r3

000b46f4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b46f4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b46f6:	4d03      	ldr	r5, [pc, #12]	; (b4704 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b46f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b46fc:	e9c0 5100 	strd	r5, r1, [r0]
}
   b4700:	bd30      	pop	{r4, r5, pc}
   b4702:	bf00      	nop
   b4704:	000b76b0 	.word	0x000b76b0

000b4708 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b4708:	6840      	ldr	r0, [r0, #4]
   b470a:	f000 bd5f 	b.w	b51cc <_ZN7TwoWire5beginEv>

000b470e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b470e:	b510      	push	{r4, lr}
   b4710:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b4712:	6800      	ldr	r0, [r0, #0]
   b4714:	f000 fd9d 	bl	b5252 <_ZN7TwoWire6unlockEv>
   b4718:	4620      	mov	r0, r4
   b471a:	bd10      	pop	{r4, pc}

000b471c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b471c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4720:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b4722:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4724:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b4726:	460d      	mov	r5, r1
   b4728:	4616      	mov	r6, r2
   b472a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b472c:	f000 fd88 	bl	b5240 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b4730:	b1a7      	cbz	r7, b475c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b4732:	68e1      	ldr	r1, [r4, #12]
   b4734:	6860      	ldr	r0, [r4, #4]
   b4736:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b473a:	f000 fd7a 	bl	b5232 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b473e:	0a29      	lsrs	r1, r5, #8
   b4740:	6860      	ldr	r0, [r4, #4]
   b4742:	f7ff ffd3 	bl	b46ec <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b4746:	4629      	mov	r1, r5
   b4748:	6860      	ldr	r0, [r4, #4]
   b474a:	f7ff ffcf 	bl	b46ec <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b474e:	6860      	ldr	r0, [r4, #4]
   b4750:	2100      	movs	r1, #0
   b4752:	f000 fd71 	bl	b5238 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b4756:	b148      	cbz	r0, b476c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b4758:	2400      	movs	r4, #0
   b475a:	e000      	b.n	b475e <_ZN6MB85RC8readDataEjPhj+0x42>
   b475c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b475e:	a801      	add	r0, sp, #4
   b4760:	f7ff ffd5 	bl	b470e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b4764:	4620      	mov	r0, r4
   b4766:	b003      	add	sp, #12
   b4768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b476c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b476e:	7b21      	ldrb	r1, [r4, #12]
   b4770:	6860      	ldr	r0, [r4, #4]
   b4772:	46b8      	mov	r8, r7
   b4774:	bf28      	it	cs
   b4776:	f04f 0820 	movcs.w	r8, #32
   b477a:	2301      	movs	r3, #1
   b477c:	4642      	mov	r2, r8
   b477e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b4782:	f000 fd40 	bl	b5206 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b4786:	f002 fab3 	bl	b6cf0 <_Z19__fetch_global_Wirev>
   b478a:	6803      	ldr	r3, [r0, #0]
   b478c:	691b      	ldr	r3, [r3, #16]
   b478e:	4798      	blx	r3
   b4790:	4540      	cmp	r0, r8
   b4792:	dbe1      	blt.n	b4758 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b4794:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b4798:	f002 faaa 	bl	b6cf0 <_Z19__fetch_global_Wirev>
   b479c:	6803      	ldr	r3, [r0, #0]
   b479e:	695b      	ldr	r3, [r3, #20]
   b47a0:	4798      	blx	r3
   b47a2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b47a6:	454e      	cmp	r6, r9
   b47a8:	d1f6      	bne.n	b4798 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b47aa:	4445      	add	r5, r8
				dataLen--;
   b47ac:	eba7 0708 	sub.w	r7, r7, r8
   b47b0:	e7be      	b.n	b4730 <_ZN6MB85RC8readDataEjPhj+0x14>

000b47b2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b47b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47b6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b47b8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b47ba:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b47bc:	460e      	mov	r6, r1
   b47be:	4690      	mov	r8, r2
   b47c0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b47c2:	f000 fd3d 	bl	b5240 <_ZN7TwoWire4lockEv>
   b47c6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b47ca:	f1b9 0f00 	cmp.w	r9, #0
   b47ce:	d02a      	beq.n	b4826 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b47d0:	b34d      	cbz	r5, b4826 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b47d2:	68e1      	ldr	r1, [r4, #12]
   b47d4:	6860      	ldr	r0, [r4, #4]
   b47d6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b47da:	f000 fd2a 	bl	b5232 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b47de:	0a31      	lsrs	r1, r6, #8
   b47e0:	6860      	ldr	r0, [r4, #4]
   b47e2:	f7ff ff83 	bl	b46ec <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b47e6:	6860      	ldr	r0, [r4, #4]
   b47e8:	4631      	mov	r1, r6
   b47ea:	f7ff ff7f 	bl	b46ec <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b47ee:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b47f2:	4647      	mov	r7, r8
   b47f4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b47f8:	6860      	ldr	r0, [r4, #4]
   b47fa:	f817 1b01 	ldrb.w	r1, [r7], #1
   b47fe:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b4800:	3d01      	subs	r5, #1
				wire.write(*data);
   b4802:	689b      	ldr	r3, [r3, #8]
   b4804:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b4806:	4555      	cmp	r5, sl
   b4808:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b480c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b480e:	d001      	beq.n	b4814 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b4810:	2d00      	cmp	r5, #0
   b4812:	d1f1      	bne.n	b47f8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b4814:	6860      	ldr	r0, [r4, #4]
   b4816:	2101      	movs	r1, #1
   b4818:	f000 fd0e 	bl	b5238 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b481c:	2800      	cmp	r0, #0
   b481e:	d0d7      	beq.n	b47d0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b4820:	f04f 0900 	mov.w	r9, #0
   b4824:	e7d1      	b.n	b47ca <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b4826:	a801      	add	r0, sp, #4
   b4828:	f7ff ff71 	bl	b470e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b482c:	4648      	mov	r0, r9
   b482e:	b003      	add	sp, #12
   b4830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4834 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b4834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4838:	b08b      	sub	sp, #44	; 0x2c
   b483a:	460e      	mov	r6, r1
   b483c:	4615      	mov	r5, r2
   b483e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b4840:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b4842:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b4844:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b4846:	f000 fcfb 	bl	b5240 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b484a:	42ae      	cmp	r6, r5
   b484c:	d229      	bcs.n	b48a2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b484e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b4850:	4425      	add	r5, r4
			while(numBytes > 0) {
   b4852:	b18c      	cbz	r4, b4878 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b4854:	2c1e      	cmp	r4, #30
   b4856:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b4858:	f8d8 3000 	ldr.w	r3, [r8]
   b485c:	bf28      	it	cs
   b485e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b4860:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b4862:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b4866:	aa02      	add	r2, sp, #8
   b4868:	463b      	mov	r3, r7
   b486a:	4631      	mov	r1, r6
   b486c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b486e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b4870:	47c8      	blx	r9
				if (!result) {
   b4872:	b948      	cbnz	r0, b4888 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b4874:	2400      	movs	r4, #0
   b4876:	e000      	b.n	b487a <_ZN6MB85RC8moveDataEjjj+0x46>
   b4878:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b487a:	a801      	add	r0, sp, #4
   b487c:	f7ff ff47 	bl	b470e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b4880:	4620      	mov	r0, r4
   b4882:	b00b      	add	sp, #44	; 0x2c
   b4884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b4888:	f8d8 3000 	ldr.w	r3, [r8]
   b488c:	aa02      	add	r2, sp, #8
   b488e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b4892:	4629      	mov	r1, r5
   b4894:	463b      	mov	r3, r7
   b4896:	4640      	mov	r0, r8
   b4898:	47c8      	blx	r9
				if (!result) {
   b489a:	2800      	cmp	r0, #0
   b489c:	d0ea      	beq.n	b4874 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b489e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b48a0:	e7d7      	b.n	b4852 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b48a2:	d9e9      	bls.n	b4878 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b48a4:	2c00      	cmp	r4, #0
   b48a6:	d0e7      	beq.n	b4878 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b48a8:	f8d8 3000 	ldr.w	r3, [r8]
   b48ac:	2c1e      	cmp	r4, #30
   b48ae:	4627      	mov	r7, r4
   b48b0:	bf28      	it	cs
   b48b2:	271e      	movcs	r7, #30
   b48b4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b48b8:	aa02      	add	r2, sp, #8
   b48ba:	463b      	mov	r3, r7
   b48bc:	4631      	mov	r1, r6
   b48be:	4640      	mov	r0, r8
   b48c0:	47c8      	blx	r9
				if (!result) {
   b48c2:	2800      	cmp	r0, #0
   b48c4:	d0d6      	beq.n	b4874 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b48c6:	f8d8 3000 	ldr.w	r3, [r8]
   b48ca:	aa02      	add	r2, sp, #8
   b48cc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b48d0:	4629      	mov	r1, r5
   b48d2:	463b      	mov	r3, r7
   b48d4:	4640      	mov	r0, r8
   b48d6:	47c8      	blx	r9
				if (!result) {
   b48d8:	2800      	cmp	r0, #0
   b48da:	d0cb      	beq.n	b4874 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b48dc:	443e      	add	r6, r7
				framAddrTo += count;
   b48de:	443d      	add	r5, r7
				numBytes -= count;
   b48e0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b48e2:	e7df      	b.n	b48a4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b48e4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b48e4:	4770      	bx	lr

000b48e6 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b48e6:	6803      	ldr	r3, [r0, #0]
   b48e8:	685b      	ldr	r3, [r3, #4]
   b48ea:	4718      	bx	r3

000b48ec <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b48ec:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b48ee:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b48f0:	4604      	mov	r4, r0
    if (lastUpdate) {
   b48f2:	b133      	cbz	r3, b4902 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b48f4:	b131      	cbz	r1, b4904 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b48f6:	6823      	ldr	r3, [r4, #0]
   b48f8:	4620      	mov	r0, r4
   b48fa:	689b      	ldr	r3, [r3, #8]
   b48fc:	4798      	blx	r3
            lastUpdate = 0;
   b48fe:	2300      	movs	r3, #0
   b4900:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b4902:	bd10      	pop	{r4, pc}
   b4904:	f000 f960 	bl	b4bc8 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b4908:	69a3      	ldr	r3, [r4, #24]
   b490a:	1ac0      	subs	r0, r0, r3
   b490c:	69e3      	ldr	r3, [r4, #28]
   b490e:	4298      	cmp	r0, r3
   b4910:	d2f1      	bcs.n	b48f6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b4912:	e7f6      	b.n	b4902 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b4914 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b4914:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b4916:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b4918:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b491a:	b11b      	cbz	r3, b4924 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b491c:	f000 f954 	bl	b4bc8 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b4920:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b4922:	bd10      	pop	{r4, pc}
        save();
   b4924:	6803      	ldr	r3, [r0, #0]
}
   b4926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b492a:	689b      	ldr	r3, [r3, #8]
   b492c:	4718      	bx	r3

000b492e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b492e:	f000 b933 	b.w	b4b98 <os_mutex_recursive_unlock>

000b4932 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b4932:	b40e      	push	{r1, r2, r3}
   b4934:	b500      	push	{lr}
   b4936:	b08c      	sub	sp, #48	; 0x30
   b4938:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b493a:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::trace(const char *fmt, ...) const {
   b493e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4942:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4944:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4948:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b494a:	6801      	ldr	r1, [r0, #0]
   b494c:	aa04      	add	r2, sp, #16
   b494e:	2001      	movs	r0, #1
    attr.flags = 0;
   b4950:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4954:	f000 fa58 	bl	b4e08 <log_message_v>
}
   b4958:	b00c      	add	sp, #48	; 0x30
   b495a:	f85d eb04 	ldr.w	lr, [sp], #4
   b495e:	b003      	add	sp, #12
   b4960:	4770      	bx	lr

000b4962 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b4962:	b510      	push	{r4, lr}
   b4964:	4604      	mov	r4, r0
   b4966:	3004      	adds	r0, #4
   b4968:	f7ff fbfc 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b496c:	6823      	ldr	r3, [r4, #0]
   b496e:	68e1      	ldr	r1, [r4, #12]
   b4970:	695b      	ldr	r3, [r3, #20]
   b4972:	4620      	mov	r0, r4
   b4974:	4798      	blx	r3
   b4976:	b918      	cbnz	r0, b4980 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b4978:	6823      	ldr	r3, [r4, #0]
   b497a:	4620      	mov	r0, r4
   b497c:	699b      	ldr	r3, [r3, #24]
   b497e:	4798      	blx	r3
      { _M_device.unlock(); }
   b4980:	6860      	ldr	r0, [r4, #4]
   b4982:	f7ff ffd4 	bl	b492e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b4986:	2001      	movs	r0, #1
   b4988:	bd10      	pop	{r4, pc}
	...

000b498c <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b498c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b498e:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b4992:	4f18      	ldr	r7, [pc, #96]	; (b49f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b4994:	4e18      	ldr	r6, [pc, #96]	; (b49f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b4996:	4d19      	ldr	r5, [pc, #100]	; (b49fc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b4998:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b499a:	42a0      	cmp	r0, r4
   b499c:	d00c      	beq.n	b49b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b499e:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b49a2:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b49a4:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b49a8:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b49aa:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b49ac:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b49b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b49b4:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b49b6:	e7f0      	b.n	b499a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b49b8:	f001 0403 	and.w	r4, r1, #3
   b49bc:	4404      	add	r4, r0
    k = 0;
   b49be:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b49c0:	42a0      	cmp	r0, r4
   b49c2:	d004      	beq.n	b49ce <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b49c4:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b49c8:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b49cc:	e7f8      	b.n	b49c0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b49ce:	4809      	ldr	r0, [pc, #36]	; (b49f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b49d0:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b49d2:	4809      	ldr	r0, [pc, #36]	; (b49f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b49d4:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b49d8:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b49da:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b49dc:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b49de:	4b08      	ldr	r3, [pc, #32]	; (b4a00 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b49e0:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b49e4:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b49e6:	4b07      	ldr	r3, [pc, #28]	; (b4a04 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b49e8:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b49ec:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b49ee:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b49f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b49f4:	cc9e2d51 	.word	0xcc9e2d51
   b49f8:	1b873593 	.word	0x1b873593
   b49fc:	e6546b64 	.word	0xe6546b64
   b4a00:	85ebca6b 	.word	0x85ebca6b
   b4a04:	c2b2ae35 	.word	0xc2b2ae35

000b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b4a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a0a:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b4a0c:	3004      	adds	r0, #4
   b4a0e:	f7ff fba9 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b4a12:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b4a14:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b4a16:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b4a18:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b4a1a:	68a6      	ldr	r6, [r4, #8]
   b4a1c:	4a05      	ldr	r2, [pc, #20]	; (b4a34 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b4a1e:	88f1      	ldrh	r1, [r6, #6]
   b4a20:	4630      	mov	r0, r6
   b4a22:	f7ff ffb3 	bl	b498c <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b4a26:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b4a28:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b4a2a:	6860      	ldr	r0, [r4, #4]
   b4a2c:	f7ff ff7f 	bl	b492e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b4a30:	4628      	mov	r0, r5
   b4a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4a34:	851c2a3f 	.word	0x851c2a3f

000b4a38 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   b4a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a3c:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b4a3e:	3004      	adds	r0, #4
   b4a40:	4690      	mov	r8, r2
   b4a42:	460d      	mov	r5, r1
   b4a44:	461f      	mov	r7, r3
   b4a46:	f7ff fb8d 	bl	b4164 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   b4a4a:	68e2      	ldr	r2, [r4, #12]
   b4a4c:	f1c8 0301 	rsb	r3, r8, #1
   b4a50:	4413      	add	r3, r2
   b4a52:	42ab      	cmp	r3, r5
   b4a54:	d31f      	bcc.n	b4a96 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
   b4a56:	4638      	mov	r0, r7
   b4a58:	f002 fc8b 	bl	b7372 <strlen>
   b4a5c:	4540      	cmp	r0, r8
   b4a5e:	d21a      	bcs.n	b4a96 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5e>
            char *p = (char *)savedDataHeader;
   b4a60:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   b4a62:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   b4a64:	4629      	mov	r1, r5
   b4a66:	4638      	mov	r0, r7
   b4a68:	f002 fc71 	bl	b734e <strcmp>
   b4a6c:	b188      	cbz	r0, b4a92 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x5a>
                memset(p, 0, size);
   b4a6e:	4642      	mov	r2, r8
   b4a70:	2100      	movs	r1, #0
   b4a72:	4628      	mov	r0, r5
   b4a74:	f002 fc1e 	bl	b72b4 <memset>
                strcpy(p, value);
   b4a78:	4639      	mov	r1, r7
   b4a7a:	4628      	mov	r0, r5
   b4a7c:	f002 fc71 	bl	b7362 <strcpy>
                savedDataHeader->hash = getHash();
   b4a80:	4620      	mov	r0, r4
   b4a82:	68a5      	ldr	r5, [r4, #8]
   b4a84:	f7ff ffc0 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4a88:	60a8      	str	r0, [r5, #8]
                saveOrDefer();
   b4a8a:	6823      	ldr	r3, [r4, #0]
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	691b      	ldr	r3, [r3, #16]
   b4a90:	4798      	blx	r3
            result = true;
   b4a92:	2501      	movs	r5, #1
   b4a94:	e000      	b.n	b4a98 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x60>
    bool result = false;
   b4a96:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   b4a98:	6860      	ldr	r0, [r4, #4]
   b4a9a:	f7ff ff48 	bl	b492e <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b4a9e:	4628      	mov	r0, r5
   b4aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4aa4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b4aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4aa6:	460d      	mov	r5, r1
   b4aa8:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b4aaa:	f7ff ffad 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b4aae:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b4ab0:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b4ab2:	d923      	bls.n	b4afc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b4ab4:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b4ab6:	6922      	ldr	r2, [r4, #16]
   b4ab8:	6819      	ldr	r1, [r3, #0]
   b4aba:	4291      	cmp	r1, r2
   b4abc:	d11f      	bne.n	b4afe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b4abe:	8899      	ldrh	r1, [r3, #4]
   b4ac0:	8aa2      	ldrh	r2, [r4, #20]
   b4ac2:	4291      	cmp	r1, r2
   b4ac4:	d11b      	bne.n	b4afe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b4ac6:	88d9      	ldrh	r1, [r3, #6]
   b4ac8:	b2aa      	uxth	r2, r5
   b4aca:	4291      	cmp	r1, r2
   b4acc:	d817      	bhi.n	b4afe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b4ace:	689a      	ldr	r2, [r3, #8]
   b4ad0:	4282      	cmp	r2, r0
   b4ad2:	d114      	bne.n	b4afe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b4ad4:	68e2      	ldr	r2, [r4, #12]
   b4ad6:	42aa      	cmp	r2, r5
   b4ad8:	d905      	bls.n	b4ae6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b4ada:	2100      	movs	r1, #0
   b4adc:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b4ade:	68e2      	ldr	r2, [r4, #12]
   b4ae0:	3501      	adds	r5, #1
   b4ae2:	42aa      	cmp	r2, r5
   b4ae4:	d8fa      	bhi.n	b4adc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b4ae6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b4aea:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b4aec:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b4aee:	68a5      	ldr	r5, [r4, #8]
   b4af0:	f7ff ff8a 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4af4:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b4af6:	2001      	movs	r0, #1
}
   b4af8:	b002      	add	sp, #8
   b4afa:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b4afc:	b19d      	cbz	r5, b4b26 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b4afe:	68a1      	ldr	r1, [r4, #8]
   b4b00:	680a      	ldr	r2, [r1, #0]
   b4b02:	b192      	cbz	r2, b4b2a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b4b04:	6888      	ldr	r0, [r1, #8]
   b4b06:	888b      	ldrh	r3, [r1, #4]
   b4b08:	9001      	str	r0, [sp, #4]
   b4b0a:	88c9      	ldrh	r1, [r1, #6]
   b4b0c:	4808      	ldr	r0, [pc, #32]	; (b4b30 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b4b0e:	9100      	str	r1, [sp, #0]
   b4b10:	4908      	ldr	r1, [pc, #32]	; (b4b34 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b4b12:	f7ff ff0e 	bl	b4932 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b4b16:	e9cd 5600 	strd	r5, r6, [sp]
   b4b1a:	8aa3      	ldrh	r3, [r4, #20]
   b4b1c:	6922      	ldr	r2, [r4, #16]
   b4b1e:	4906      	ldr	r1, [pc, #24]	; (b4b38 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b4b20:	4803      	ldr	r0, [pc, #12]	; (b4b30 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b4b22:	f7ff ff06 	bl	b4932 <_ZNK5spark6Logger5traceEPKcz>
   b4b26:	2000      	movs	r0, #0
   b4b28:	e7e6      	b.n	b4af8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b4b2a:	4610      	mov	r0, r2
   b4b2c:	e7e4      	b.n	b4af8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b4b2e:	bf00      	nop
   b4b30:	2003e6b0 	.word	0x2003e6b0
   b4b34:	000b76c4 	.word	0x000b76c4
   b4b38:	000b76f5 	.word	0x000b76f5

000b4b3c <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b4b3c:	b538      	push	{r3, r4, r5, lr}
   b4b3e:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b4b40:	68c2      	ldr	r2, [r0, #12]
   b4b42:	6880      	ldr	r0, [r0, #8]
   b4b44:	2100      	movs	r1, #0
   b4b46:	f002 fbb5 	bl	b72b4 <memset>
    savedDataHeader->magic = savedDataMagic;
   b4b4a:	68a3      	ldr	r3, [r4, #8]
   b4b4c:	6922      	ldr	r2, [r4, #16]
   b4b4e:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b4b50:	68a3      	ldr	r3, [r4, #8]
   b4b52:	8aa2      	ldrh	r2, [r4, #20]
   b4b54:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b4b56:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b4b5a:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b4b5c:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b4b5e:	68a5      	ldr	r5, [r4, #8]
   b4b60:	f7ff ff52 	bl	b4a08 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b4b64:	60a8      	str	r0, [r5, #8]
}
   b4b66:	bd38      	pop	{r3, r4, r5, pc}

000b4b68 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <os_mutex_recursive_create+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030248 	.word	0x00030248

000b4b78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <os_mutex_recursive_destroy+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	00030248 	.word	0x00030248

000b4b88 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <os_mutex_recursive_lock+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	00030248 	.word	0x00030248

000b4b98 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <os_mutex_recursive_unlock+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	00030248 	.word	0x00030248

000b4ba8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <HAL_RNG_GetRandomNumber+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	685b      	ldr	r3, [r3, #4]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030218 	.word	0x00030218

000b4bb8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <HAL_Delay_Microseconds+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	68db      	ldr	r3, [r3, #12]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030218 	.word	0x00030218

000b4bc8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	695b      	ldr	r3, [r3, #20]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030218 	.word	0x00030218

000b4bd8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_timer_millis+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030218 	.word	0x00030218

000b4be8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <hal_i2c_begin+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	68db      	ldr	r3, [r3, #12]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030228 	.word	0x00030228

000b4bf8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <hal_i2c_begin_transmission+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	699b      	ldr	r3, [r3, #24]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030228 	.word	0x00030228

000b4c08 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <hal_i2c_end_transmission+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	69db      	ldr	r3, [r3, #28]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030228 	.word	0x00030228

000b4c18 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <hal_i2c_write+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	6a1b      	ldr	r3, [r3, #32]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030228 	.word	0x00030228

000b4c28 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <hal_i2c_available+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030228 	.word	0x00030228

000b4c38 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <hal_i2c_read+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030228 	.word	0x00030228

000b4c48 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <hal_i2c_peek+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030228 	.word	0x00030228

000b4c58 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <hal_i2c_flush+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030228 	.word	0x00030228

000b4c68 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <hal_i2c_init+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030228 	.word	0x00030228

000b4c78 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <hal_i2c_lock+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030228 	.word	0x00030228

000b4c88 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <hal_i2c_unlock+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030228 	.word	0x00030228

000b4c98 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <hal_i2c_request_ex+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030228 	.word	0x00030228

000b4ca8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <inet_inet_ntop+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	695b      	ldr	r3, [r3, #20]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030264 	.word	0x00030264

000b4cb8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <netdb_freeaddrinfo+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	689b      	ldr	r3, [r3, #8]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030268 	.word	0x00030268

000b4cc8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <netdb_getaddrinfo+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	68db      	ldr	r3, [r3, #12]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030268 	.word	0x00030268

000b4cd8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <hal_usart_end+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	689b      	ldr	r3, [r3, #8]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	0003023c 	.word	0x0003023c

000b4ce8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <hal_usart_write+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	68db      	ldr	r3, [r3, #12]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	0003023c 	.word	0x0003023c

000b4cf8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <hal_usart_available+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	691b      	ldr	r3, [r3, #16]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	0003023c 	.word	0x0003023c

000b4d08 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <hal_usart_read+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	695b      	ldr	r3, [r3, #20]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	0003023c 	.word	0x0003023c

000b4d18 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <hal_usart_peek+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	699b      	ldr	r3, [r3, #24]
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003023c 	.word	0x0003023c

000b4d28 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <hal_usart_flush+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	69db      	ldr	r3, [r3, #28]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003023c 	.word	0x0003023c

000b4d38 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <hal_usart_available_data_for_write+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	0003023c 	.word	0x0003023c

000b4d48 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <hal_usart_begin_config+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	0003023c 	.word	0x0003023c

000b4d58 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <hal_usart_init_ex+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	0003023c 	.word	0x0003023c

000b4d68 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <HAL_USB_USART_Init+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	681b      	ldr	r3, [r3, #0]
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	0003024c 	.word	0x0003024c

000b4d78 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <HAL_USB_USART_Begin+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	685b      	ldr	r3, [r3, #4]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	0003024c 	.word	0x0003024c

000b4d88 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <HAL_USB_USART_End+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	689b      	ldr	r3, [r3, #8]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	0003024c 	.word	0x0003024c

000b4d98 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <HAL_USB_USART_Available_Data+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	691b      	ldr	r3, [r3, #16]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	0003024c 	.word	0x0003024c

000b4da8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	695b      	ldr	r3, [r3, #20]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	0003024c 	.word	0x0003024c

000b4db8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <HAL_USB_USART_Receive_Data+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	699b      	ldr	r3, [r3, #24]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	0003024c 	.word	0x0003024c

000b4dc8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <HAL_USB_USART_Send_Data+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	69db      	ldr	r3, [r3, #28]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	0003024c 	.word	0x0003024c

000b4dd8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <HAL_USB_USART_Flush_Data+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6a1b      	ldr	r3, [r3, #32]
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	0003024c 	.word	0x0003024c

000b4de8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <HAL_USB_USART_Is_Connected+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	0003024c 	.word	0x0003024c

000b4df8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <panic_+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030260 	.word	0x00030260

000b4e08 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <log_message_v+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030260 	.word	0x00030260

000b4e18 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <log_level_name+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	00030260 	.word	0x00030260

000b4e28 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <log_set_callbacks+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	00030260 	.word	0x00030260

000b4e38 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <set_system_mode+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	685b      	ldr	r3, [r3, #4]
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	00030220 	.word	0x00030220

000b4e48 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <system_thread_set_state+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030220 	.word	0x00030220

000b4e58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b03      	ldr	r3, [pc, #12]	; (b4e68 <system_ctrl_set_app_request_handler+0x10>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4e62:	9301      	str	r3, [sp, #4]
   b4e64:	bd08      	pop	{r3, pc}
   b4e66:	0000      	.short	0x0000
   b4e68:	00030220 	.word	0x00030220

000b4e6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b03      	ldr	r3, [pc, #12]	; (b4e7c <system_ctrl_set_result+0x10>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4e76:	9301      	str	r3, [sp, #4]
   b4e78:	bd08      	pop	{r3, pc}
   b4e7a:	0000      	.short	0x0000
   b4e7c:	00030220 	.word	0x00030220

000b4e80 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <spark_process+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	689b      	ldr	r3, [r3, #8]
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	00030244 	.word	0x00030244

000b4e90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4e90:	b508      	push	{r3, lr}
   b4e92:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4e94:	681b      	ldr	r3, [r3, #0]
   b4e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e98:	9301      	str	r3, [sp, #4]
   b4e9a:	bd08      	pop	{r3, pc}
   b4e9c:	00030244 	.word	0x00030244

000b4ea0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ea0:	b508      	push	{r3, lr}
   b4ea2:	4b02      	ldr	r3, [pc, #8]	; (b4eac <network_connect+0xc>)
   b4ea4:	681b      	ldr	r3, [r3, #0]
   b4ea6:	685b      	ldr	r3, [r3, #4]
   b4ea8:	9301      	str	r3, [sp, #4]
   b4eaa:	bd08      	pop	{r3, pc}
   b4eac:	00030240 	.word	0x00030240

000b4eb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <network_connecting+0xc>)
   b4eb4:	681b      	ldr	r3, [r3, #0]
   b4eb6:	689b      	ldr	r3, [r3, #8]
   b4eb8:	9301      	str	r3, [sp, #4]
   b4eba:	bd08      	pop	{r3, pc}
   b4ebc:	00030240 	.word	0x00030240

000b4ec0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <network_disconnect+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	68db      	ldr	r3, [r3, #12]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	00030240 	.word	0x00030240

000b4ed0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <network_ready+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	691b      	ldr	r3, [r3, #16]
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	00030240 	.word	0x00030240

000b4ee0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <network_on+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	695b      	ldr	r3, [r3, #20]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	00030240 	.word	0x00030240

000b4ef0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <network_off+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	699b      	ldr	r3, [r3, #24]
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	00030240 	.word	0x00030240

000b4f00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <network_listen+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	69db      	ldr	r3, [r3, #28]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	00030240 	.word	0x00030240

000b4f10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <network_listening+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	6a1b      	ldr	r3, [r3, #32]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	00030240 	.word	0x00030240

000b4f20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <network_set_listen_timeout+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030240 	.word	0x00030240

000b4f30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <network_get_listen_timeout+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030240 	.word	0x00030240

000b4f40 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <network_is_on+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	00030240 	.word	0x00030240

000b4f50 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <network_is_off+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	00030240 	.word	0x00030240

000b4f60 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <malloc+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	681b      	ldr	r3, [r3, #0]
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	0003021c 	.word	0x0003021c

000b4f70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <free+0xc>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	685b      	ldr	r3, [r3, #4]
   b4f78:	9301      	str	r3, [sp, #4]
   b4f7a:	bd08      	pop	{r3, pc}
   b4f7c:	0003021c 	.word	0x0003021c

000b4f80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4f80:	b508      	push	{r3, lr}
   b4f82:	4b02      	ldr	r3, [pc, #8]	; (b4f8c <realloc+0xc>)
   b4f84:	681b      	ldr	r3, [r3, #0]
   b4f86:	689b      	ldr	r3, [r3, #8]
   b4f88:	9301      	str	r3, [sp, #4]
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	0003021c 	.word	0x0003021c

000b4f90 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <vsnprintf+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	0003021c 	.word	0x0003021c

000b4fa0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <__errno+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	0003021c 	.word	0x0003021c

000b4fb0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <__assert_func+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	0003021c 	.word	0x0003021c

000b4fc0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <newlib_impure_ptr_callback+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	0003021c 	.word	0x0003021c

000b4fd0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4fd0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4fd2:	6843      	ldr	r3, [r0, #4]
   b4fd4:	3b01      	subs	r3, #1
    {
   b4fd6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4fd8:	6043      	str	r3, [r0, #4]
   b4fda:	b963      	cbnz	r3, b4ff6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4fdc:	6803      	ldr	r3, [r0, #0]
   b4fde:	689b      	ldr	r3, [r3, #8]
   b4fe0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4fe2:	68a3      	ldr	r3, [r4, #8]
   b4fe4:	3b01      	subs	r3, #1
   b4fe6:	60a3      	str	r3, [r4, #8]
   b4fe8:	b92b      	cbnz	r3, b4ff6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4fea:	6823      	ldr	r3, [r4, #0]
   b4fec:	4620      	mov	r0, r4
   b4fee:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ff4:	4718      	bx	r3
    }
   b4ff6:	bd10      	pop	{r4, pc}

000b4ff8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4ff8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4ffa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4ffe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5000:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5004:	42ae      	cmp	r6, r5
   b5006:	d004      	beq.n	b5012 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5008:	4628      	mov	r0, r5
   b500a:	f001 fc2d 	bl	b6868 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b500e:	3510      	adds	r5, #16
   b5010:	e7f8      	b.n	b5004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5012:	6820      	ldr	r0, [r4, #0]
   b5014:	f7ff ffac 	bl	b4f70 <free>
    AllocatorT::free(data_);
}
   b5018:	4620      	mov	r0, r4
   b501a:	bd70      	pop	{r4, r5, r6, pc}

000b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b501c:	b510      	push	{r4, lr}
   b501e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b5020:	6800      	ldr	r0, [r0, #0]
   b5022:	b108      	cbz	r0, b5028 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5024:	f7ff ffd4 	bl	b4fd0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5028:	4620      	mov	r0, r4
   b502a:	bd10      	pop	{r4, pc}

000b502c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b502c:	4802      	ldr	r0, [pc, #8]	; (b5038 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b502e:	2300      	movs	r3, #0
   b5030:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5032:	f7ff bd99 	b.w	b4b68 <os_mutex_recursive_create>
   b5036:	bf00      	nop
   b5038:	2003e668 	.word	0x2003e668

000b503c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b503c:	2200      	movs	r2, #0
   b503e:	6840      	ldr	r0, [r0, #4]
   b5040:	4611      	mov	r1, r2
   b5042:	f7ff bf45 	b.w	b4ed0 <network_ready>

000b5046 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5046:	2200      	movs	r2, #0
   b5048:	6840      	ldr	r0, [r0, #4]
   b504a:	4611      	mov	r1, r2
   b504c:	f7ff bf60 	b.w	b4f10 <network_listening>

000b5050 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5050:	2200      	movs	r2, #0
   b5052:	6840      	ldr	r0, [r0, #4]
   b5054:	4611      	mov	r1, r2
   b5056:	f7ff bf6b 	b.w	b4f30 <network_get_listen_timeout>

000b505a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b505a:	6840      	ldr	r0, [r0, #4]
   b505c:	2200      	movs	r2, #0
   b505e:	f7ff bf5f 	b.w	b4f20 <network_set_listen_timeout>

000b5062 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5062:	6840      	ldr	r0, [r0, #4]
   b5064:	2200      	movs	r2, #0
   b5066:	f081 0101 	eor.w	r1, r1, #1
   b506a:	f7ff bf49 	b.w	b4f00 <network_listen>

000b506e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b506e:	2300      	movs	r3, #0
   b5070:	6840      	ldr	r0, [r0, #4]
   b5072:	461a      	mov	r2, r3
   b5074:	4619      	mov	r1, r3
   b5076:	f7ff bf3b 	b.w	b4ef0 <network_off>

000b507a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b507a:	2300      	movs	r3, #0
   b507c:	6840      	ldr	r0, [r0, #4]
   b507e:	461a      	mov	r2, r3
   b5080:	4619      	mov	r1, r3
   b5082:	f7ff bf2d 	b.w	b4ee0 <network_on>

000b5086 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5086:	2200      	movs	r2, #0
   b5088:	6840      	ldr	r0, [r0, #4]
   b508a:	4611      	mov	r1, r2
   b508c:	f7ff bf10 	b.w	b4eb0 <network_connecting>

000b5090 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5090:	6840      	ldr	r0, [r0, #4]
   b5092:	2200      	movs	r2, #0
   b5094:	2102      	movs	r1, #2
   b5096:	f7ff bf13 	b.w	b4ec0 <network_disconnect>

000b509a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b509a:	2300      	movs	r3, #0
   b509c:	6840      	ldr	r0, [r0, #4]
   b509e:	461a      	mov	r2, r3
   b50a0:	f7ff befe 	b.w	b4ea0 <network_connect>

000b50a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b50a4:	4b08      	ldr	r3, [pc, #32]	; (b50c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b50a6:	b510      	push	{r4, lr}
   b50a8:	2428      	movs	r4, #40	; 0x28
   b50aa:	4622      	mov	r2, r4
   b50ac:	4618      	mov	r0, r3
   b50ae:	2100      	movs	r1, #0
   b50b0:	f002 f900 	bl	b72b4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b50b4:	4b05      	ldr	r3, [pc, #20]	; (b50cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b50b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b50b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b50bc:	6042      	str	r2, [r0, #4]
   b50be:	2204      	movs	r2, #4
   b50c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b50c2:	4a03      	ldr	r2, [pc, #12]	; (b50d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b50c4:	601a      	str	r2, [r3, #0]
   b50c6:	bd10      	pop	{r4, pc}
   b50c8:	2003e674 	.word	0x2003e674
   b50cc:	2003e66c 	.word	0x2003e66c
   b50d0:	000b7754 	.word	0x000b7754

000b50d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b50d4:	2200      	movs	r2, #0
   b50d6:	6840      	ldr	r0, [r0, #4]
   b50d8:	4611      	mov	r1, r2
   b50da:	f7ff bf19 	b.w	b4f10 <network_listening>

000b50de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b50de:	2200      	movs	r2, #0
   b50e0:	6840      	ldr	r0, [r0, #4]
   b50e2:	4611      	mov	r1, r2
   b50e4:	f7ff bf24 	b.w	b4f30 <network_get_listen_timeout>

000b50e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	2200      	movs	r2, #0
   b50ec:	f7ff bf18 	b.w	b4f20 <network_set_listen_timeout>

000b50f0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50f0:	6840      	ldr	r0, [r0, #4]
   b50f2:	2200      	movs	r2, #0
   b50f4:	f081 0101 	eor.w	r1, r1, #1
   b50f8:	f7ff bf02 	b.w	b4f00 <network_listen>

000b50fc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50fc:	2300      	movs	r3, #0
   b50fe:	6840      	ldr	r0, [r0, #4]
   b5100:	461a      	mov	r2, r3
   b5102:	4619      	mov	r1, r3
   b5104:	f7ff bef4 	b.w	b4ef0 <network_off>

000b5108 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5108:	2300      	movs	r3, #0
   b510a:	6840      	ldr	r0, [r0, #4]
   b510c:	461a      	mov	r2, r3
   b510e:	4619      	mov	r1, r3
   b5110:	f7ff bee6 	b.w	b4ee0 <network_on>

000b5114 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5114:	2200      	movs	r2, #0
   b5116:	6840      	ldr	r0, [r0, #4]
   b5118:	4611      	mov	r1, r2
   b511a:	f7ff bed9 	b.w	b4ed0 <network_ready>

000b511e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b511e:	2200      	movs	r2, #0
   b5120:	6840      	ldr	r0, [r0, #4]
   b5122:	4611      	mov	r1, r2
   b5124:	f7ff bec4 	b.w	b4eb0 <network_connecting>

000b5128 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5128:	6840      	ldr	r0, [r0, #4]
   b512a:	2200      	movs	r2, #0
   b512c:	2102      	movs	r1, #2
   b512e:	f7ff bec7 	b.w	b4ec0 <network_disconnect>

000b5132 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5132:	2300      	movs	r3, #0
   b5134:	6840      	ldr	r0, [r0, #4]
   b5136:	461a      	mov	r2, r3
   b5138:	f7ff beb2 	b.w	b4ea0 <network_connect>

000b513c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b513c:	4b02      	ldr	r3, [pc, #8]	; (b5148 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b513e:	2203      	movs	r2, #3
   b5140:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5142:	4a02      	ldr	r2, [pc, #8]	; (b514c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5144:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5146:	4770      	bx	lr
   b5148:	2003e69c 	.word	0x2003e69c
   b514c:	000b7790 	.word	0x000b7790

000b5150 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5150:	4770      	bx	lr

000b5152 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5154:	4606      	mov	r6, r0
   b5156:	4615      	mov	r5, r2
   b5158:	460c      	mov	r4, r1
   b515a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b515c:	42bc      	cmp	r4, r7
   b515e:	d006      	beq.n	b516e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5160:	6833      	ldr	r3, [r6, #0]
   b5162:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5166:	689b      	ldr	r3, [r3, #8]
   b5168:	4630      	mov	r0, r6
   b516a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b516c:	e7f6      	b.n	b515c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b516e:	4628      	mov	r0, r5
   b5170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5172 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5172:	7c00      	ldrb	r0, [r0, #16]
   b5174:	2200      	movs	r2, #0
   b5176:	f7ff bd4f 	b.w	b4c18 <hal_i2c_write>

000b517a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b517a:	7c00      	ldrb	r0, [r0, #16]
   b517c:	2100      	movs	r1, #0
   b517e:	f7ff bd53 	b.w	b4c28 <hal_i2c_available>

000b5182 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5182:	7c00      	ldrb	r0, [r0, #16]
   b5184:	2100      	movs	r1, #0
   b5186:	f7ff bd57 	b.w	b4c38 <hal_i2c_read>

000b518a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b518a:	7c00      	ldrb	r0, [r0, #16]
   b518c:	2100      	movs	r1, #0
   b518e:	f7ff bd5b 	b.w	b4c48 <hal_i2c_peek>

000b5192 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5192:	7c00      	ldrb	r0, [r0, #16]
   b5194:	2100      	movs	r1, #0
   b5196:	f7ff bd5f 	b.w	b4c58 <hal_i2c_flush>

000b519a <_ZN7TwoWireD0Ev>:
   b519a:	b510      	push	{r4, lr}
   b519c:	2114      	movs	r1, #20
   b519e:	4604      	mov	r4, r0
   b51a0:	f7fe ff7d 	bl	b409e <_ZdlPvj>
   b51a4:	4620      	mov	r0, r4
   b51a6:	bd10      	pop	{r4, pc}

000b51a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b51a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b51aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b51ae:	4604      	mov	r4, r0
   b51b0:	4608      	mov	r0, r1
   b51b2:	2100      	movs	r1, #0
   b51b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b51b8:	4b03      	ldr	r3, [pc, #12]	; (b51c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b51ba:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b51bc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b51be:	4611      	mov	r1, r2
   b51c0:	f7ff fd52 	bl	b4c68 <hal_i2c_init>
}
   b51c4:	4620      	mov	r0, r4
   b51c6:	bd10      	pop	{r4, pc}
   b51c8:	000b77cc 	.word	0x000b77cc

000b51cc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b51cc:	2300      	movs	r3, #0
   b51ce:	7c00      	ldrb	r0, [r0, #16]
   b51d0:	461a      	mov	r2, r3
   b51d2:	4619      	mov	r1, r3
   b51d4:	f7ff bd08 	b.w	b4be8 <hal_i2c_begin>

000b51d8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b51d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b51da:	2200      	movs	r2, #0
   b51dc:	2314      	movs	r3, #20
   b51de:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b51e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b51e6:	780b      	ldrb	r3, [r1, #0]
   b51e8:	f88d 3008 	strb.w	r3, [sp, #8]
   b51ec:	684b      	ldr	r3, [r1, #4]
   b51ee:	9303      	str	r3, [sp, #12]
   b51f0:	68cb      	ldr	r3, [r1, #12]
   b51f2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b51f4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b51f6:	7a0b      	ldrb	r3, [r1, #8]
   b51f8:	9305      	str	r3, [sp, #20]
   b51fa:	a901      	add	r1, sp, #4
   b51fc:	f7ff fd4c 	bl	b4c98 <hal_i2c_request_ex>
}
   b5200:	b007      	add	sp, #28
   b5202:	f85d fb04 	ldr.w	pc, [sp], #4

000b5206 <_ZN7TwoWire11requestFromEhjh>:
{
   b5206:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5208:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b520a:	f88d 1000 	strb.w	r1, [sp]
   b520e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5212:	9103      	str	r1, [sp, #12]
   b5214:	bf18      	it	ne
   b5216:	2301      	movne	r3, #1
   b5218:	4669      	mov	r1, sp
    size_ = size;
   b521a:	9201      	str	r2, [sp, #4]
   b521c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5220:	f7ff ffda 	bl	b51d8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5224:	b005      	add	sp, #20
   b5226:	f85d fb04 	ldr.w	pc, [sp], #4

000b522a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b522a:	7c00      	ldrb	r0, [r0, #16]
   b522c:	2200      	movs	r2, #0
   b522e:	f7ff bce3 	b.w	b4bf8 <hal_i2c_begin_transmission>

000b5232 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5232:	b2c9      	uxtb	r1, r1
   b5234:	f7ff bff9 	b.w	b522a <_ZN7TwoWire17beginTransmissionEh>

000b5238 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5238:	7c00      	ldrb	r0, [r0, #16]
   b523a:	2200      	movs	r2, #0
   b523c:	f7ff bce4 	b.w	b4c08 <hal_i2c_end_transmission>

000b5240 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b5240:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b5242:	2100      	movs	r1, #0
   b5244:	7c00      	ldrb	r0, [r0, #16]
   b5246:	f7ff fd17 	bl	b4c78 <hal_i2c_lock>
}
   b524a:	fab0 f080 	clz	r0, r0
   b524e:	0940      	lsrs	r0, r0, #5
   b5250:	bd08      	pop	{r3, pc}

000b5252 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b5252:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b5254:	2100      	movs	r1, #0
   b5256:	7c00      	ldrb	r0, [r0, #16]
   b5258:	f7ff fd16 	bl	b4c88 <hal_i2c_unlock>
}
   b525c:	fab0 f080 	clz	r0, r0
   b5260:	0940      	lsrs	r0, r0, #5
   b5262:	bd08      	pop	{r3, pc}

000b5264 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5264:	4770      	bx	lr

000b5266 <_ZN9IPAddressD0Ev>:
   b5266:	b510      	push	{r4, lr}
   b5268:	2118      	movs	r1, #24
   b526a:	4604      	mov	r4, r0
   b526c:	f7fe ff17 	bl	b409e <_ZdlPvj>
   b5270:	4620      	mov	r0, r4
   b5272:	bd10      	pop	{r4, pc}

000b5274 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5274:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5276:	7d03      	ldrb	r3, [r0, #20]
   b5278:	2b06      	cmp	r3, #6
{
   b527a:	b08d      	sub	sp, #52	; 0x34
   b527c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b527e:	f100 0704 	add.w	r7, r0, #4
   b5282:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5286:	d012      	beq.n	b52ae <_ZNK9IPAddress7printToER5Print+0x3a>
   b5288:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b528c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5290:	220a      	movs	r2, #10
   b5292:	4630      	mov	r0, r6
   b5294:	f001 fa93 	bl	b67be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5298:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b529a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b529c:	d019      	beq.n	b52d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b529e:	2c00      	cmp	r4, #0
   b52a0:	d0f4      	beq.n	b528c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b52a2:	212e      	movs	r1, #46	; 0x2e
   b52a4:	4630      	mov	r0, r6
   b52a6:	f001 fa7b 	bl	b67a0 <_ZN5Print5printEc>
   b52aa:	4404      	add	r4, r0
   b52ac:	e7ee      	b.n	b528c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b52ae:	232f      	movs	r3, #47	; 0x2f
   b52b0:	466a      	mov	r2, sp
   b52b2:	4639      	mov	r1, r7
   b52b4:	200a      	movs	r0, #10
		buf[0] = 0;
   b52b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b52ba:	f7ff fcf5 	bl	b4ca8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b52be:	4668      	mov	r0, sp
   b52c0:	f002 f857 	bl	b7372 <strlen>
   b52c4:	6833      	ldr	r3, [r6, #0]
   b52c6:	4602      	mov	r2, r0
   b52c8:	68db      	ldr	r3, [r3, #12]
   b52ca:	4669      	mov	r1, sp
   b52cc:	4630      	mov	r0, r6
   b52ce:	4798      	blx	r3
   b52d0:	4604      	mov	r4, r0
    }
    return n;
}
   b52d2:	4620      	mov	r0, r4
   b52d4:	b00d      	add	sp, #52	; 0x34
   b52d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b52d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b52d8:	b510      	push	{r4, lr}
   b52da:	4b05      	ldr	r3, [pc, #20]	; (b52f0 <_ZN9IPAddressC1Ev+0x18>)
   b52dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b52de:	2211      	movs	r2, #17
   b52e0:	f840 3b04 	str.w	r3, [r0], #4
   b52e4:	2100      	movs	r1, #0
   b52e6:	f001 ffe5 	bl	b72b4 <memset>
}
   b52ea:	4620      	mov	r0, r4
   b52ec:	bd10      	pop	{r4, pc}
   b52ee:	bf00      	nop
   b52f0:	000b77f4 	.word	0x000b77f4

000b52f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52f4:	4603      	mov	r3, r0
   b52f6:	4a07      	ldr	r2, [pc, #28]	; (b5314 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52f8:	b510      	push	{r4, lr}
   b52fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52fe:	f101 0210 	add.w	r2, r1, #16
   b5302:	f851 4b04 	ldr.w	r4, [r1], #4
   b5306:	f843 4b04 	str.w	r4, [r3], #4
   b530a:	4291      	cmp	r1, r2
   b530c:	d1f9      	bne.n	b5302 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b530e:	780a      	ldrb	r2, [r1, #0]
   b5310:	701a      	strb	r2, [r3, #0]
}
   b5312:	bd10      	pop	{r4, pc}
   b5314:	000b77f4 	.word	0x000b77f4

000b5318 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5318:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b531a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b531e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5322:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5326:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b532a:	2304      	movs	r3, #4
   b532c:	6041      	str	r1, [r0, #4]
   b532e:	7503      	strb	r3, [r0, #20]
}
   b5330:	bd10      	pop	{r4, pc}
	...

000b5334 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5334:	b507      	push	{r0, r1, r2, lr}
   b5336:	4b06      	ldr	r3, [pc, #24]	; (b5350 <_ZN9IPAddressC1EPKh+0x1c>)
   b5338:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b533a:	78cb      	ldrb	r3, [r1, #3]
   b533c:	9300      	str	r3, [sp, #0]
   b533e:	788b      	ldrb	r3, [r1, #2]
   b5340:	784a      	ldrb	r2, [r1, #1]
   b5342:	7809      	ldrb	r1, [r1, #0]
   b5344:	f7ff ffe8 	bl	b5318 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5348:	b003      	add	sp, #12
   b534a:	f85d fb04 	ldr.w	pc, [sp], #4
   b534e:	bf00      	nop
   b5350:	000b77f4 	.word	0x000b77f4

000b5354 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5354:	f100 0310 	add.w	r3, r0, #16
   b5358:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b535a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b535e:	2901      	cmp	r1, #1
   b5360:	4618      	mov	r0, r3
   b5362:	d108      	bne.n	b5376 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5364:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b5368:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b536c:	3a01      	subs	r2, #1
   b536e:	f103 0310 	add.w	r3, r3, #16
   b5372:	d1f2      	bne.n	b535a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5374:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b5376:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b5378:	bf04      	itt	eq
   b537a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b537e:	1852      	addeq	r2, r2, r1
   b5380:	e7f4      	b.n	b536c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5382 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5382:	b40e      	push	{r1, r2, r3}
   b5384:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5386:	b088      	sub	sp, #32
   b5388:	af00      	add	r7, sp, #0
   b538a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b538e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5390:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5394:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5396:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5398:	462b      	mov	r3, r5
   b539a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b539c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b539e:	f7ff fdf7 	bl	b4f90 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b53a2:	280f      	cmp	r0, #15
   b53a4:	687a      	ldr	r2, [r7, #4]
   b53a6:	d91a      	bls.n	b53de <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b53a8:	f100 0308 	add.w	r3, r0, #8
   b53ac:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b53b0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b53b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b53b6:	1c41      	adds	r1, r0, #1
   b53b8:	462b      	mov	r3, r5
   b53ba:	4668      	mov	r0, sp
        va_start(args, fmt);
   b53bc:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b53be:	f7ff fde7 	bl	b4f90 <vsnprintf>
        if (n > 0) {
   b53c2:	1e02      	subs	r2, r0, #0
   b53c4:	dd04      	ble.n	b53d0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b53c6:	6823      	ldr	r3, [r4, #0]
   b53c8:	4669      	mov	r1, sp
   b53ca:	689b      	ldr	r3, [r3, #8]
   b53cc:	4620      	mov	r0, r4
   b53ce:	4798      	blx	r3
   b53d0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b53d2:	3720      	adds	r7, #32
   b53d4:	46bd      	mov	sp, r7
   b53d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b53da:	b003      	add	sp, #12
   b53dc:	4770      	bx	lr
    } else if (n > 0) {
   b53de:	2800      	cmp	r0, #0
   b53e0:	d0f7      	beq.n	b53d2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b53e2:	6823      	ldr	r3, [r4, #0]
   b53e4:	4602      	mov	r2, r0
   b53e6:	689b      	ldr	r3, [r3, #8]
   b53e8:	f107 0110 	add.w	r1, r7, #16
   b53ec:	4620      	mov	r0, r4
   b53ee:	4798      	blx	r3
}
   b53f0:	e7ef      	b.n	b53d2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b53f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b53f2:	b538      	push	{r3, r4, r5, lr}
   b53f4:	680b      	ldr	r3, [r1, #0]
   b53f6:	6003      	str	r3, [r0, #0]
   b53f8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b53fa:	6843      	ldr	r3, [r0, #4]
   b53fc:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b53fe:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5400:	d008      	beq.n	b5414 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b5402:	b115      	cbz	r5, b540a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5404:	686b      	ldr	r3, [r5, #4]
   b5406:	3301      	adds	r3, #1
   b5408:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b540a:	6860      	ldr	r0, [r4, #4]
   b540c:	b108      	cbz	r0, b5412 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b540e:	f7ff fddf 	bl	b4fd0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5412:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5414:	bd38      	pop	{r3, r4, r5, pc}

000b5416 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5416:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5418:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b541a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b541e:	689b      	ldr	r3, [r3, #8]
   b5420:	2201      	movs	r2, #1
   b5422:	f10d 0107 	add.w	r1, sp, #7
   b5426:	4798      	blx	r3
}
   b5428:	b003      	add	sp, #12
   b542a:	f85d fb04 	ldr.w	pc, [sp], #4

000b542e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b542e:	460b      	mov	r3, r1
   b5430:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b5432:	2200      	movs	r2, #0
   b5434:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5436:	e9c0 2200 	strd	r2, r2, [r0]
   b543a:	4604      	mov	r4, r0
        t_ = t;
   b543c:	6083      	str	r3, [r0, #8]
    if (t) {
   b543e:	b90b      	cbnz	r3, b5444 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5440:	4620      	mov	r0, r4
   b5442:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5444:	f7ff ffd5 	bl	b53f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5448:	e7fa      	b.n	b5440 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b544a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b544a:	6883      	ldr	r3, [r0, #8]
   b544c:	b1eb      	cbz	r3, b548a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b544e:	781a      	ldrb	r2, [r3, #0]
   b5450:	2a03      	cmp	r2, #3
   b5452:	d81a      	bhi.n	b548a <_ZNK5spark9JSONValue4typeEv+0x40>
   b5454:	e8df f002 	tbb	[pc, r2]
   b5458:	1b021704 	.word	0x1b021704
   b545c:	2005      	movs	r0, #5
   b545e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5460:	6802      	ldr	r2, [r0, #0]
   b5462:	685b      	ldr	r3, [r3, #4]
   b5464:	6852      	ldr	r2, [r2, #4]
   b5466:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5468:	282d      	cmp	r0, #45	; 0x2d
   b546a:	d012      	beq.n	b5492 <_ZNK5spark9JSONValue4typeEv+0x48>
   b546c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5470:	2b09      	cmp	r3, #9
   b5472:	d90e      	bls.n	b5492 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b5474:	2874      	cmp	r0, #116	; 0x74
   b5476:	d00e      	beq.n	b5496 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5478:	2866      	cmp	r0, #102	; 0x66
   b547a:	d00c      	beq.n	b5496 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b547c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5480:	4258      	negs	r0, r3
   b5482:	4158      	adcs	r0, r3
   b5484:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b5486:	2006      	movs	r0, #6
   b5488:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b548a:	2000      	movs	r0, #0
   b548c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b548e:	2004      	movs	r0, #4
   b5490:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b5492:	2003      	movs	r0, #3
   b5494:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b5496:	2002      	movs	r0, #2
}
   b5498:	4770      	bx	lr

000b549a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b549a:	b510      	push	{r4, lr}
   b549c:	4604      	mov	r4, r0
    switch (type()) {
   b549e:	f7ff ffd4 	bl	b544a <_ZNK5spark9JSONValue4typeEv>
   b54a2:	2802      	cmp	r0, #2
   b54a4:	d00e      	beq.n	b54c4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b54a6:	1ec3      	subs	r3, r0, #3
   b54a8:	b2db      	uxtb	r3, r3
   b54aa:	2b01      	cmp	r3, #1
   b54ac:	d814      	bhi.n	b54d8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b54ae:	6822      	ldr	r2, [r4, #0]
   b54b0:	68a3      	ldr	r3, [r4, #8]
   b54b2:	6850      	ldr	r0, [r2, #4]
   b54b4:	685b      	ldr	r3, [r3, #4]
}
   b54b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b54ba:	220a      	movs	r2, #10
   b54bc:	2100      	movs	r1, #0
   b54be:	4418      	add	r0, r3
   b54c0:	f002 b80a 	b.w	b74d8 <strtol>
        const char* const s = d_->json + t_->start;
   b54c4:	6822      	ldr	r2, [r4, #0]
   b54c6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b54c8:	6852      	ldr	r2, [r2, #4]
   b54ca:	685b      	ldr	r3, [r3, #4]
   b54cc:	5cd0      	ldrb	r0, [r2, r3]
   b54ce:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b54d2:	4258      	negs	r0, r3
   b54d4:	4158      	adcs	r0, r3
}
   b54d6:	bd10      	pop	{r4, pc}
    switch (type()) {
   b54d8:	2000      	movs	r0, #0
   b54da:	e7fc      	b.n	b54d6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b54dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b54dc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b54de:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b54e0:	e9c0 3300 	strd	r3, r3, [r0]
   b54e4:	4604      	mov	r4, r0
        n_(0) {
   b54e6:	480e      	ldr	r0, [pc, #56]	; (b5520 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b54e8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b54ec:	b1a9      	cbz	r1, b551a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b54ee:	780b      	ldrb	r3, [r1, #0]
   b54f0:	2b03      	cmp	r3, #3
   b54f2:	d006      	beq.n	b5502 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b54f4:	b98b      	cbnz	r3, b551a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b54f6:	6813      	ldr	r3, [r2, #0]
   b54f8:	6858      	ldr	r0, [r3, #4]
   b54fa:	684b      	ldr	r3, [r1, #4]
   b54fc:	5cc3      	ldrb	r3, [r0, r3]
   b54fe:	2b6e      	cmp	r3, #110	; 0x6e
   b5500:	d007      	beq.n	b5512 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b5502:	6813      	ldr	r3, [r2, #0]
   b5504:	684d      	ldr	r5, [r1, #4]
   b5506:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5508:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b550a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b550c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b550e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5510:	60e3      	str	r3, [r4, #12]
   b5512:	4611      	mov	r1, r2
   b5514:	4620      	mov	r0, r4
   b5516:	f7ff ff6c 	bl	b53f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b551a:	4620      	mov	r0, r4
   b551c:	bd38      	pop	{r3, r4, r5, pc}
   b551e:	bf00      	nop
   b5520:	000b7866 	.word	0x000b7866

000b5524 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5524:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5526:	2500      	movs	r5, #0
   b5528:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b552a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b552e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5532:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5536:	4604      	mov	r4, r0
   b5538:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b553a:	b14b      	cbz	r3, b5550 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b553c:	781a      	ldrb	r2, [r3, #0]
   b553e:	2a01      	cmp	r2, #1
   b5540:	d106      	bne.n	b5550 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b5542:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5546:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5548:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b554a:	6143      	str	r3, [r0, #20]
   b554c:	f7ff ff51 	bl	b53f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5550:	4620      	mov	r0, r4
   b5552:	bd38      	pop	{r3, r4, r5, pc}

000b5554 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5554:	b510      	push	{r4, lr}
    if (!n_) {
   b5556:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5558:	4604      	mov	r4, r0
    if (!n_) {
   b555a:	b163      	cbz	r3, b5576 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b555c:	6880      	ldr	r0, [r0, #8]
   b555e:	60e0      	str	r0, [r4, #12]
    --n_;
   b5560:	3b01      	subs	r3, #1
    ++t_;
   b5562:	3010      	adds	r0, #16
   b5564:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5566:	6120      	str	r0, [r4, #16]
    --n_;
   b5568:	6163      	str	r3, [r4, #20]
    if (n_) {
   b556a:	b113      	cbz	r3, b5572 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b556c:	f7ff fef2 	bl	b5354 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5570:	60a0      	str	r0, [r4, #8]
    return true;
   b5572:	2001      	movs	r0, #1
   b5574:	e000      	b.n	b5578 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b5576:	4618      	mov	r0, r3
}
   b5578:	bd10      	pop	{r4, pc}

000b557a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b557a:	b510      	push	{r4, lr}
    write('}');
   b557c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b557e:	4604      	mov	r4, r0
    write('}');
   b5580:	f7ff ff49 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b5584:	2301      	movs	r3, #1
   b5586:	7123      	strb	r3, [r4, #4]
}
   b5588:	4620      	mov	r0, r4
   b558a:	bd10      	pop	{r4, pc}

000b558c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b558c:	b508      	push	{r3, lr}
    switch (state_) {
   b558e:	7903      	ldrb	r3, [r0, #4]
   b5590:	2b01      	cmp	r3, #1
   b5592:	d002      	beq.n	b559a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b5594:	2b02      	cmp	r3, #2
   b5596:	d004      	beq.n	b55a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5598:	bd08      	pop	{r3, pc}
        write(',');
   b559a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b559c:	f7ff ff3b 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
}
   b55a0:	e7fa      	b.n	b5598 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b55a2:	213a      	movs	r1, #58	; 0x3a
   b55a4:	e7fa      	b.n	b559c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b55a6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b55a6:	b510      	push	{r4, lr}
   b55a8:	4604      	mov	r4, r0
    writeSeparator();
   b55aa:	f7ff ffef 	bl	b558c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b55ae:	4620      	mov	r0, r4
   b55b0:	217b      	movs	r1, #123	; 0x7b
   b55b2:	f7ff ff30 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b55b6:	2300      	movs	r3, #0
   b55b8:	7123      	strb	r3, [r4, #4]
}
   b55ba:	4620      	mov	r0, r4
   b55bc:	bd10      	pop	{r4, pc}
	...

000b55c0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b55c0:	b513      	push	{r0, r1, r4, lr}
   b55c2:	4604      	mov	r4, r0
   b55c4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b55c6:	f7ff ffe1 	bl	b558c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b55ca:	6823      	ldr	r3, [r4, #0]
   b55cc:	9a01      	ldr	r2, [sp, #4]
   b55ce:	68db      	ldr	r3, [r3, #12]
   b55d0:	4903      	ldr	r1, [pc, #12]	; (b55e0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b55d2:	4620      	mov	r0, r4
   b55d4:	4798      	blx	r3
    state_ = NEXT;
   b55d6:	2301      	movs	r3, #1
}
   b55d8:	4620      	mov	r0, r4
    state_ = NEXT;
   b55da:	7123      	strb	r3, [r4, #4]
}
   b55dc:	b002      	add	sp, #8
   b55de:	bd10      	pop	{r4, pc}
   b55e0:	000b7800 	.word	0x000b7800

000b55e4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b55e4:	b513      	push	{r0, r1, r4, lr}
   b55e6:	4604      	mov	r4, r0
   b55e8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b55ea:	f7ff ffcf 	bl	b558c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b55ee:	6823      	ldr	r3, [r4, #0]
   b55f0:	9a01      	ldr	r2, [sp, #4]
   b55f2:	68db      	ldr	r3, [r3, #12]
   b55f4:	4903      	ldr	r1, [pc, #12]	; (b5604 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b55f6:	4620      	mov	r0, r4
   b55f8:	4798      	blx	r3
    state_ = NEXT;
   b55fa:	2301      	movs	r3, #1
}
   b55fc:	4620      	mov	r0, r4
    state_ = NEXT;
   b55fe:	7123      	strb	r3, [r4, #4]
}
   b5600:	b002      	add	sp, #8
   b5602:	bd10      	pop	{r4, pc}
   b5604:	000b7803 	.word	0x000b7803

000b5608 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b560c:	460d      	mov	r5, r1
    write('"');
   b560e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5610:	4690      	mov	r8, r2
   b5612:	4604      	mov	r4, r0
    write('"');
   b5614:	f7ff feff 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5618:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b56c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b561c:	44a8      	add	r8, r5
    const char *s = str;
   b561e:	462f      	mov	r7, r5
    while (s != end) {
   b5620:	4547      	cmp	r7, r8
   b5622:	46ba      	mov	sl, r7
   b5624:	d03d      	beq.n	b56a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5626:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b562a:	2e22      	cmp	r6, #34	; 0x22
   b562c:	d006      	beq.n	b563c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b562e:	2e5c      	cmp	r6, #92	; 0x5c
   b5630:	d004      	beq.n	b563c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5632:	4630      	mov	r0, r6
   b5634:	f001 fe0e 	bl	b7254 <isprint>
   b5638:	2800      	cmp	r0, #0
   b563a:	d1f1      	bne.n	b5620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b563c:	6823      	ldr	r3, [r4, #0]
   b563e:	ebaa 0205 	sub.w	r2, sl, r5
   b5642:	689b      	ldr	r3, [r3, #8]
   b5644:	4629      	mov	r1, r5
   b5646:	4620      	mov	r0, r4
   b5648:	4798      	blx	r3
            write('\\');
   b564a:	215c      	movs	r1, #92	; 0x5c
   b564c:	4620      	mov	r0, r4
   b564e:	f7ff fee2 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5652:	2e0d      	cmp	r6, #13
   b5654:	d80a      	bhi.n	b566c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5656:	2e07      	cmp	r6, #7
   b5658:	d91c      	bls.n	b5694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b565a:	f1a6 0308 	sub.w	r3, r6, #8
   b565e:	2b05      	cmp	r3, #5
   b5660:	d818      	bhi.n	b5694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5662:	e8df f003 	tbb	[pc, r3]
   b5666:	0f0d      	.short	0x0f0d
   b5668:	15131711 	.word	0x15131711
   b566c:	2e22      	cmp	r6, #34	; 0x22
   b566e:	d001      	beq.n	b5674 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5670:	2e5c      	cmp	r6, #92	; 0x5c
   b5672:	d10f      	bne.n	b5694 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5674:	4631      	mov	r1, r6
                write('b');
   b5676:	4620      	mov	r0, r4
   b5678:	f7ff fecd 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b567c:	463d      	mov	r5, r7
    while (s != end) {
   b567e:	e7cf      	b.n	b5620 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5680:	2162      	movs	r1, #98	; 0x62
   b5682:	e7f8      	b.n	b5676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5684:	2174      	movs	r1, #116	; 0x74
   b5686:	e7f6      	b.n	b5676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5688:	216e      	movs	r1, #110	; 0x6e
   b568a:	e7f4      	b.n	b5676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b568c:	2166      	movs	r1, #102	; 0x66
   b568e:	e7f2      	b.n	b5676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5690:	2172      	movs	r1, #114	; 0x72
   b5692:	e7f0      	b.n	b5676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5694:	6823      	ldr	r3, [r4, #0]
   b5696:	4632      	mov	r2, r6
   b5698:	68db      	ldr	r3, [r3, #12]
   b569a:	4649      	mov	r1, r9
   b569c:	4620      	mov	r0, r4
   b569e:	4798      	blx	r3
                break;
   b56a0:	e7ec      	b.n	b567c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b56a2:	42bd      	cmp	r5, r7
   b56a4:	d005      	beq.n	b56b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b56a6:	6823      	ldr	r3, [r4, #0]
   b56a8:	1b7a      	subs	r2, r7, r5
   b56aa:	689b      	ldr	r3, [r3, #8]
   b56ac:	4629      	mov	r1, r5
   b56ae:	4620      	mov	r0, r4
   b56b0:	4798      	blx	r3
    }
    write('"');
   b56b2:	2122      	movs	r1, #34	; 0x22
   b56b4:	4620      	mov	r0, r4
   b56b6:	f7ff feae 	bl	b5416 <_ZN5spark10JSONWriter5writeEc>
}
   b56ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b56be:	bf00      	nop
   b56c0:	000b7806 	.word	0x000b7806

000b56c4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b56c4:	b513      	push	{r0, r1, r4, lr}
   b56c6:	4604      	mov	r4, r0
   b56c8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b56cc:	f7ff ff5e 	bl	b558c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b56d0:	4620      	mov	r0, r4
   b56d2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b56d6:	f7ff ff97 	bl	b5608 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b56da:	2302      	movs	r3, #2
}
   b56dc:	4620      	mov	r0, r4
    state_ = VALUE;
   b56de:	7123      	strb	r3, [r4, #4]
}
   b56e0:	b002      	add	sp, #8
   b56e2:	bd10      	pop	{r4, pc}

000b56e4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b56e4:	b513      	push	{r0, r1, r4, lr}
   b56e6:	4604      	mov	r4, r0
   b56e8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b56ec:	f7ff ff4e 	bl	b558c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b56f0:	4620      	mov	r0, r4
   b56f2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b56f6:	f7ff ff87 	bl	b5608 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b56fa:	2301      	movs	r3, #1
}
   b56fc:	4620      	mov	r0, r4
    state_ = NEXT;
   b56fe:	7123      	strb	r3, [r4, #4]
}
   b5700:	b002      	add	sp, #8
   b5702:	bd10      	pop	{r4, pc}

000b5704 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5704:	6880      	ldr	r0, [r0, #8]
   b5706:	6803      	ldr	r3, [r0, #0]
   b5708:	68db      	ldr	r3, [r3, #12]
   b570a:	4718      	bx	r3

000b570c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b570c:	4770      	bx	lr

000b570e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b570e:	4608      	mov	r0, r1
   b5710:	b111      	cbz	r1, b5718 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5712:	680b      	ldr	r3, [r1, #0]
   b5714:	685b      	ldr	r3, [r3, #4]
   b5716:	4718      	bx	r3
}
   b5718:	4770      	bx	lr

000b571a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b571a:	4770      	bx	lr

000b571c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b571c:	4770      	bx	lr

000b571e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b571e:	4770      	bx	lr

000b5720 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5720:	4770      	bx	lr

000b5722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5722:	b538      	push	{r3, r4, r5, lr}
   b5724:	4604      	mov	r4, r0
   b5726:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5728:	6800      	ldr	r0, [r0, #0]
   b572a:	212e      	movs	r1, #46	; 0x2e
   b572c:	f001 fe05 	bl	b733a <strchrnul>
    size = s - category;
   b5730:	6823      	ldr	r3, [r4, #0]
   b5732:	1ac3      	subs	r3, r0, r3
   b5734:	602b      	str	r3, [r5, #0]
    if (size) {
   b5736:	b123      	cbz	r3, b5742 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5738:	7803      	ldrb	r3, [r0, #0]
   b573a:	b103      	cbz	r3, b573e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b573c:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b573e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5740:	6020      	str	r0, [r4, #0]
}
   b5742:	4618      	mov	r0, r3
   b5744:	bd38      	pop	{r3, r4, r5, pc}

000b5746 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5746:	b510      	push	{r4, lr}
   b5748:	210c      	movs	r1, #12
   b574a:	4604      	mov	r4, r0
   b574c:	f7fe fca7 	bl	b409e <_ZdlPvj>
   b5750:	4620      	mov	r0, r4
   b5752:	bd10      	pop	{r4, pc}

000b5754 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5754:	b510      	push	{r4, lr}
   b5756:	2104      	movs	r1, #4
   b5758:	4604      	mov	r4, r0
   b575a:	f7fe fca0 	bl	b409e <_ZdlPvj>
   b575e:	4620      	mov	r0, r4
   b5760:	bd10      	pop	{r4, pc}

000b5762 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5762:	b510      	push	{r4, lr}
   b5764:	2104      	movs	r1, #4
   b5766:	4604      	mov	r4, r0
   b5768:	f7fe fc99 	bl	b409e <_ZdlPvj>
   b576c:	4620      	mov	r0, r4
   b576e:	bd10      	pop	{r4, pc}

000b5770 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5770:	f7ff ba0a 	b.w	b4b88 <os_mutex_recursive_lock>

000b5774 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5774:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5776:	f001 fdea 	bl	b734e <strcmp>
}
   b577a:	fab0 f080 	clz	r0, r0
   b577e:	0940      	lsrs	r0, r0, #5
   b5780:	bd08      	pop	{r3, pc}

000b5782 <__tcf_1>:
   b5782:	4770      	bx	lr

000b5784 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5784:	b510      	push	{r4, lr}
   b5786:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5788:	f001 f9d8 	bl	b6b3c <_Z16_fetch_usbserialv>
   b578c:	4284      	cmp	r4, r0
   b578e:	d010      	beq.n	b57b2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5790:	f001 faee 	bl	b6d70 <_Z22__fetch_global_Serial1v>
   b5794:	4284      	cmp	r4, r0
   b5796:	d105      	bne.n	b57a4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5798:	f001 faea 	bl	b6d70 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b579c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b57a0:	f001 b965 	b.w	b6a6e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b57a4:	b12c      	cbz	r4, b57b2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b57a6:	6823      	ldr	r3, [r4, #0]
   b57a8:	4620      	mov	r0, r4
   b57aa:	685b      	ldr	r3, [r3, #4]
}
   b57ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b57b0:	4718      	bx	r3
   b57b2:	bd10      	pop	{r4, pc}

000b57b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b57b4:	680b      	ldr	r3, [r1, #0]
   b57b6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b57b8:	684b      	ldr	r3, [r1, #4]
   b57ba:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b57bc:	b113      	cbz	r3, b57c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b57be:	685a      	ldr	r2, [r3, #4]
   b57c0:	3201      	adds	r2, #1
   b57c2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b57c4:	4770      	bx	lr

000b57c6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b57c6:	b513      	push	{r0, r1, r4, lr}
   b57c8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b57ca:	4608      	mov	r0, r1
   b57cc:	9101      	str	r1, [sp, #4]
   b57ce:	f001 fdd0 	bl	b7372 <strlen>
   b57d2:	9901      	ldr	r1, [sp, #4]
   b57d4:	4602      	mov	r2, r0
   b57d6:	4620      	mov	r0, r4
}
   b57d8:	b002      	add	sp, #8
   b57da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b57de:	f7ff bf81 	b.w	b56e4 <_ZN5spark10JSONWriter5valueEPKcj>

000b57e2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b57e2:	b513      	push	{r0, r1, r4, lr}
   b57e4:	4604      	mov	r4, r0
    write(str, strlen(str));
   b57e6:	4608      	mov	r0, r1
   b57e8:	9101      	str	r1, [sp, #4]
   b57ea:	f001 fdc2 	bl	b7372 <strlen>
   b57ee:	6823      	ldr	r3, [r4, #0]
   b57f0:	9901      	ldr	r1, [sp, #4]
   b57f2:	68db      	ldr	r3, [r3, #12]
   b57f4:	4602      	mov	r2, r0
   b57f6:	4620      	mov	r0, r4
}
   b57f8:	b002      	add	sp, #8
   b57fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b57fe:	4718      	bx	r3

000b5800 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5800:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5802:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5804:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5808:	68db      	ldr	r3, [r3, #12]
   b580a:	2201      	movs	r2, #1
   b580c:	f10d 0107 	add.w	r1, sp, #7
   b5810:	4798      	blx	r3
}
   b5812:	b003      	add	sp, #12
   b5814:	f85d fb04 	ldr.w	pc, [sp], #4

000b5818 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5818:	b40e      	push	{r1, r2, r3}
   b581a:	b503      	push	{r0, r1, lr}
   b581c:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b581e:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5820:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b5824:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b5826:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5828:	f000 ffe7 	bl	b67fa <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b582c:	b002      	add	sp, #8
   b582e:	f85d eb04 	ldr.w	lr, [sp], #4
   b5832:	b003      	add	sp, #12
   b5834:	4770      	bx	lr

000b5836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5836:	680a      	ldr	r2, [r1, #0]
   b5838:	6002      	str	r2, [r0, #0]
   b583a:	684a      	ldr	r2, [r1, #4]
   b583c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b583e:	2200      	movs	r2, #0
   b5840:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5844:	b510      	push	{r4, lr}
   b5846:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5848:	688c      	ldr	r4, [r1, #8]
   b584a:	6084      	str	r4, [r0, #8]
   b584c:	68cc      	ldr	r4, [r1, #12]
   b584e:	60c4      	str	r4, [r0, #12]
   b5850:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5852:	608a      	str	r2, [r1, #8]
   b5854:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5856:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5858:	610a      	str	r2, [r1, #16]
   b585a:	bd10      	pop	{r4, pc}

000b585c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b585c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5860:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5864:	f04f 0a14 	mov.w	sl, #20
   b5868:	9300      	str	r3, [sp, #0]
   b586a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b586e:	4b18      	ldr	r3, [pc, #96]	; (b58d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5870:	10a4      	asrs	r4, r4, #2
   b5872:	4617      	mov	r7, r2
   b5874:	435c      	muls	r4, r3
   b5876:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5878:	2c00      	cmp	r4, #0
   b587a:	dd21      	ble.n	b58c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b587c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b587e:	fb0a f006 	mul.w	r0, sl, r6
   b5882:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5886:	463a      	mov	r2, r7
   b5888:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b588c:	5828      	ldr	r0, [r5, r0]
   b588e:	9101      	str	r1, [sp, #4]
   b5890:	455f      	cmp	r7, fp
   b5892:	bf28      	it	cs
   b5894:	465a      	movcs	r2, fp
   b5896:	f001 fd74 	bl	b7382 <strncmp>
                if (cmp == 0) {
   b589a:	2800      	cmp	r0, #0
   b589c:	9901      	ldr	r1, [sp, #4]
   b589e:	f04f 0301 	mov.w	r3, #1
   b58a2:	d10b      	bne.n	b58bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b58a4:	455f      	cmp	r7, fp
   b58a6:	d103      	bne.n	b58b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b58a8:	9a00      	ldr	r2, [sp, #0]
   b58aa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b58ac:	4634      	mov	r4, r6
   b58ae:	e7e3      	b.n	b5878 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b58b0:	d9fc      	bls.n	b58ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b58b2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b58b4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b58b8:	3e01      	subs	r6, #1
   b58ba:	e7f7      	b.n	b58ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b58bc:	dbf9      	blt.n	b58b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b58be:	e7f5      	b.n	b58ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b58c0:	eba5 0508 	sub.w	r5, r5, r8
}
   b58c4:	4802      	ldr	r0, [pc, #8]	; (b58d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b58c6:	10ad      	asrs	r5, r5, #2
   b58c8:	4368      	muls	r0, r5
   b58ca:	b003      	add	sp, #12
   b58cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b58d0:	cccccccd 	.word	0xcccccccd

000b58d4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b58d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b58d6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b58d8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b58da:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b58dc:	b303      	cbz	r3, b5920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b58de:	b1f9      	cbz	r1, b5920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b58e0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b58e2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b58e6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b58e8:	a903      	add	r1, sp, #12
   b58ea:	a801      	add	r0, sp, #4
   b58ec:	f7ff ff19 	bl	b5722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b58f0:	4601      	mov	r1, r0
   b58f2:	b1a8      	cbz	r0, b5920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b58f4:	f10d 030b 	add.w	r3, sp, #11
   b58f8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b58fa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b58fe:	4620      	mov	r0, r4
   b5900:	f7ff ffac 	bl	b585c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5904:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5908:	b153      	cbz	r3, b5920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b590a:	6823      	ldr	r3, [r4, #0]
   b590c:	2414      	movs	r4, #20
   b590e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5912:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5914:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5918:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b591a:	bfa8      	it	ge
   b591c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b591e:	e7e3      	b.n	b58e8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5920:	4628      	mov	r0, r5
   b5922:	b004      	add	sp, #16
   b5924:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5928 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5928:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b592a:	4c09      	ldr	r4, [pc, #36]	; (b5950 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b592c:	7823      	ldrb	r3, [r4, #0]
   b592e:	f3bf 8f5b 	dmb	ish
   b5932:	07db      	lsls	r3, r3, #31
   b5934:	d409      	bmi.n	b594a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5936:	4620      	mov	r0, r4
   b5938:	f7fe fbc0 	bl	b40bc <__cxa_guard_acquire>
   b593c:	b128      	cbz	r0, b594a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b593e:	4620      	mov	r0, r4
   b5940:	f7fe fbc1 	bl	b40c6 <__cxa_guard_release>
   b5944:	4803      	ldr	r0, [pc, #12]	; (b5954 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5946:	f001 fc7f 	bl	b7248 <atexit>
}
   b594a:	4803      	ldr	r0, [pc, #12]	; (b5958 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b594c:	bd10      	pop	{r4, pc}
   b594e:	bf00      	nop
   b5950:	2003e6a8 	.word	0x2003e6a8
   b5954:	000b571b 	.word	0x000b571b
   b5958:	2003e5ac 	.word	0x2003e5ac

000b595c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b595c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b595e:	4c09      	ldr	r4, [pc, #36]	; (b5984 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5960:	7823      	ldrb	r3, [r4, #0]
   b5962:	f3bf 8f5b 	dmb	ish
   b5966:	07db      	lsls	r3, r3, #31
   b5968:	d409      	bmi.n	b597e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b596a:	4620      	mov	r0, r4
   b596c:	f7fe fba6 	bl	b40bc <__cxa_guard_acquire>
   b5970:	b128      	cbz	r0, b597e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5972:	4620      	mov	r0, r4
   b5974:	f7fe fba7 	bl	b40c6 <__cxa_guard_release>
   b5978:	4803      	ldr	r0, [pc, #12]	; (b5988 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b597a:	f001 fc65 	bl	b7248 <atexit>
    return &factory;
}
   b597e:	4803      	ldr	r0, [pc, #12]	; (b598c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5980:	bd10      	pop	{r4, pc}
   b5982:	bf00      	nop
   b5984:	2003e6ac 	.word	0x2003e6ac
   b5988:	000b5783 	.word	0x000b5783
   b598c:	2003e5b0 	.word	0x2003e5b0

000b5990 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5990:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5992:	2500      	movs	r5, #0
   b5994:	4604      	mov	r4, r0
   b5996:	e9c0 5500 	strd	r5, r5, [r0]
   b599a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b599e:	6085      	str	r5, [r0, #8]
   b59a0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b59a2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b59a6:	f7ff f8df 	bl	b4b68 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b59aa:	f7ff ffbd 	bl	b5928 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b59ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b59b0:	f7ff ffd4 	bl	b595c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b59b4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b59b6:	6220      	str	r0, [r4, #32]
}
   b59b8:	4620      	mov	r0, r4
   b59ba:	bd38      	pop	{r3, r4, r5, pc}

000b59bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b59bc:	b510      	push	{r4, lr}
    static LogManager mgr;
   b59be:	4c0a      	ldr	r4, [pc, #40]	; (b59e8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b59c0:	7823      	ldrb	r3, [r4, #0]
   b59c2:	f3bf 8f5b 	dmb	ish
   b59c6:	07db      	lsls	r3, r3, #31
   b59c8:	d40c      	bmi.n	b59e4 <_ZN5spark10LogManager8instanceEv+0x28>
   b59ca:	4620      	mov	r0, r4
   b59cc:	f7fe fb76 	bl	b40bc <__cxa_guard_acquire>
   b59d0:	b140      	cbz	r0, b59e4 <_ZN5spark10LogManager8instanceEv+0x28>
   b59d2:	4806      	ldr	r0, [pc, #24]	; (b59ec <_ZN5spark10LogManager8instanceEv+0x30>)
   b59d4:	f7ff ffdc 	bl	b5990 <_ZN5spark10LogManagerC1Ev>
   b59d8:	4620      	mov	r0, r4
   b59da:	f7fe fb74 	bl	b40c6 <__cxa_guard_release>
   b59de:	4804      	ldr	r0, [pc, #16]	; (b59f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   b59e0:	f001 fc32 	bl	b7248 <atexit>
    return &mgr;
}
   b59e4:	4801      	ldr	r0, [pc, #4]	; (b59ec <_ZN5spark10LogManager8instanceEv+0x30>)
   b59e6:	bd10      	pop	{r4, pc}
   b59e8:	2003e6a4 	.word	0x2003e6a4
   b59ec:	2003e6b4 	.word	0x2003e6b4
   b59f0:	000b5f11 	.word	0x000b5f11

000b59f4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b59f4:	4a02      	ldr	r2, [pc, #8]	; (b5a00 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b59f6:	4903      	ldr	r1, [pc, #12]	; (b5a04 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b59f8:	4803      	ldr	r0, [pc, #12]	; (b5a08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b59fa:	2300      	movs	r3, #0
   b59fc:	f7ff ba14 	b.w	b4e28 <log_set_callbacks>
   b5a00:	000b5cf5 	.word	0x000b5cf5
   b5a04:	000b5c81 	.word	0x000b5c81
   b5a08:	000b5c01 	.word	0x000b5c01

000b5a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5a0c:	2300      	movs	r3, #0
   b5a0e:	461a      	mov	r2, r3
   b5a10:	4619      	mov	r1, r3
   b5a12:	4618      	mov	r0, r3
   b5a14:	f7ff ba08 	b.w	b4e28 <log_set_callbacks>

000b5a18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5a1a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5a1c:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5a1e:	4668      	mov	r0, sp
   b5a20:	f7ff fec8 	bl	b57b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5a24:	466a      	mov	r2, sp
   b5a26:	4629      	mov	r1, r5
   b5a28:	4620      	mov	r0, r4
   b5a2a:	f7ff fd7b 	bl	b5524 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5a2e:	a801      	add	r0, sp, #4
   b5a30:	f7ff faf4 	bl	b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a34:	4620      	mov	r0, r4
   b5a36:	b003      	add	sp, #12
   b5a38:	bd30      	pop	{r4, r5, pc}

000b5a3a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5a3c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5a3e:	4604      	mov	r4, r0
   b5a40:	4668      	mov	r0, sp
   b5a42:	f7ff feb7 	bl	b57b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5a46:	466a      	mov	r2, sp
   b5a48:	4629      	mov	r1, r5
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	f7ff fd46 	bl	b54dc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5a50:	a801      	add	r0, sp, #4
   b5a52:	f7ff fae3 	bl	b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a56:	4620      	mov	r0, r4
   b5a58:	b003      	add	sp, #12
   b5a5a:	bd30      	pop	{r4, r5, pc}

000b5a5c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5a5e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5a60:	4604      	mov	r4, r0
   b5a62:	4668      	mov	r0, sp
   b5a64:	f7ff fea6 	bl	b57b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5a68:	466a      	mov	r2, sp
   b5a6a:	4629      	mov	r1, r5
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f7ff fcde 	bl	b542e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5a72:	a801      	add	r0, sp, #4
   b5a74:	f7ff fad2 	bl	b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a78:	4620      	mov	r0, r4
   b5a7a:	b003      	add	sp, #12
   b5a7c:	bd30      	pop	{r4, r5, pc}
	...

000b5a80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5a80:	b570      	push	{r4, r5, r6, lr}
   b5a82:	b08a      	sub	sp, #40	; 0x28
   b5a84:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5a86:	4601      	mov	r1, r0
   b5a88:	a804      	add	r0, sp, #16
   b5a8a:	f7ff ffc5 	bl	b5a18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5a8e:	4e14      	ldr	r6, [pc, #80]	; (b5ae0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5a90:	a804      	add	r0, sp, #16
   b5a92:	f7ff fd5f 	bl	b5554 <_ZN5spark18JSONObjectIterator4nextEv>
   b5a96:	b1e8      	cbz	r0, b5ad4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5a98:	a904      	add	r1, sp, #16
   b5a9a:	4668      	mov	r0, sp
   b5a9c:	f7ff ffcd 	bl	b5a3a <_ZNK5spark18JSONObjectIterator4nameEv>
   b5aa0:	9802      	ldr	r0, [sp, #8]
   b5aa2:	4631      	mov	r1, r6
   b5aa4:	f7ff fe66 	bl	b5774 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5aa8:	4604      	mov	r4, r0
   b5aaa:	b110      	cbz	r0, b5ab2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5aac:	1e2c      	subs	r4, r5, #0
   b5aae:	bf18      	it	ne
   b5ab0:	2401      	movne	r4, #1
   b5ab2:	a801      	add	r0, sp, #4
   b5ab4:	f7ff fab2 	bl	b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ab8:	2c00      	cmp	r4, #0
   b5aba:	d0e9      	beq.n	b5a90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5abc:	a904      	add	r1, sp, #16
   b5abe:	4668      	mov	r0, sp
   b5ac0:	f7ff ffcc 	bl	b5a5c <_ZNK5spark18JSONObjectIterator5valueEv>
   b5ac4:	4668      	mov	r0, sp
   b5ac6:	f7ff fce8 	bl	b549a <_ZNK5spark9JSONValue5toIntEv>
   b5aca:	6028      	str	r0, [r5, #0]
   b5acc:	a801      	add	r0, sp, #4
   b5ace:	f7ff faa5 	bl	b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ad2:	e7dd      	b.n	b5a90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5ad4:	a805      	add	r0, sp, #20
   b5ad6:	f7ff faa1 	bl	b501c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5ada:	b00a      	add	sp, #40	; 0x28
   b5adc:	bd70      	pop	{r4, r5, r6, pc}
   b5ade:	bf00      	nop
   b5ae0:	000b780c 	.word	0x000b780c

000b5ae4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ae6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5ae8:	4620      	mov	r0, r4
   b5aea:	4913      	ldr	r1, [pc, #76]	; (b5b38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5aec:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5aee:	f001 fc2e 	bl	b734e <strcmp>
   b5af2:	b950      	cbnz	r0, b5b0a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5af4:	f001 f822 	bl	b6b3c <_Z16_fetch_usbserialv>
   b5af8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5afc:	f001 f80c 	bl	b6b18 <_ZN9USBSerial5beginEl>
}
   b5b00:	b003      	add	sp, #12
   b5b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5b06:	f001 b819 	b.w	b6b3c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5b0a:	490c      	ldr	r1, [pc, #48]	; (b5b3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5b0c:	4620      	mov	r0, r4
   b5b0e:	f001 fc1e 	bl	b734e <strcmp>
   b5b12:	b978      	cbnz	r0, b5b34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5b14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5b18:	a901      	add	r1, sp, #4
   b5b1a:	4628      	mov	r0, r5
        int baud = 9600;
   b5b1c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5b1e:	f7ff ffaf 	bl	b5a80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5b22:	f001 f925 	bl	b6d70 <_Z22__fetch_global_Serial1v>
   b5b26:	9901      	ldr	r1, [sp, #4]
   b5b28:	f000 ff9e 	bl	b6a68 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5b2c:	f001 f920 	bl	b6d70 <_Z22__fetch_global_Serial1v>
}
   b5b30:	b003      	add	sp, #12
   b5b32:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5b34:	2000      	movs	r0, #0
   b5b36:	e7fb      	b.n	b5b30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5b38:	000b7811 	.word	0x000b7811
   b5b3c:	000b7818 	.word	0x000b7818

000b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b40:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5b42:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5b46:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b48:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5b4a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5b4e:	42ae      	cmp	r6, r5
   b5b50:	d005      	beq.n	b5b5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5b52:	f105 0008 	add.w	r0, r5, #8
   b5b56:	f7ff fff3 	bl	b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5b5a:	3514      	adds	r5, #20
   b5b5c:	e7f7      	b.n	b5b4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5b5e:	6820      	ldr	r0, [r4, #0]
   b5b60:	f7ff fa06 	bl	b4f70 <free>
}
   b5b64:	4620      	mov	r0, r4
   b5b66:	bd70      	pop	{r4, r5, r6, pc}

000b5b68 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5b68:	b510      	push	{r4, lr}
   b5b6a:	4604      	mov	r4, r0
   b5b6c:	300c      	adds	r0, #12
   b5b6e:	f7ff ffe7 	bl	b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5b72:	4620      	mov	r0, r4
   b5b74:	f7ff fa40 	bl	b4ff8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5b78:	4620      	mov	r0, r4
   b5b7a:	bd10      	pop	{r4, pc}

000b5b7c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5b7c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5b7e:	4b04      	ldr	r3, [pc, #16]	; (b5b90 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5b80:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5b82:	f840 3b04 	str.w	r3, [r0], #4
   b5b86:	f7ff ffef 	bl	b5b68 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5b8a:	4620      	mov	r0, r4
   b5b8c:	bd10      	pop	{r4, pc}
   b5b8e:	bf00      	nop
   b5b90:	000b7680 	.word	0x000b7680

000b5b94 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5b94:	b510      	push	{r4, lr}
   b5b96:	4604      	mov	r4, r0
   b5b98:	f7ff fff0 	bl	b5b7c <_ZN5spark16StreamLogHandlerD1Ev>
   b5b9c:	4620      	mov	r0, r4
   b5b9e:	2124      	movs	r1, #36	; 0x24
   b5ba0:	f7fe fa7d 	bl	b409e <_ZdlPvj>
   b5ba4:	4620      	mov	r0, r4
   b5ba6:	bd10      	pop	{r4, pc}

000b5ba8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5ba8:	b510      	push	{r4, lr}
   b5baa:	4b03      	ldr	r3, [pc, #12]	; (b5bb8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5bac:	6003      	str	r3, [r0, #0]
   b5bae:	4604      	mov	r4, r0
   b5bb0:	f7ff ffe4 	bl	b5b7c <_ZN5spark16StreamLogHandlerD1Ev>
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	bd10      	pop	{r4, pc}
   b5bb8:	000b78b8 	.word	0x000b78b8

000b5bbc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5bbc:	b510      	push	{r4, lr}
   b5bbe:	4604      	mov	r4, r0
   b5bc0:	f7ff fff2 	bl	b5ba8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	2124      	movs	r1, #36	; 0x24
   b5bc8:	f7fe fa69 	bl	b409e <_ZdlPvj>
   b5bcc:	4620      	mov	r0, r4
   b5bce:	bd10      	pop	{r4, pc}

000b5bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5bd0:	2200      	movs	r2, #0
   b5bd2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b5bd6:	b510      	push	{r4, lr}
        capacity_(0) {
   b5bd8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5bda:	680c      	ldr	r4, [r1, #0]
   b5bdc:	6004      	str	r4, [r0, #0]
   b5bde:	684c      	ldr	r4, [r1, #4]
   b5be0:	6044      	str	r4, [r0, #4]
   b5be2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5be4:	600a      	str	r2, [r1, #0]
   b5be6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5be8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5bea:	608a      	str	r2, [r1, #8]
}
   b5bec:	bd10      	pop	{r4, pc}

000b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b5bee:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5bf0:	6803      	ldr	r3, [r0, #0]
   b5bf2:	4604      	mov	r4, r0
   b5bf4:	6818      	ldr	r0, [r3, #0]
   b5bf6:	f7fe ffcf 	bl	b4b98 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	bd10      	pop	{r4, pc}
	...

000b5c00 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c04:	b087      	sub	sp, #28
   b5c06:	4680      	mov	r8, r0
   b5c08:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5c0a:	4b1c      	ldr	r3, [pc, #112]	; (b5c7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5c0c:	685b      	ldr	r3, [r3, #4]
   b5c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5c12:	4689      	mov	r9, r1
   b5c14:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b5c16:	b96b      	cbnz	r3, b5c34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5c18:	f7ff fed0 	bl	b59bc <_ZN5spark10LogManager8instanceEv>
   b5c1c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5c1e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5c22:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c24:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b5c26:	f7ff fda3 	bl	b5770 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5c2a:	7b23      	ldrb	r3, [r4, #12]
   b5c2c:	b12b      	cbz	r3, b5c3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5c2e:	a805      	add	r0, sp, #20
   b5c30:	f7ff ffdd 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5c34:	b007      	add	sp, #28
   b5c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5c3a:	2301      	movs	r3, #1
   b5c3c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5c3e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5c42:	fa5f f989 	uxtb.w	r9, r9
   b5c46:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5c4a:	45aa      	cmp	sl, r5
   b5c4c:	d012      	beq.n	b5c74 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5c4e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5c52:	4631      	mov	r1, r6
   b5c54:	1d38      	adds	r0, r7, #4
   b5c56:	f7ff fe3d 	bl	b58d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5c5a:	4581      	cmp	r9, r0
   b5c5c:	d3f5      	bcc.n	b5c4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5c5e:	683b      	ldr	r3, [r7, #0]
   b5c60:	9a03      	ldr	r2, [sp, #12]
   b5c62:	9200      	str	r2, [sp, #0]
   b5c64:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5c68:	464a      	mov	r2, r9
   b5c6a:	4633      	mov	r3, r6
   b5c6c:	4641      	mov	r1, r8
   b5c6e:	4638      	mov	r0, r7
   b5c70:	47d8      	blx	fp
   b5c72:	e7ea      	b.n	b5c4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5c74:	2300      	movs	r3, #0
   b5c76:	7323      	strb	r3, [r4, #12]
   b5c78:	e7d9      	b.n	b5c2e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5c7a:	bf00      	nop
   b5c7c:	e000ed00 	.word	0xe000ed00

000b5c80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c84:	469b      	mov	fp, r3
   b5c86:	4b1a      	ldr	r3, [pc, #104]	; (b5cf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5c88:	685b      	ldr	r3, [r3, #4]
   b5c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5c8e:	4680      	mov	r8, r0
   b5c90:	4689      	mov	r9, r1
   b5c92:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b5c94:	b96b      	cbnz	r3, b5cb2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5c96:	f7ff fe91 	bl	b59bc <_ZN5spark10LogManager8instanceEv>
   b5c9a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5c9c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5ca0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ca2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ca4:	f7ff fd64 	bl	b5770 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5ca8:	7b23      	ldrb	r3, [r4, #12]
   b5caa:	b12b      	cbz	r3, b5cb8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5cac:	a801      	add	r0, sp, #4
   b5cae:	f7ff ff9e 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5cb2:	b003      	add	sp, #12
   b5cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5cb8:	2301      	movs	r3, #1
   b5cba:	7323      	strb	r3, [r4, #12]
   b5cbc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5cc0:	b2f6      	uxtb	r6, r6
   b5cc2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5cc6:	4555      	cmp	r5, sl
   b5cc8:	d00e      	beq.n	b5ce8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5cca:	f855 7b04 	ldr.w	r7, [r5], #4
   b5cce:	4659      	mov	r1, fp
   b5cd0:	1d38      	adds	r0, r7, #4
   b5cd2:	f7ff fdff 	bl	b58d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5cd6:	4286      	cmp	r6, r0
   b5cd8:	d3f5      	bcc.n	b5cc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5cda:	683b      	ldr	r3, [r7, #0]
   b5cdc:	464a      	mov	r2, r9
   b5cde:	68db      	ldr	r3, [r3, #12]
   b5ce0:	4641      	mov	r1, r8
   b5ce2:	4638      	mov	r0, r7
   b5ce4:	4798      	blx	r3
   b5ce6:	e7ee      	b.n	b5cc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5ce8:	2300      	movs	r3, #0
   b5cea:	7323      	strb	r3, [r4, #12]
   b5cec:	e7de      	b.n	b5cac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5cee:	bf00      	nop
   b5cf0:	e000ed00 	.word	0xe000ed00

000b5cf4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5cf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5cf8:	4b16      	ldr	r3, [pc, #88]	; (b5d54 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5cfa:	685b      	ldr	r3, [r3, #4]
   b5cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5d00:	4605      	mov	r5, r0
   b5d02:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5d04:	bb1b      	cbnz	r3, b5d4e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5d06:	f7ff fe59 	bl	b59bc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5d0a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5d0e:	4604      	mov	r4, r0
   b5d10:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5d12:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5d14:	f7ff fd2c 	bl	b5770 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5d18:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5d1c:	2446      	movs	r4, #70	; 0x46
   b5d1e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5d22:	45b0      	cmp	r8, r6
   b5d24:	d109      	bne.n	b5d3a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5d26:	a801      	add	r0, sp, #4
   b5d28:	f7ff ff61 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5d2c:	42a5      	cmp	r5, r4
   b5d2e:	bfb4      	ite	lt
   b5d30:	2000      	movlt	r0, #0
   b5d32:	2001      	movge	r0, #1
}
   b5d34:	b002      	add	sp, #8
   b5d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5d3a:	f856 0b04 	ldr.w	r0, [r6], #4
   b5d3e:	4639      	mov	r1, r7
   b5d40:	3004      	adds	r0, #4
   b5d42:	f7ff fdc7 	bl	b58d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5d46:	4284      	cmp	r4, r0
   b5d48:	bfa8      	it	ge
   b5d4a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5d4c:	e7e9      	b.n	b5d22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5d4e:	2000      	movs	r0, #0
   b5d50:	e7f0      	b.n	b5d34 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5d52:	bf00      	nop
   b5d54:	e000ed00 	.word	0xe000ed00

000b5d58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d5a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5d5e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d60:	4604      	mov	r4, r0
   b5d62:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d64:	db0d      	blt.n	b5d82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5d66:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5d68:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5d6a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5d6c:	dd04      	ble.n	b5d78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5d6e:	00b9      	lsls	r1, r7, #2
   b5d70:	f7ff f906 	bl	b4f80 <realloc>
            if (!d) {
   b5d74:	b918      	cbnz	r0, b5d7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5d78:	f7ff f8fa 	bl	b4f70 <free>
        T* d = nullptr;
   b5d7c:	2000      	movs	r0, #0
        data_ = d;
   b5d7e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5d80:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5d82:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5d84:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d86:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5d8a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5d8c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5d90:	1d08      	adds	r0, r1, #4
   b5d92:	f001 fa75 	bl	b7280 <memmove>
    new(p) T(std::move(value));
   b5d96:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5d9a:	6863      	ldr	r3, [r4, #4]
   b5d9c:	3301      	adds	r3, #1
   b5d9e:	6063      	str	r3, [r4, #4]
    return true;
   b5da0:	2001      	movs	r0, #1
   b5da2:	e7e8      	b.n	b5d76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5da4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5da6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5daa:	4604      	mov	r4, r0
   b5dac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5dae:	9301      	str	r3, [sp, #4]
   b5db0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5db2:	f7ff fcdd 	bl	b5770 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5db6:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5dba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5dbe:	4293      	cmp	r3, r2
   b5dc0:	4619      	mov	r1, r3
   b5dc2:	d00b      	beq.n	b5ddc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5dc4:	6809      	ldr	r1, [r1, #0]
   b5dc6:	42a9      	cmp	r1, r5
   b5dc8:	f103 0304 	add.w	r3, r3, #4
   b5dcc:	d1f7      	bne.n	b5dbe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5dce:	a801      	add	r0, sp, #4
   b5dd0:	f7ff ff0d 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5dd4:	2500      	movs	r5, #0
}
   b5dd6:	4628      	mov	r0, r5
   b5dd8:	b003      	add	sp, #12
   b5dda:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5ddc:	4629      	mov	r1, r5
   b5dde:	4620      	mov	r0, r4
   b5de0:	f7ff ffba 	bl	b5d58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5de4:	4605      	mov	r5, r0
   b5de6:	2800      	cmp	r0, #0
   b5de8:	d0f1      	beq.n	b5dce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5dea:	6863      	ldr	r3, [r4, #4]
   b5dec:	2b01      	cmp	r3, #1
   b5dee:	d101      	bne.n	b5df4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5df0:	f7ff fe00 	bl	b59f4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5df4:	a801      	add	r0, sp, #4
   b5df6:	f7ff fefa 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5dfa:	e7ec      	b.n	b5dd6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5dfc:	b570      	push	{r4, r5, r6, lr}
   b5dfe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5e00:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5e04:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5e06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5e0a:	4282      	cmp	r2, r0
   b5e0c:	d00f      	beq.n	b5e2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5e0e:	4601      	mov	r1, r0
            if (*p == value) {
   b5e10:	681d      	ldr	r5, [r3, #0]
   b5e12:	f851 6b04 	ldr.w	r6, [r1], #4
   b5e16:	42ae      	cmp	r6, r5
   b5e18:	d107      	bne.n	b5e2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5e1a:	1a52      	subs	r2, r2, r1
   b5e1c:	f001 fa30 	bl	b7280 <memmove>
    --size_;
   b5e20:	6863      	ldr	r3, [r4, #4]
   b5e22:	3b01      	subs	r3, #1
   b5e24:	6063      	str	r3, [r4, #4]
    return true;
   b5e26:	2001      	movs	r0, #1
}
   b5e28:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5e2a:	4608      	mov	r0, r1
   b5e2c:	e7ed      	b.n	b5e0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5e2e:	2000      	movs	r0, #0
   b5e30:	e7fa      	b.n	b5e28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5e32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5e32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5e34:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5e38:	4604      	mov	r4, r0
   b5e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5e3c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5e3e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5e40:	f7ff fc96 	bl	b5770 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5e44:	a901      	add	r1, sp, #4
   b5e46:	4620      	mov	r0, r4
   b5e48:	f7ff ffd8 	bl	b5dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5e4c:	b118      	cbz	r0, b5e56 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5e4e:	6863      	ldr	r3, [r4, #4]
   b5e50:	b90b      	cbnz	r3, b5e56 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5e52:	f7ff fddb 	bl	b5a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5e56:	a803      	add	r0, sp, #12
   b5e58:	f7ff fec9 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5e5c:	b004      	add	sp, #16
   b5e5e:	bd10      	pop	{r4, pc}

000b5e60 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5e60:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5e62:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5e66:	2318      	movs	r3, #24
   b5e68:	4604      	mov	r4, r0
   b5e6a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e6e:	42ae      	cmp	r6, r5
   b5e70:	d015      	beq.n	b5e9e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5e72:	f105 0110 	add.w	r1, r5, #16
   b5e76:	4620      	mov	r0, r4
   b5e78:	f7ff ffc0 	bl	b5dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5e7c:	6863      	ldr	r3, [r4, #4]
   b5e7e:	b90b      	cbnz	r3, b5e84 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5e80:	f7ff fdc4 	bl	b5a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5e84:	69e0      	ldr	r0, [r4, #28]
   b5e86:	6929      	ldr	r1, [r5, #16]
   b5e88:	6803      	ldr	r3, [r0, #0]
   b5e8a:	68db      	ldr	r3, [r3, #12]
   b5e8c:	4798      	blx	r3
        if (h.stream) {
   b5e8e:	6969      	ldr	r1, [r5, #20]
   b5e90:	b119      	cbz	r1, b5e9a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5e92:	6a20      	ldr	r0, [r4, #32]
   b5e94:	6803      	ldr	r3, [r0, #0]
   b5e96:	68db      	ldr	r3, [r3, #12]
   b5e98:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5e9a:	3518      	adds	r5, #24
   b5e9c:	e7e7      	b.n	b5e6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5e9e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5ea2:	2618      	movs	r6, #24
   b5ea4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ea8:	42ae      	cmp	r6, r5
   b5eaa:	d004      	beq.n	b5eb6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5eac:	4628      	mov	r0, r5
   b5eae:	f000 fcdb 	bl	b6868 <_ZN6StringD1Ev>
   b5eb2:	3518      	adds	r5, #24
   b5eb4:	e7f8      	b.n	b5ea8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5eb6:	2300      	movs	r3, #0
   b5eb8:	6163      	str	r3, [r4, #20]
}
   b5eba:	bd70      	pop	{r4, r5, r6, pc}

000b5ebc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ebe:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5ec0:	f7ff fda4 	bl	b5a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5ec4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5ec8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5eca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ecc:	f7ff fc50 	bl	b5770 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5ed0:	4620      	mov	r0, r4
   b5ed2:	f7ff ffc5 	bl	b5e60 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5ed6:	a801      	add	r0, sp, #4
   b5ed8:	f7ff fe89 	bl	b5bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5edc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ede:	b108      	cbz	r0, b5ee4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5ee0:	f7fe fe4a 	bl	b4b78 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5ee4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5ee8:	2618      	movs	r6, #24
   b5eea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5eee:	42ae      	cmp	r6, r5
   b5ef0:	d004      	beq.n	b5efc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5ef2:	4628      	mov	r0, r5
   b5ef4:	f000 fcb8 	bl	b6868 <_ZN6StringD1Ev>
   b5ef8:	3518      	adds	r5, #24
   b5efa:	e7f8      	b.n	b5eee <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5efc:	6920      	ldr	r0, [r4, #16]
   b5efe:	f7ff f837 	bl	b4f70 <free>
   b5f02:	6820      	ldr	r0, [r4, #0]
   b5f04:	f7ff f834 	bl	b4f70 <free>
}
   b5f08:	4620      	mov	r0, r4
   b5f0a:	b002      	add	sp, #8
   b5f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5f10 <__tcf_2>:
    static LogManager mgr;
   b5f10:	4801      	ldr	r0, [pc, #4]	; (b5f18 <__tcf_2+0x8>)
   b5f12:	f7ff bfd3 	b.w	b5ebc <_ZN5spark10LogManagerD1Ev>
   b5f16:	bf00      	nop
   b5f18:	2003e6b4 	.word	0x2003e6b4

000b5f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5f1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f20:	4604      	mov	r4, r0
   b5f22:	460d      	mov	r5, r1
   b5f24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f26:	d915      	bls.n	b5f54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5f28:	4290      	cmp	r0, r2
   b5f2a:	d214      	bcs.n	b5f56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5f2c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5f30:	1a75      	subs	r5, r6, r1
   b5f32:	f1a1 0714 	sub.w	r7, r1, #20
   b5f36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f38:	42b7      	cmp	r7, r6
   b5f3a:	d01a      	beq.n	b5f72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5f3c:	b11c      	cbz	r4, b5f46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5f3e:	4631      	mov	r1, r6
   b5f40:	4620      	mov	r0, r4
   b5f42:	f7ff fc78 	bl	b5836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5f46:	f106 0008 	add.w	r0, r6, #8
   b5f4a:	f7ff fdf9 	bl	b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5f4e:	3e14      	subs	r6, #20
   b5f50:	3c14      	subs	r4, #20
   b5f52:	e7f1      	b.n	b5f38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5f54:	d00d      	beq.n	b5f72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5f56:	42b5      	cmp	r5, r6
   b5f58:	d00b      	beq.n	b5f72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5f5a:	b11c      	cbz	r4, b5f64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5f5c:	4629      	mov	r1, r5
   b5f5e:	4620      	mov	r0, r4
   b5f60:	f7ff fc69 	bl	b5836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5f64:	f105 0008 	add.w	r0, r5, #8
   b5f68:	f7ff fdea 	bl	b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5f6c:	3514      	adds	r5, #20
   b5f6e:	3414      	adds	r4, #20
   b5f70:	e7f1      	b.n	b5f56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5f74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f78:	4604      	mov	r4, r0
   b5f7a:	460d      	mov	r5, r1
   b5f7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5f7e:	d914      	bls.n	b5faa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5f80:	4290      	cmp	r0, r2
   b5f82:	d213      	bcs.n	b5fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5f84:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5f88:	1a75      	subs	r5, r6, r1
   b5f8a:	f1a1 0710 	sub.w	r7, r1, #16
   b5f8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5f90:	42b7      	cmp	r7, r6
   b5f92:	d018      	beq.n	b5fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5f94:	b11c      	cbz	r4, b5f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5f96:	4631      	mov	r1, r6
   b5f98:	4620      	mov	r0, r4
   b5f9a:	f000 fccd 	bl	b6938 <_ZN6StringC1EOS_>
                end->~T();
   b5f9e:	4630      	mov	r0, r6
   b5fa0:	f000 fc62 	bl	b6868 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5fa4:	3e10      	subs	r6, #16
   b5fa6:	3c10      	subs	r4, #16
   b5fa8:	e7f2      	b.n	b5f90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5faa:	d00c      	beq.n	b5fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5fac:	42b5      	cmp	r5, r6
   b5fae:	d00a      	beq.n	b5fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5fb0:	b11c      	cbz	r4, b5fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5fb2:	4629      	mov	r1, r5
   b5fb4:	4620      	mov	r0, r4
   b5fb6:	f000 fcbf 	bl	b6938 <_ZN6StringC1EOS_>
                p->~T();
   b5fba:	4628      	mov	r0, r5
   b5fbc:	f000 fc54 	bl	b6868 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5fc0:	3510      	adds	r5, #16
   b5fc2:	3410      	adds	r4, #16
   b5fc4:	e7f2      	b.n	b5fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5fc8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5fca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5fcc:	4605      	mov	r5, r0
        if (n > 0) {
   b5fce:	dd11      	ble.n	b5ff4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5fd0:	0130      	lsls	r0, r6, #4
   b5fd2:	f7fe ffc5 	bl	b4f60 <malloc>
            if (!d) {
   b5fd6:	4604      	mov	r4, r0
   b5fd8:	b158      	cbz	r0, b5ff2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5fda:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5fde:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5fe2:	f7ff ffc7 	bl	b5f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5fe6:	6828      	ldr	r0, [r5, #0]
   b5fe8:	f7fe ffc2 	bl	b4f70 <free>
        data_ = d;
   b5fec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5fee:	60ae      	str	r6, [r5, #8]
        return true;
   b5ff0:	2001      	movs	r0, #1
    }
   b5ff2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5ff4:	2400      	movs	r4, #0
   b5ff6:	e7f6      	b.n	b5fe6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ffc:	4690      	mov	r8, r2
   b5ffe:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6000:	2300      	movs	r3, #0
   b6002:	9103      	str	r1, [sp, #12]
    return size_;
   b6004:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6008:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b600a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b600c:	4299      	cmp	r1, r3
        capacity_(0) {
   b600e:	e9c0 3300 	strd	r3, r3, [r0]
   b6012:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6016:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b601a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b601e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6020:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b6022:	dc23      	bgt.n	b606c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b6024:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6028:	2314      	movs	r3, #20
   b602a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b602e:	42af      	cmp	r7, r5
   b6030:	d03b      	beq.n	b60aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b6032:	4629      	mov	r1, r5
   b6034:	a80b      	add	r0, sp, #44	; 0x2c
   b6036:	f000 fc7f 	bl	b6938 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b603a:	a90b      	add	r1, sp, #44	; 0x2c
   b603c:	a80f      	add	r0, sp, #60	; 0x3c
   b603e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6040:	f000 fc7a 	bl	b6938 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6044:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6048:	4299      	cmp	r1, r3
   b604a:	da1b      	bge.n	b6084 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b604c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b604e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6050:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b6054:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6058:	4631      	mov	r1, r6
   b605a:	f106 0010 	add.w	r0, r6, #16
   b605e:	f7ff ff89 	bl	b5f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b6062:	b9ee      	cbnz	r6, b60a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b6064:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6066:	3301      	adds	r3, #1
   b6068:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b606a:	e011      	b.n	b6090 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b606c:	a808      	add	r0, sp, #32
   b606e:	f7ff ffab 	bl	b5fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6072:	2800      	cmp	r0, #0
   b6074:	d1d6      	bne.n	b6024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6076:	a808      	add	r0, sp, #32
   b6078:	f7fe ffbe 	bl	b4ff8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b607c:	4620      	mov	r0, r4
   b607e:	b015      	add	sp, #84	; 0x54
   b6080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6084:	3101      	adds	r1, #1
   b6086:	a808      	add	r0, sp, #32
   b6088:	f7ff ff9e 	bl	b5fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b608c:	2800      	cmp	r0, #0
   b608e:	d1dd      	bne.n	b604c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6090:	a80f      	add	r0, sp, #60	; 0x3c
   b6092:	f000 fbe9 	bl	b6868 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6096:	a80b      	add	r0, sp, #44	; 0x2c
   b6098:	f000 fbe6 	bl	b6868 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b609c:	3514      	adds	r5, #20
   b609e:	e7c6      	b.n	b602e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b60a0:	a90f      	add	r1, sp, #60	; 0x3c
   b60a2:	4630      	mov	r0, r6
   b60a4:	f000 fc48 	bl	b6938 <_ZN6StringC1EOS_>
   b60a8:	e7dc      	b.n	b6064 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b60aa:	2600      	movs	r6, #0
   b60ac:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b60b0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b60b2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b60b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b60ba:	429e      	cmp	r6, r3
   b60bc:	da7c      	bge.n	b61b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b60be:	0133      	lsls	r3, r6, #4
   b60c0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b60c2:	9306      	str	r3, [sp, #24]
        if (!category) {
   b60c4:	b90b      	cbnz	r3, b60ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b60c6:	3601      	adds	r6, #1
   b60c8:	e7f5      	b.n	b60b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b60ca:	2300      	movs	r3, #0
   b60cc:	9307      	str	r3, [sp, #28]
   b60ce:	fb09 f306 	mul.w	r3, r9, r6
   b60d2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b60d4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b60d6:	a907      	add	r1, sp, #28
   b60d8:	a806      	add	r0, sp, #24
   b60da:	f7ff fb22 	bl	b5722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b60de:	4682      	mov	sl, r0
   b60e0:	2800      	cmp	r0, #0
   b60e2:	d0f0      	beq.n	b60c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b60e4:	f04f 0300 	mov.w	r3, #0
   b60e8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b60ec:	4601      	mov	r1, r0
   b60ee:	9a07      	ldr	r2, [sp, #28]
   b60f0:	f10d 0317 	add.w	r3, sp, #23
   b60f4:	4628      	mov	r0, r5
   b60f6:	f7ff fbb1 	bl	b585c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b60fa:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b60fe:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6100:	2f00      	cmp	r7, #0
   b6102:	d14a      	bne.n	b619a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6104:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6108:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b610c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6110:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6114:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6118:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b611c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b611e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b6122:	4293      	cmp	r3, r2
   b6124:	db17      	blt.n	b6156 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b6126:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b612a:	f1ba 0f00 	cmp.w	sl, #0
   b612e:	dd30      	ble.n	b6192 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6130:	fb09 f00a 	mul.w	r0, r9, sl
   b6134:	f7fe ff14 	bl	b4f60 <malloc>
            if (!d) {
   b6138:	4683      	mov	fp, r0
   b613a:	b360      	cbz	r0, b6196 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b613c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6140:	fb09 1202 	mla	r2, r9, r2, r1
   b6144:	f7ff feea 	bl	b5f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6148:	6828      	ldr	r0, [r5, #0]
   b614a:	f7fe ff11 	bl	b4f70 <free>
        data_ = d;
   b614e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b6152:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b6156:	682b      	ldr	r3, [r5, #0]
   b6158:	9a01      	ldr	r2, [sp, #4]
   b615a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b615e:	686a      	ldr	r2, [r5, #4]
   b6160:	4651      	mov	r1, sl
   b6162:	fb09 3202 	mla	r2, r9, r2, r3
   b6166:	f10a 0014 	add.w	r0, sl, #20
   b616a:	f7ff fed7 	bl	b5f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b616e:	f1ba 0f00 	cmp.w	sl, #0
   b6172:	d003      	beq.n	b617c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6174:	a90f      	add	r1, sp, #60	; 0x3c
   b6176:	4650      	mov	r0, sl
   b6178:	f7ff fb5d 	bl	b5836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b617c:	686b      	ldr	r3, [r5, #4]
   b617e:	3301      	adds	r3, #1
   b6180:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6182:	a811      	add	r0, sp, #68	; 0x44
   b6184:	f7ff fcdc 	bl	b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6188:	b13f      	cbz	r7, b619a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b618a:	a80b      	add	r0, sp, #44	; 0x2c
   b618c:	f7ff fcd8 	bl	b5b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6190:	e771      	b.n	b6076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6192:	46bb      	mov	fp, r7
   b6194:	e7d8      	b.n	b6148 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6196:	2701      	movs	r7, #1
   b6198:	e7f3      	b.n	b6182 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b619a:	9b01      	ldr	r3, [sp, #4]
   b619c:	682d      	ldr	r5, [r5, #0]
   b619e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b61a2:	9b06      	ldr	r3, [sp, #24]
   b61a4:	781b      	ldrb	r3, [r3, #0]
   b61a6:	b92b      	cbnz	r3, b61b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b61a8:	f8d8 3000 	ldr.w	r3, [r8]
   b61ac:	9a02      	ldr	r2, [sp, #8]
   b61ae:	4413      	add	r3, r2
   b61b0:	7c1b      	ldrb	r3, [r3, #16]
   b61b2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b61b4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b61b6:	e78e      	b.n	b60d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61b8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b61ba:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61bc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b61be:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61c0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b61c2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b61c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b61c6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61c8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b61ca:	60a2      	str	r2, [r4, #8]
   b61cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b61ce:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61d0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b61d2:	60e2      	str	r2, [r4, #12]
   b61d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b61d6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61d8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b61da:	6122      	str	r2, [r4, #16]
   b61dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b61de:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b61e0:	9b03      	ldr	r3, [sp, #12]
   b61e2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b61e4:	6162      	str	r2, [r4, #20]
   b61e6:	7623      	strb	r3, [r4, #24]
   b61e8:	e7cf      	b.n	b618a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b61ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b61ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b61ee:	4604      	mov	r4, r0
   b61f0:	b087      	sub	sp, #28
   b61f2:	460d      	mov	r5, r1
        filter_(level, filters) {
   b61f4:	4626      	mov	r6, r4
        stream_(&stream) {
   b61f6:	4619      	mov	r1, r3
   b61f8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b61fa:	4617      	mov	r7, r2
        stream_(&stream) {
   b61fc:	f7fe f9e5 	bl	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6200:	4b0b      	ldr	r3, [pc, #44]	; (b6230 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6202:	f846 3b04 	str.w	r3, [r6], #4
   b6206:	4669      	mov	r1, sp
   b6208:	a803      	add	r0, sp, #12
   b620a:	f7fe f9de 	bl	b45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b620e:	aa03      	add	r2, sp, #12
   b6210:	4639      	mov	r1, r7
   b6212:	4630      	mov	r0, r6
   b6214:	f7ff fef0 	bl	b5ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6218:	a803      	add	r0, sp, #12
   b621a:	f7fe f995 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b621e:	4668      	mov	r0, sp
   b6220:	f7fe f992 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6224:	4b03      	ldr	r3, [pc, #12]	; (b6234 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6226:	6023      	str	r3, [r4, #0]
}
   b6228:	4620      	mov	r0, r4
        stream_(&stream) {
   b622a:	6225      	str	r5, [r4, #32]
}
   b622c:	b007      	add	sp, #28
   b622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6230:	000b7680 	.word	0x000b7680
   b6234:	000b78a0 	.word	0x000b78a0

000b6238 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6238:	b5f0      	push	{r4, r5, r6, r7, lr}
   b623a:	460f      	mov	r7, r1
   b623c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b623e:	491d      	ldr	r1, [pc, #116]	; (b62b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6240:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6242:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6244:	4616      	mov	r6, r2
   b6246:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6248:	f001 f881 	bl	b734e <strcmp>
   b624c:	b9c0      	cbnz	r0, b6280 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b624e:	b1a4      	cbz	r4, b627a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6250:	4629      	mov	r1, r5
   b6252:	a801      	add	r0, sp, #4
   b6254:	f7ff fcbc 	bl	b5bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6258:	4917      	ldr	r1, [pc, #92]	; (b62b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b625a:	2024      	movs	r0, #36	; 0x24
   b625c:	f000 fdac 	bl	b6db8 <_ZnwjRKSt9nothrow_t>
   b6260:	4605      	mov	r5, r0
   b6262:	b130      	cbz	r0, b6272 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6264:	ab01      	add	r3, sp, #4
   b6266:	4632      	mov	r2, r6
   b6268:	4621      	mov	r1, r4
   b626a:	f7ff ffbf 	bl	b61ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b626e:	4b13      	ldr	r3, [pc, #76]	; (b62bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6270:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6272:	a801      	add	r0, sp, #4
   b6274:	f7fe f968 	bl	b4548 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6278:	462c      	mov	r4, r5
}
   b627a:	4620      	mov	r0, r4
   b627c:	b005      	add	sp, #20
   b627e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6280:	490f      	ldr	r1, [pc, #60]	; (b62c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6282:	4638      	mov	r0, r7
   b6284:	f001 f863 	bl	b734e <strcmp>
   b6288:	b990      	cbnz	r0, b62b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b628a:	2c00      	cmp	r4, #0
   b628c:	d0f5      	beq.n	b627a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b628e:	4629      	mov	r1, r5
   b6290:	a801      	add	r0, sp, #4
   b6292:	f7ff fc9d 	bl	b5bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6296:	4908      	ldr	r1, [pc, #32]	; (b62b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6298:	2024      	movs	r0, #36	; 0x24
   b629a:	f000 fd8d 	bl	b6db8 <_ZnwjRKSt9nothrow_t>
   b629e:	4605      	mov	r5, r0
   b62a0:	2800      	cmp	r0, #0
   b62a2:	d0e6      	beq.n	b6272 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b62a4:	ab01      	add	r3, sp, #4
   b62a6:	4632      	mov	r2, r6
   b62a8:	4621      	mov	r1, r4
   b62aa:	f7ff ff9f 	bl	b61ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b62ae:	e7e0      	b.n	b6272 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b62b0:	2400      	movs	r4, #0
   b62b2:	e7e2      	b.n	b627a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b62b4:	000b7820 	.word	0x000b7820
   b62b8:	000b79b0 	.word	0x000b79b0
   b62bc:	000b78b8 	.word	0x000b78b8
   b62c0:	000b7824 	.word	0x000b7824

000b62c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b62c4:	4b01      	ldr	r3, [pc, #4]	; (b62cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b62c6:	4a02      	ldr	r2, [pc, #8]	; (b62d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b62c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b62ca:	4770      	bx	lr
   b62cc:	2003e6b0 	.word	0x2003e6b0
   b62d0:	000b7835 	.word	0x000b7835

000b62d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b62d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b62d8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b62da:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b62de:	4604      	mov	r4, r0
   b62e0:	460e      	mov	r6, r1
   b62e2:	4617      	mov	r7, r2
   b62e4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b62e6:	f000 fc29 	bl	b6b3c <_Z16_fetch_usbserialv>
   b62ea:	4581      	cmp	r9, r0
   b62ec:	d04c      	beq.n	b6388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b62ee:	792b      	ldrb	r3, [r5, #4]
   b62f0:	0719      	lsls	r1, r3, #28
   b62f2:	d504      	bpl.n	b62fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b62f4:	696a      	ldr	r2, [r5, #20]
   b62f6:	4954      	ldr	r1, [pc, #336]	; (b6448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b62f8:	4620      	mov	r0, r4
   b62fa:	f7ff fa8d 	bl	b5818 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b62fe:	f1b8 0f00 	cmp.w	r8, #0
   b6302:	d00d      	beq.n	b6320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6304:	215b      	movs	r1, #91	; 0x5b
   b6306:	4620      	mov	r0, r4
   b6308:	f7ff fa7a 	bl	b5800 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b630c:	4641      	mov	r1, r8
   b630e:	4620      	mov	r0, r4
   b6310:	f7ff fa67 	bl	b57e2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6314:	6823      	ldr	r3, [r4, #0]
   b6316:	494d      	ldr	r1, [pc, #308]	; (b644c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6318:	68db      	ldr	r3, [r3, #12]
   b631a:	2202      	movs	r2, #2
   b631c:	4620      	mov	r0, r4
   b631e:	4798      	blx	r3
    if (attr.has_file) {
   b6320:	792b      	ldrb	r3, [r5, #4]
   b6322:	07da      	lsls	r2, r3, #31
   b6324:	d523      	bpl.n	b636e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6326:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b632a:	212f      	movs	r1, #47	; 0x2f
   b632c:	4640      	mov	r0, r8
   b632e:	f001 f83c 	bl	b73aa <strrchr>
    if (s1) {
   b6332:	b108      	cbz	r0, b6338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6334:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6338:	4641      	mov	r1, r8
   b633a:	4620      	mov	r0, r4
   b633c:	f7ff fa51 	bl	b57e2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6340:	792b      	ldrb	r3, [r5, #4]
   b6342:	079b      	lsls	r3, r3, #30
   b6344:	d508      	bpl.n	b6358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6346:	213a      	movs	r1, #58	; 0x3a
   b6348:	4620      	mov	r0, r4
   b634a:	f7ff fa59 	bl	b5800 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b634e:	68ea      	ldr	r2, [r5, #12]
   b6350:	493f      	ldr	r1, [pc, #252]	; (b6450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6352:	4620      	mov	r0, r4
   b6354:	f7ff fa60 	bl	b5818 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6358:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b635a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b635c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6360:	68db      	ldr	r3, [r3, #12]
   b6362:	bf14      	ite	ne
   b6364:	493b      	ldrne	r1, [pc, #236]	; (b6454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6366:	493c      	ldreq	r1, [pc, #240]	; (b6458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6368:	2202      	movs	r2, #2
            write(": ", 2);
   b636a:	4620      	mov	r0, r4
   b636c:	4798      	blx	r3
    if (attr.has_function) {
   b636e:	792b      	ldrb	r3, [r5, #4]
   b6370:	0758      	lsls	r0, r3, #29
   b6372:	d51d      	bpl.n	b63b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6374:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6376:	460b      	mov	r3, r1
   b6378:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b637a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b637e:	b160      	cbz	r0, b639a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6380:	2820      	cmp	r0, #32
   b6382:	d108      	bne.n	b6396 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6384:	4619      	mov	r1, r3
   b6386:	e7f7      	b.n	b6378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6388:	4834      	ldr	r0, [pc, #208]	; (b645c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b638a:	f000 f966 	bl	b665a <_ZN5spark12NetworkClass9listeningEv>
   b638e:	2800      	cmp	r0, #0
   b6390:	d0ad      	beq.n	b62ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6396:	2828      	cmp	r0, #40	; 0x28
   b6398:	d1ee      	bne.n	b6378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b639a:	6823      	ldr	r3, [r4, #0]
   b639c:	1a52      	subs	r2, r2, r1
   b639e:	68db      	ldr	r3, [r3, #12]
   b63a0:	4620      	mov	r0, r4
   b63a2:	4798      	blx	r3
        write("(): ", 4);
   b63a4:	6823      	ldr	r3, [r4, #0]
   b63a6:	492e      	ldr	r1, [pc, #184]	; (b6460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b63a8:	68db      	ldr	r3, [r3, #12]
   b63aa:	2204      	movs	r2, #4
   b63ac:	4620      	mov	r0, r4
   b63ae:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b63b0:	2100      	movs	r1, #0
   b63b2:	4638      	mov	r0, r7
   b63b4:	f7fe fd30 	bl	b4e18 <log_level_name>
   b63b8:	4601      	mov	r1, r0
    write(s);
   b63ba:	4620      	mov	r0, r4
   b63bc:	f7ff fa11 	bl	b57e2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b63c0:	6823      	ldr	r3, [r4, #0]
   b63c2:	4925      	ldr	r1, [pc, #148]	; (b6458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b63c4:	68db      	ldr	r3, [r3, #12]
   b63c6:	2202      	movs	r2, #2
   b63c8:	4620      	mov	r0, r4
   b63ca:	4798      	blx	r3
    if (msg) {
   b63cc:	b11e      	cbz	r6, b63d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b63ce:	4631      	mov	r1, r6
   b63d0:	4620      	mov	r0, r4
   b63d2:	f7ff fa06 	bl	b57e2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b63d6:	792b      	ldrb	r3, [r5, #4]
   b63d8:	f013 0f30 	tst.w	r3, #48	; 0x30
   b63dc:	d02c      	beq.n	b6438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b63de:	6823      	ldr	r3, [r4, #0]
   b63e0:	4920      	ldr	r1, [pc, #128]	; (b6464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b63e2:	68db      	ldr	r3, [r3, #12]
   b63e4:	2202      	movs	r2, #2
   b63e6:	4620      	mov	r0, r4
   b63e8:	4798      	blx	r3
        if (attr.has_code) {
   b63ea:	792b      	ldrb	r3, [r5, #4]
   b63ec:	06d9      	lsls	r1, r3, #27
   b63ee:	d50a      	bpl.n	b6406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b63f0:	6823      	ldr	r3, [r4, #0]
   b63f2:	491d      	ldr	r1, [pc, #116]	; (b6468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b63f4:	68db      	ldr	r3, [r3, #12]
   b63f6:	2207      	movs	r2, #7
   b63f8:	4620      	mov	r0, r4
   b63fa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b63fc:	69aa      	ldr	r2, [r5, #24]
   b63fe:	491b      	ldr	r1, [pc, #108]	; (b646c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6400:	4620      	mov	r0, r4
   b6402:	f7ff fa09 	bl	b5818 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6406:	792b      	ldrb	r3, [r5, #4]
   b6408:	069a      	lsls	r2, r3, #26
   b640a:	d511      	bpl.n	b6430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b640c:	06db      	lsls	r3, r3, #27
   b640e:	d505      	bpl.n	b641c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6410:	6823      	ldr	r3, [r4, #0]
   b6412:	4910      	ldr	r1, [pc, #64]	; (b6454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6414:	68db      	ldr	r3, [r3, #12]
   b6416:	2202      	movs	r2, #2
   b6418:	4620      	mov	r0, r4
   b641a:	4798      	blx	r3
            write("details = ", 10);
   b641c:	6823      	ldr	r3, [r4, #0]
   b641e:	4914      	ldr	r1, [pc, #80]	; (b6470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6420:	68db      	ldr	r3, [r3, #12]
   b6422:	4620      	mov	r0, r4
   b6424:	220a      	movs	r2, #10
   b6426:	4798      	blx	r3
            write(attr.details);
   b6428:	69e9      	ldr	r1, [r5, #28]
   b642a:	4620      	mov	r0, r4
   b642c:	f7ff f9d9 	bl	b57e2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6430:	215d      	movs	r1, #93	; 0x5d
   b6432:	4620      	mov	r0, r4
   b6434:	f7ff f9e4 	bl	b5800 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6438:	6823      	ldr	r3, [r4, #0]
   b643a:	490e      	ldr	r1, [pc, #56]	; (b6474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b643c:	68db      	ldr	r3, [r3, #12]
   b643e:	4620      	mov	r0, r4
   b6440:	2202      	movs	r2, #2
}
   b6442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6446:	4718      	bx	r3
   b6448:	000b7839 	.word	0x000b7839
   b644c:	000b7840 	.word	0x000b7840
   b6450:	000b7800 	.word	0x000b7800
   b6454:	000b7843 	.word	0x000b7843
   b6458:	000b7848 	.word	0x000b7848
   b645c:	2003e6dc 	.word	0x2003e6dc
   b6460:	000b7846 	.word	0x000b7846
   b6464:	000b784b 	.word	0x000b784b
   b6468:	000b784e 	.word	0x000b784e
   b646c:	000b7856 	.word	0x000b7856
   b6470:	000b7859 	.word	0x000b7859
   b6474:	000b7864 	.word	0x000b7864

000b6478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b647c:	b085      	sub	sp, #20
    return stream_;
   b647e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6482:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6484:	4605      	mov	r5, r0
   b6486:	460f      	mov	r7, r1
   b6488:	4690      	mov	r8, r2
   b648a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b648c:	f000 fb56 	bl	b6b3c <_Z16_fetch_usbserialv>
   b6490:	4581      	cmp	r9, r0
   b6492:	d105      	bne.n	b64a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6494:	4849      	ldr	r0, [pc, #292]	; (b65bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6496:	f000 f8e0 	bl	b665a <_ZN5spark12NetworkClass9listeningEv>
   b649a:	2800      	cmp	r0, #0
   b649c:	f040 808a 	bne.w	b65b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b64a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b64a2:	4a47      	ldr	r2, [pc, #284]	; (b65c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b64a4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b64a6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b64aa:	a801      	add	r0, sp, #4
        strm_(stream) {
   b64ac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b64ae:	f88d 9008 	strb.w	r9, [sp, #8]
   b64b2:	f7ff f878 	bl	b55a6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b64b6:	4649      	mov	r1, r9
   b64b8:	4640      	mov	r0, r8
   b64ba:	f7fe fcad 	bl	b4e18 <log_level_name>
    json.name("l", 1).value(s);
   b64be:	4941      	ldr	r1, [pc, #260]	; (b65c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b64c0:	4680      	mov	r8, r0
   b64c2:	2201      	movs	r2, #1
   b64c4:	a801      	add	r0, sp, #4
   b64c6:	f7ff f8fd 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b64ca:	4641      	mov	r1, r8
   b64cc:	f7ff f97b 	bl	b57c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b64d0:	b13f      	cbz	r7, b64e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b64d2:	493d      	ldr	r1, [pc, #244]	; (b65c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b64d4:	2201      	movs	r2, #1
   b64d6:	a801      	add	r0, sp, #4
   b64d8:	f7ff f8f4 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b64dc:	4639      	mov	r1, r7
   b64de:	f7ff f972 	bl	b57c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b64e2:	b13e      	cbz	r6, b64f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b64e4:	4939      	ldr	r1, [pc, #228]	; (b65cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b64e6:	2201      	movs	r2, #1
   b64e8:	a801      	add	r0, sp, #4
   b64ea:	f7ff f8eb 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b64ee:	4631      	mov	r1, r6
   b64f0:	f7ff f969 	bl	b57c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b64f4:	7923      	ldrb	r3, [r4, #4]
   b64f6:	07df      	lsls	r7, r3, #31
   b64f8:	d50e      	bpl.n	b6518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b64fa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b64fc:	212f      	movs	r1, #47	; 0x2f
   b64fe:	4630      	mov	r0, r6
   b6500:	f000 ff53 	bl	b73aa <strrchr>
    if (s1) {
   b6504:	b100      	cbz	r0, b6508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6506:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6508:	4931      	ldr	r1, [pc, #196]	; (b65d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b650a:	2201      	movs	r2, #1
   b650c:	a801      	add	r0, sp, #4
   b650e:	f7ff f8d9 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6512:	4631      	mov	r1, r6
   b6514:	f7ff f957 	bl	b57c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6518:	7923      	ldrb	r3, [r4, #4]
   b651a:	079e      	lsls	r6, r3, #30
   b651c:	d507      	bpl.n	b652e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b651e:	492d      	ldr	r1, [pc, #180]	; (b65d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6520:	2202      	movs	r2, #2
   b6522:	a801      	add	r0, sp, #4
   b6524:	f7ff f8ce 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6528:	68e1      	ldr	r1, [r4, #12]
   b652a:	f7ff f849 	bl	b55c0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b652e:	7923      	ldrb	r3, [r4, #4]
   b6530:	0758      	lsls	r0, r3, #29
   b6532:	d514      	bpl.n	b655e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6534:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6536:	4633      	mov	r3, r6
   b6538:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b653a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b653e:	b12a      	cbz	r2, b654c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6540:	2a20      	cmp	r2, #32
   b6542:	d101      	bne.n	b6548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6544:	461e      	mov	r6, r3
   b6546:	e7f7      	b.n	b6538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6548:	2a28      	cmp	r2, #40	; 0x28
   b654a:	d1f5      	bne.n	b6538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b654c:	4922      	ldr	r1, [pc, #136]	; (b65d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b654e:	2202      	movs	r2, #2
   b6550:	a801      	add	r0, sp, #4
   b6552:	f7ff f8b7 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6556:	1bba      	subs	r2, r7, r6
   b6558:	4631      	mov	r1, r6
   b655a:	f7ff f8c3 	bl	b56e4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b655e:	7923      	ldrb	r3, [r4, #4]
   b6560:	0719      	lsls	r1, r3, #28
   b6562:	d507      	bpl.n	b6574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6564:	491d      	ldr	r1, [pc, #116]	; (b65dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6566:	2201      	movs	r2, #1
   b6568:	a801      	add	r0, sp, #4
   b656a:	f7ff f8ab 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b656e:	6961      	ldr	r1, [r4, #20]
   b6570:	f7ff f838 	bl	b55e4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6574:	7923      	ldrb	r3, [r4, #4]
   b6576:	06da      	lsls	r2, r3, #27
   b6578:	d508      	bpl.n	b658c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b657a:	2204      	movs	r2, #4
   b657c:	4918      	ldr	r1, [pc, #96]	; (b65e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b657e:	eb0d 0002 	add.w	r0, sp, r2
   b6582:	f7ff f89f 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b6586:	69a1      	ldr	r1, [r4, #24]
   b6588:	f7ff f81a 	bl	b55c0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b658c:	7923      	ldrb	r3, [r4, #4]
   b658e:	069b      	lsls	r3, r3, #26
   b6590:	d507      	bpl.n	b65a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6592:	4914      	ldr	r1, [pc, #80]	; (b65e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6594:	2206      	movs	r2, #6
   b6596:	a801      	add	r0, sp, #4
   b6598:	f7ff f894 	bl	b56c4 <_ZN5spark10JSONWriter4nameEPKcj>
   b659c:	69e1      	ldr	r1, [r4, #28]
   b659e:	f7ff f912 	bl	b57c6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b65a2:	a801      	add	r0, sp, #4
   b65a4:	f7fe ffe9 	bl	b557a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b65a8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b65aa:	490f      	ldr	r1, [pc, #60]	; (b65e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b65ac:	6803      	ldr	r3, [r0, #0]
   b65ae:	2202      	movs	r2, #2
   b65b0:	68db      	ldr	r3, [r3, #12]
   b65b2:	4798      	blx	r3
}
   b65b4:	b005      	add	sp, #20
   b65b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b65ba:	bf00      	nop
   b65bc:	2003e6dc 	.word	0x2003e6dc
   b65c0:	000b7888 	.word	0x000b7888
   b65c4:	000b7816 	.word	0x000b7816
   b65c8:	000b7867 	.word	0x000b7867
   b65cc:	000b7a1f 	.word	0x000b7a1f
   b65d0:	000b7869 	.word	0x000b7869
   b65d4:	000b786b 	.word	0x000b786b
   b65d8:	000b786e 	.word	0x000b786e
   b65dc:	000b7871 	.word	0x000b7871
   b65e0:	000b7873 	.word	0x000b7873
   b65e4:	000b7878 	.word	0x000b7878
   b65e8:	000b7864 	.word	0x000b7864

000b65ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b65ec:	2300      	movs	r3, #0
   b65ee:	6840      	ldr	r0, [r0, #4]
   b65f0:	461a      	mov	r2, r3
   b65f2:	f7fe bc55 	b.w	b4ea0 <network_connect>

000b65f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b65f6:	6840      	ldr	r0, [r0, #4]
   b65f8:	2200      	movs	r2, #0
   b65fa:	2102      	movs	r1, #2
   b65fc:	f7fe bc60 	b.w	b4ec0 <network_disconnect>

000b6600 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6600:	2200      	movs	r2, #0
   b6602:	6840      	ldr	r0, [r0, #4]
   b6604:	4611      	mov	r1, r2
   b6606:	f7fe bc53 	b.w	b4eb0 <network_connecting>

000b660a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b660a:	2200      	movs	r2, #0
   b660c:	6840      	ldr	r0, [r0, #4]
   b660e:	4611      	mov	r1, r2
   b6610:	f7fe bc5e 	b.w	b4ed0 <network_ready>

000b6614 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6614:	2300      	movs	r3, #0
   b6616:	6840      	ldr	r0, [r0, #4]
   b6618:	461a      	mov	r2, r3
   b661a:	4619      	mov	r1, r3
   b661c:	f7fe bc60 	b.w	b4ee0 <network_on>

000b6620 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6620:	2300      	movs	r3, #0
   b6622:	6840      	ldr	r0, [r0, #4]
   b6624:	461a      	mov	r2, r3
   b6626:	4619      	mov	r1, r3
   b6628:	f7fe bc62 	b.w	b4ef0 <network_off>

000b662c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b662c:	6840      	ldr	r0, [r0, #4]
   b662e:	2100      	movs	r1, #0
   b6630:	f7fe bc86 	b.w	b4f40 <network_is_on>

000b6634 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6634:	6840      	ldr	r0, [r0, #4]
   b6636:	2100      	movs	r1, #0
   b6638:	f7fe bc8a 	b.w	b4f50 <network_is_off>

000b663c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b663c:	6840      	ldr	r0, [r0, #4]
   b663e:	2200      	movs	r2, #0
   b6640:	f081 0101 	eor.w	r1, r1, #1
   b6644:	f7fe bc5c 	b.w	b4f00 <network_listen>

000b6648 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6648:	6840      	ldr	r0, [r0, #4]
   b664a:	2200      	movs	r2, #0
   b664c:	f7fe bc68 	b.w	b4f20 <network_set_listen_timeout>

000b6650 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6650:	2200      	movs	r2, #0
   b6652:	6840      	ldr	r0, [r0, #4]
   b6654:	4611      	mov	r1, r2
   b6656:	f7fe bc6b 	b.w	b4f30 <network_get_listen_timeout>

000b665a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b665a:	2200      	movs	r2, #0
   b665c:	6840      	ldr	r0, [r0, #4]
   b665e:	4611      	mov	r1, r2
   b6660:	f7fe bc56 	b.w	b4f10 <network_listening>

000b6664 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6668:	b095      	sub	sp, #84	; 0x54
   b666a:	4614      	mov	r4, r2
   b666c:	460d      	mov	r5, r1
   b666e:	4607      	mov	r7, r0
    IPAddress addr;
   b6670:	f7fe fe32 	bl	b52d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6674:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6676:	221c      	movs	r2, #28
   b6678:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b667a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b667c:	f000 fe1a 	bl	b72b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6680:	2340      	movs	r3, #64	; 0x40
   b6682:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6684:	4620      	mov	r0, r4
   b6686:	466b      	mov	r3, sp
   b6688:	aa0c      	add	r2, sp, #48	; 0x30
   b668a:	2100      	movs	r1, #0
   b668c:	f7fe fb1c 	bl	b4cc8 <netdb_getaddrinfo>
    if (!r) {
   b6690:	4604      	mov	r4, r0
   b6692:	2800      	cmp	r0, #0
   b6694:	d14b      	bne.n	b672e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6696:	4602      	mov	r2, r0
   b6698:	2101      	movs	r1, #1
   b669a:	6868      	ldr	r0, [r5, #4]
   b669c:	f7fe fc18 	bl	b4ed0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b66a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b66a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b66a4:	4622      	mov	r2, r4
   b66a6:	6868      	ldr	r0, [r5, #4]
   b66a8:	f7fe fc12 	bl	b4ed0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b66ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b66ae:	4681      	mov	r9, r0
        bool ok = false;
   b66b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b66b2:	2e00      	cmp	r6, #0
   b66b4:	d03b      	beq.n	b672e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b66b6:	2900      	cmp	r1, #0
   b66b8:	d139      	bne.n	b672e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b66ba:	6873      	ldr	r3, [r6, #4]
   b66bc:	2b02      	cmp	r3, #2
   b66be:	d003      	beq.n	b66c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b66c0:	2b0a      	cmp	r3, #10
   b66c2:	d011      	beq.n	b66e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b66c4:	69f6      	ldr	r6, [r6, #28]
   b66c6:	e7f4      	b.n	b66b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b66c8:	f1b8 0f00 	cmp.w	r8, #0
   b66cc:	d0fa      	beq.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b66ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b66d0:	a806      	add	r0, sp, #24
   b66d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b66d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b66d6:	f7fe fe2d 	bl	b5334 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b66da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66dc:	1d3c      	adds	r4, r7, #4
   b66de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66e0:	682b      	ldr	r3, [r5, #0]
   b66e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b66e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b66e6:	e7ed      	b.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b66e8:	f1b9 0f00 	cmp.w	r9, #0
   b66ec:	d0ea      	beq.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b66ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b66f0:	2210      	movs	r2, #16
   b66f2:	a801      	add	r0, sp, #4
   b66f4:	f000 fdde 	bl	b72b4 <memset>
                    a.v = 6;
   b66f8:	2306      	movs	r3, #6
   b66fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b66fe:	ad01      	add	r5, sp, #4
   b6700:	f104 0308 	add.w	r3, r4, #8
   b6704:	3418      	adds	r4, #24
   b6706:	6818      	ldr	r0, [r3, #0]
   b6708:	6859      	ldr	r1, [r3, #4]
   b670a:	462a      	mov	r2, r5
   b670c:	c203      	stmia	r2!, {r0, r1}
   b670e:	3308      	adds	r3, #8
   b6710:	42a3      	cmp	r3, r4
   b6712:	4615      	mov	r5, r2
   b6714:	d1f7      	bne.n	b6706 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6716:	a901      	add	r1, sp, #4
   b6718:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b671a:	ad07      	add	r5, sp, #28
   b671c:	f7fe fdea 	bl	b52f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6722:	1d3c      	adds	r4, r7, #4
   b6724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6726:	682b      	ldr	r3, [r5, #0]
   b6728:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b672a:	4649      	mov	r1, r9
   b672c:	e7ca      	b.n	b66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b672e:	9800      	ldr	r0, [sp, #0]
   b6730:	f7fe fac2 	bl	b4cb8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6734:	4638      	mov	r0, r7
   b6736:	b015      	add	sp, #84	; 0x54
   b6738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b673c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b673c:	4b02      	ldr	r3, [pc, #8]	; (b6748 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b673e:	4a03      	ldr	r2, [pc, #12]	; (b674c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6740:	601a      	str	r2, [r3, #0]
   b6742:	2200      	movs	r2, #0
   b6744:	605a      	str	r2, [r3, #4]

} // spark
   b6746:	4770      	bx	lr
   b6748:	2003e6dc 	.word	0x2003e6dc
   b674c:	000b7900 	.word	0x000b7900

000b6750 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6752:	4606      	mov	r6, r0
   b6754:	460d      	mov	r5, r1
  size_t n = 0;
   b6756:	188f      	adds	r7, r1, r2
   b6758:	2400      	movs	r4, #0
  while (size--) {
   b675a:	42bd      	cmp	r5, r7
   b675c:	d00c      	beq.n	b6778 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b675e:	6833      	ldr	r3, [r6, #0]
   b6760:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6764:	689b      	ldr	r3, [r3, #8]
   b6766:	4630      	mov	r0, r6
   b6768:	4798      	blx	r3
     if (chunk>=0)
   b676a:	1e03      	subs	r3, r0, #0
   b676c:	db01      	blt.n	b6772 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b676e:	441c      	add	r4, r3
  while (size--) {
   b6770:	e7f3      	b.n	b675a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6772:	2c00      	cmp	r4, #0
   b6774:	bf08      	it	eq
   b6776:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6778:	4620      	mov	r0, r4
   b677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b677c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b677c:	b513      	push	{r0, r1, r4, lr}
   b677e:	4604      	mov	r4, r0
    }
   b6780:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6782:	b159      	cbz	r1, b679c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6784:	9101      	str	r1, [sp, #4]
   b6786:	f000 fdf4 	bl	b7372 <strlen>
   b678a:	6823      	ldr	r3, [r4, #0]
   b678c:	9901      	ldr	r1, [sp, #4]
   b678e:	68db      	ldr	r3, [r3, #12]
   b6790:	4602      	mov	r2, r0
   b6792:	4620      	mov	r0, r4
    }
   b6794:	b002      	add	sp, #8
   b6796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b679a:	4718      	bx	r3
    }
   b679c:	b002      	add	sp, #8
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b67a0:	6803      	ldr	r3, [r0, #0]
   b67a2:	689b      	ldr	r3, [r3, #8]
   b67a4:	4718      	bx	r3

000b67a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b67a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b67a8:	210d      	movs	r1, #13
{
   b67aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b67ac:	f7ff fff8 	bl	b67a0 <_ZN5Print5printEc>
  n += print('\n');
   b67b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b67b2:	4604      	mov	r4, r0
  n += print('\n');
   b67b4:	4628      	mov	r0, r5
   b67b6:	f7ff fff3 	bl	b67a0 <_ZN5Print5printEc>
  return n;
}
   b67ba:	4420      	add	r0, r4
   b67bc:	bd38      	pop	{r3, r4, r5, pc}

000b67be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b67be:	b530      	push	{r4, r5, lr}
   b67c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b67c2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b67c4:	2a01      	cmp	r2, #1
  *str = '\0';
   b67c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b67ca:	bf98      	it	ls
   b67cc:	220a      	movls	r2, #10
   b67ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b67d0:	460d      	mov	r5, r1
   b67d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b67d6:	fb01 5312 	mls	r3, r1, r2, r5
   b67da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67de:	2b09      	cmp	r3, #9
   b67e0:	bf94      	ite	ls
   b67e2:	3330      	addls	r3, #48	; 0x30
   b67e4:	3337      	addhi	r3, #55	; 0x37
   b67e6:	b2db      	uxtb	r3, r3
  } while(n);
   b67e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b67ee:	d9ef      	bls.n	b67d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b67f0:	4621      	mov	r1, r4
   b67f2:	f7ff ffc3 	bl	b677c <_ZN5Print5writeEPKc>
}
   b67f6:	b00b      	add	sp, #44	; 0x2c
   b67f8:	bd30      	pop	{r4, r5, pc}

000b67fa <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b67fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67fe:	b086      	sub	sp, #24
   b6800:	af00      	add	r7, sp, #0
   b6802:	4605      	mov	r5, r0
   b6804:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6806:	1d38      	adds	r0, r7, #4
   b6808:	2114      	movs	r1, #20
{
   b680a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b680c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b680e:	f7fe fbbf 	bl	b4f90 <vsnprintf>

    if (n<bufsize)
   b6812:	2813      	cmp	r0, #19
   b6814:	d80e      	bhi.n	b6834 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6816:	1d39      	adds	r1, r7, #4
   b6818:	4628      	mov	r0, r5
   b681a:	f7ff ffaf 	bl	b677c <_ZN5Print5writeEPKc>
   b681e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6820:	b11e      	cbz	r6, b682a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6822:	4628      	mov	r0, r5
   b6824:	f7ff ffbf 	bl	b67a6 <_ZN5Print7printlnEv>
   b6828:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b682a:	4620      	mov	r0, r4
   b682c:	3718      	adds	r7, #24
   b682e:	46bd      	mov	sp, r7
   b6830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6834:	f100 0308 	add.w	r3, r0, #8
   b6838:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b683c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b683e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6842:	4622      	mov	r2, r4
   b6844:	1c41      	adds	r1, r0, #1
   b6846:	683b      	ldr	r3, [r7, #0]
   b6848:	4668      	mov	r0, sp
   b684a:	f7fe fba1 	bl	b4f90 <vsnprintf>
  return write(str);
   b684e:	4669      	mov	r1, sp
   b6850:	4628      	mov	r0, r5
   b6852:	f7ff ff93 	bl	b677c <_ZN5Print5writeEPKc>
   b6856:	4604      	mov	r4, r0
   b6858:	46c5      	mov	sp, r8
   b685a:	e7e1      	b.n	b6820 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b685c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b685c:	4b01      	ldr	r3, [pc, #4]	; (b6864 <_GLOBAL__sub_I_RGB+0x8>)
   b685e:	2200      	movs	r2, #0
   b6860:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6862:	4770      	bx	lr
   b6864:	2003e6e4 	.word	0x2003e6e4

000b6868 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6868:	b510      	push	{r4, lr}
   b686a:	4604      	mov	r4, r0
{
	free(buffer);
   b686c:	6800      	ldr	r0, [r0, #0]
   b686e:	f7fe fb7f 	bl	b4f70 <free>
}
   b6872:	4620      	mov	r0, r4
   b6874:	bd10      	pop	{r4, pc}

000b6876 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6876:	b510      	push	{r4, lr}
   b6878:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b687a:	6800      	ldr	r0, [r0, #0]
   b687c:	b108      	cbz	r0, b6882 <_ZN6String10invalidateEv+0xc>
   b687e:	f7fe fb77 	bl	b4f70 <free>
	buffer = NULL;
   b6882:	2300      	movs	r3, #0
	capacity = len = 0;
   b6884:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6888:	6023      	str	r3, [r4, #0]
}
   b688a:	bd10      	pop	{r4, pc}

000b688c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b688c:	b538      	push	{r3, r4, r5, lr}
   b688e:	4604      	mov	r4, r0
   b6890:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6892:	6800      	ldr	r0, [r0, #0]
   b6894:	3101      	adds	r1, #1
   b6896:	f7fe fb73 	bl	b4f80 <realloc>
	if (newbuffer) {
   b689a:	b110      	cbz	r0, b68a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b689c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b68a0:	2001      	movs	r0, #1
	}
	return 0;
}
   b68a2:	bd38      	pop	{r3, r4, r5, pc}

000b68a4 <_ZN6String7reserveEj>:
{
   b68a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b68a6:	6803      	ldr	r3, [r0, #0]
{
   b68a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b68aa:	b123      	cbz	r3, b68b6 <_ZN6String7reserveEj+0x12>
   b68ac:	6843      	ldr	r3, [r0, #4]
   b68ae:	428b      	cmp	r3, r1
   b68b0:	d301      	bcc.n	b68b6 <_ZN6String7reserveEj+0x12>
   b68b2:	2001      	movs	r0, #1
}
   b68b4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b68b6:	4620      	mov	r0, r4
   b68b8:	f7ff ffe8 	bl	b688c <_ZN6String12changeBufferEj>
   b68bc:	2800      	cmp	r0, #0
   b68be:	d0f9      	beq.n	b68b4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b68c0:	68a3      	ldr	r3, [r4, #8]
   b68c2:	2b00      	cmp	r3, #0
   b68c4:	d1f5      	bne.n	b68b2 <_ZN6String7reserveEj+0xe>
   b68c6:	6822      	ldr	r2, [r4, #0]
   b68c8:	7013      	strb	r3, [r2, #0]
   b68ca:	e7f2      	b.n	b68b2 <_ZN6String7reserveEj+0xe>

000b68cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b68cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68ce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b68d0:	4611      	mov	r1, r2
   b68d2:	9201      	str	r2, [sp, #4]
{
   b68d4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b68d6:	f7ff ffe5 	bl	b68a4 <_ZN6String7reserveEj>
   b68da:	9a01      	ldr	r2, [sp, #4]
   b68dc:	b928      	cbnz	r0, b68ea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b68de:	4620      	mov	r0, r4
   b68e0:	f7ff ffc9 	bl	b6876 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b68e4:	4620      	mov	r0, r4
   b68e6:	b003      	add	sp, #12
   b68e8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b68ea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b68ec:	4629      	mov	r1, r5
   b68ee:	6820      	ldr	r0, [r4, #0]
   b68f0:	f000 fcb8 	bl	b7264 <memcpy>
	buffer[len] = 0;
   b68f4:	6822      	ldr	r2, [r4, #0]
   b68f6:	68a3      	ldr	r3, [r4, #8]
   b68f8:	2100      	movs	r1, #0
   b68fa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b68fc:	e7f2      	b.n	b68e4 <_ZN6String4copyEPKcj+0x18>

000b68fe <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b68fe:	b538      	push	{r3, r4, r5, lr}
   b6900:	4605      	mov	r5, r0
	if (buffer) {
   b6902:	6800      	ldr	r0, [r0, #0]
{
   b6904:	460c      	mov	r4, r1
	if (buffer) {
   b6906:	b168      	cbz	r0, b6924 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6908:	686a      	ldr	r2, [r5, #4]
   b690a:	688b      	ldr	r3, [r1, #8]
   b690c:	429a      	cmp	r2, r3
   b690e:	d307      	bcc.n	b6920 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6910:	6809      	ldr	r1, [r1, #0]
   b6912:	f000 fd26 	bl	b7362 <strcpy>
			len = rhs.len;
   b6916:	68a3      	ldr	r3, [r4, #8]
   b6918:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b691a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b691c:	60a3      	str	r3, [r4, #8]
}
   b691e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6920:	f7fe fb26 	bl	b4f70 <free>
	buffer = rhs.buffer;
   b6924:	6823      	ldr	r3, [r4, #0]
   b6926:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6928:	6863      	ldr	r3, [r4, #4]
   b692a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b692c:	68a3      	ldr	r3, [r4, #8]
   b692e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6930:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6932:	e9c4 3300 	strd	r3, r3, [r4]
   b6936:	e7f1      	b.n	b691c <_ZN6String4moveERS_+0x1e>

000b6938 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b6938:	b510      	push	{r4, lr}
	buffer = NULL;
   b693a:	2300      	movs	r3, #0
	capacity = 0;
   b693c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6940:	4604      	mov	r4, r0
	len = 0;
   b6942:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6944:	7303      	strb	r3, [r0, #12]
	move(rval);
   b6946:	f7ff ffda 	bl	b68fe <_ZN6String4moveERS_>
}
   b694a:	4620      	mov	r0, r4
   b694c:	bd10      	pop	{r4, pc}

000b694e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b694e:	4288      	cmp	r0, r1
{
   b6950:	b510      	push	{r4, lr}
   b6952:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6954:	d005      	beq.n	b6962 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6956:	680b      	ldr	r3, [r1, #0]
   b6958:	b12b      	cbz	r3, b6966 <_ZN6StringaSERKS_+0x18>
   b695a:	688a      	ldr	r2, [r1, #8]
   b695c:	4619      	mov	r1, r3
   b695e:	f7ff ffb5 	bl	b68cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6962:	4620      	mov	r0, r4
   b6964:	bd10      	pop	{r4, pc}
	else invalidate();
   b6966:	f7ff ff86 	bl	b6876 <_ZN6String10invalidateEv>
   b696a:	e7fa      	b.n	b6962 <_ZN6StringaSERKS_+0x14>

000b696c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b696c:	b510      	push	{r4, lr}
	buffer = NULL;
   b696e:	2300      	movs	r3, #0
String::String(const String &value)
   b6970:	4604      	mov	r4, r0
	capacity = 0;
   b6972:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6976:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6978:	7303      	strb	r3, [r0, #12]
	*this = value;
   b697a:	f7ff ffe8 	bl	b694e <_ZN6StringaSERKS_>
}
   b697e:	4620      	mov	r0, r4
   b6980:	bd10      	pop	{r4, pc}
	...

000b6984 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6984:	4b05      	ldr	r3, [pc, #20]	; (b699c <_GLOBAL__sub_I_System+0x18>)
   b6986:	2202      	movs	r2, #2
   b6988:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b698a:	4b05      	ldr	r3, [pc, #20]	; (b69a0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b698c:	4a05      	ldr	r2, [pc, #20]	; (b69a4 <_GLOBAL__sub_I_System+0x20>)
   b698e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6990:	2000      	movs	r0, #0
   b6992:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6996:	f7fe ba4f 	b.w	b4e38 <set_system_mode>
   b699a:	bf00      	nop
   b699c:	2003e700 	.word	0x2003e700
   b69a0:	2003e6f4 	.word	0x2003e6f4
   b69a4:	ffff0000 	.word	0xffff0000

000b69a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b69a8:	4b02      	ldr	r3, [pc, #8]	; (b69b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b69aa:	681a      	ldr	r2, [r3, #0]
   b69ac:	4b02      	ldr	r3, [pc, #8]	; (b69b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b69ae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b69b0:	4770      	bx	lr
   b69b2:	bf00      	nop
   b69b4:	2003e5b4 	.word	0x2003e5b4
   b69b8:	2003e704 	.word	0x2003e704

000b69bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b69bc:	4770      	bx	lr

000b69be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b69be:	7441      	strb	r1, [r0, #17]
}
   b69c0:	4770      	bx	lr

000b69c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b69c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b69c4:	7c00      	ldrb	r0, [r0, #16]
   b69c6:	f7fe f9b7 	bl	b4d38 <hal_usart_available_data_for_write>
}
   b69ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69ce:	bd08      	pop	{r3, pc}

000b69d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b69d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b69d2:	7c00      	ldrb	r0, [r0, #16]
   b69d4:	f7fe f990 	bl	b4cf8 <hal_usart_available>
}
   b69d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b69dc:	bd08      	pop	{r3, pc}

000b69de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b69de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b69e0:	7c00      	ldrb	r0, [r0, #16]
   b69e2:	f7fe f999 	bl	b4d18 <hal_usart_peek>
}
   b69e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69ea:	bd08      	pop	{r3, pc}

000b69ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b69ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b69ee:	7c00      	ldrb	r0, [r0, #16]
   b69f0:	f7fe f98a 	bl	b4d08 <hal_usart_read>
}
   b69f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b69f8:	bd08      	pop	{r3, pc}

000b69fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b69fa:	7c00      	ldrb	r0, [r0, #16]
   b69fc:	f7fe b994 	b.w	b4d28 <hal_usart_flush>

000b6a00 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a02:	7c45      	ldrb	r5, [r0, #17]
{
   b6a04:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a06:	b12d      	cbz	r5, b6a14 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6a08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6a0a:	b003      	add	sp, #12
   b6a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6a10:	f7fe b96a 	b.w	b4ce8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6a14:	7c00      	ldrb	r0, [r0, #16]
   b6a16:	9101      	str	r1, [sp, #4]
   b6a18:	f7fe f98e 	bl	b4d38 <hal_usart_available_data_for_write>
   b6a1c:	2800      	cmp	r0, #0
   b6a1e:	9901      	ldr	r1, [sp, #4]
   b6a20:	dcf2      	bgt.n	b6a08 <_ZN11USARTSerial5writeEh+0x8>
}
   b6a22:	4628      	mov	r0, r5
   b6a24:	b003      	add	sp, #12
   b6a26:	bd30      	pop	{r4, r5, pc}

000b6a28 <_ZN11USARTSerialD0Ev>:
   b6a28:	b510      	push	{r4, lr}
   b6a2a:	2114      	movs	r1, #20
   b6a2c:	4604      	mov	r4, r0
   b6a2e:	f7fd fb36 	bl	b409e <_ZdlPvj>
   b6a32:	4620      	mov	r0, r4
   b6a34:	bd10      	pop	{r4, pc}
	...

000b6a38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6a38:	b510      	push	{r4, lr}
   b6a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6a3e:	4604      	mov	r4, r0
   b6a40:	4608      	mov	r0, r1
   b6a42:	4611      	mov	r1, r2
   b6a44:	2200      	movs	r2, #0
   b6a46:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6a4a:	4b04      	ldr	r3, [pc, #16]	; (b6a5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6a4c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6a4e:	2301      	movs	r3, #1
  _serial = serial;
   b6a50:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6a52:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6a54:	f7fe f980 	bl	b4d58 <hal_usart_init_ex>
}
   b6a58:	4620      	mov	r0, r4
   b6a5a:	bd10      	pop	{r4, pc}
   b6a5c:	000b7958 	.word	0x000b7958

000b6a60 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6a60:	7c00      	ldrb	r0, [r0, #16]
   b6a62:	2300      	movs	r3, #0
   b6a64:	f7fe b970 	b.w	b4d48 <hal_usart_begin_config>

000b6a68 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6a68:	2200      	movs	r2, #0
   b6a6a:	f7ff bff9 	b.w	b6a60 <_ZN11USARTSerial5beginEmm>

000b6a6e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b6a6e:	7c00      	ldrb	r0, [r0, #16]
   b6a70:	f7fe b932 	b.w	b4cd8 <hal_usart_end>

000b6a74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6a74:	7441      	strb	r1, [r0, #17]
}
   b6a76:	4770      	bx	lr

000b6a78 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6a78:	4770      	bx	lr

000b6a7a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6a7a:	4770      	bx	lr

000b6a7c <_ZN9USBSerial4readEv>:
{
   b6a7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6a7e:	2100      	movs	r1, #0
   b6a80:	7c00      	ldrb	r0, [r0, #16]
   b6a82:	f7fe f999 	bl	b4db8 <HAL_USB_USART_Receive_Data>
}
   b6a86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6a8a:	bd08      	pop	{r3, pc}

000b6a8c <_ZN9USBSerial4peekEv>:
{
   b6a8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6a8e:	2101      	movs	r1, #1
   b6a90:	7c00      	ldrb	r0, [r0, #16]
   b6a92:	f7fe f991 	bl	b4db8 <HAL_USB_USART_Receive_Data>
}
   b6a96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6a9a:	bd08      	pop	{r3, pc}

000b6a9c <_ZN9USBSerial17availableForWriteEv>:
{
   b6a9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6a9e:	7c00      	ldrb	r0, [r0, #16]
   b6aa0:	f7fe f982 	bl	b4da8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6aa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6aa8:	bd08      	pop	{r3, pc}

000b6aaa <_ZN9USBSerial9availableEv>:
{
   b6aaa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6aac:	7c00      	ldrb	r0, [r0, #16]
   b6aae:	f7fe f973 	bl	b4d98 <HAL_USB_USART_Available_Data>
}
   b6ab2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ab6:	bd08      	pop	{r3, pc}

000b6ab8 <_ZN9USBSerial5writeEh>:
{
   b6ab8:	b513      	push	{r0, r1, r4, lr}
   b6aba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6abc:	7c00      	ldrb	r0, [r0, #16]
{
   b6abe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ac0:	f7fe f972 	bl	b4da8 <HAL_USB_USART_Available_Data_For_Write>
   b6ac4:	2800      	cmp	r0, #0
   b6ac6:	9901      	ldr	r1, [sp, #4]
   b6ac8:	dc01      	bgt.n	b6ace <_ZN9USBSerial5writeEh+0x16>
   b6aca:	7c60      	ldrb	r0, [r4, #17]
   b6acc:	b120      	cbz	r0, b6ad8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6ace:	7c20      	ldrb	r0, [r4, #16]
   b6ad0:	f7fe f97a 	bl	b4dc8 <HAL_USB_USART_Send_Data>
   b6ad4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6ad8:	b002      	add	sp, #8
   b6ada:	bd10      	pop	{r4, pc}

000b6adc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6adc:	7c00      	ldrb	r0, [r0, #16]
   b6ade:	f7fe b97b 	b.w	b4dd8 <HAL_USB_USART_Flush_Data>

000b6ae2 <_ZN9USBSerialD0Ev>:
   b6ae2:	b510      	push	{r4, lr}
   b6ae4:	2114      	movs	r1, #20
   b6ae6:	4604      	mov	r4, r0
   b6ae8:	f7fd fad9 	bl	b409e <_ZdlPvj>
   b6aec:	4620      	mov	r0, r4
   b6aee:	bd10      	pop	{r4, pc}

000b6af0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6af0:	b510      	push	{r4, lr}
   b6af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6af6:	4604      	mov	r4, r0
   b6af8:	4608      	mov	r0, r1
   b6afa:	2100      	movs	r1, #0
   b6afc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6b00:	4b04      	ldr	r3, [pc, #16]	; (b6b14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6b02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6b04:	2301      	movs	r3, #1
  _serial = serial;
   b6b06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6b08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6b0a:	4611      	mov	r1, r2
   b6b0c:	f7fe f92c 	bl	b4d68 <HAL_USB_USART_Init>
}
   b6b10:	4620      	mov	r0, r4
   b6b12:	bd10      	pop	{r4, pc}
   b6b14:	000b7988 	.word	0x000b7988

000b6b18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6b18:	7c00      	ldrb	r0, [r0, #16]
   b6b1a:	2200      	movs	r2, #0
   b6b1c:	f7fe b92c 	b.w	b4d78 <HAL_USB_USART_Begin>

000b6b20 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6b20:	7c00      	ldrb	r0, [r0, #16]
   b6b22:	f7fe b931 	b.w	b4d88 <HAL_USB_USART_End>

000b6b26 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6b26:	7c00      	ldrb	r0, [r0, #16]
   b6b28:	f7fe b95e 	b.w	b4de8 <HAL_USB_USART_Is_Connected>

000b6b2c <_Z19acquireSerialBufferv>:
{
   b6b2c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6b2e:	2214      	movs	r2, #20
{
   b6b30:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6b32:	2100      	movs	r1, #0
   b6b34:	f000 fbbe 	bl	b72b4 <memset>
}
   b6b38:	4620      	mov	r0, r4
   b6b3a:	bd10      	pop	{r4, pc}

000b6b3c <_Z16_fetch_usbserialv>:
{
   b6b3c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b3e:	4c0f      	ldr	r4, [pc, #60]	; (b6b7c <_Z16_fetch_usbserialv+0x40>)
{
   b6b40:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6b42:	a803      	add	r0, sp, #12
   b6b44:	f7ff fff2 	bl	b6b2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b48:	7821      	ldrb	r1, [r4, #0]
   b6b4a:	f3bf 8f5b 	dmb	ish
   b6b4e:	f011 0101 	ands.w	r1, r1, #1
   b6b52:	d10f      	bne.n	b6b74 <_Z16_fetch_usbserialv+0x38>
   b6b54:	4620      	mov	r0, r4
   b6b56:	9101      	str	r1, [sp, #4]
   b6b58:	f7fd fab0 	bl	b40bc <__cxa_guard_acquire>
   b6b5c:	9901      	ldr	r1, [sp, #4]
   b6b5e:	b148      	cbz	r0, b6b74 <_Z16_fetch_usbserialv+0x38>
   b6b60:	aa03      	add	r2, sp, #12
   b6b62:	4807      	ldr	r0, [pc, #28]	; (b6b80 <_Z16_fetch_usbserialv+0x44>)
   b6b64:	f7ff ffc4 	bl	b6af0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6b68:	4620      	mov	r0, r4
   b6b6a:	f7fd faac 	bl	b40c6 <__cxa_guard_release>
   b6b6e:	4805      	ldr	r0, [pc, #20]	; (b6b84 <_Z16_fetch_usbserialv+0x48>)
   b6b70:	f000 fb6a 	bl	b7248 <atexit>
	return _usbserial;
}
   b6b74:	4802      	ldr	r0, [pc, #8]	; (b6b80 <_Z16_fetch_usbserialv+0x44>)
   b6b76:	b008      	add	sp, #32
   b6b78:	bd10      	pop	{r4, pc}
   b6b7a:	bf00      	nop
   b6b7c:	2003e708 	.word	0x2003e708
   b6b80:	2003e70c 	.word	0x2003e70c
   b6b84:	000b6a79 	.word	0x000b6a79

000b6b88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6b88:	4b01      	ldr	r3, [pc, #4]	; (b6b90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6b8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6b8c:	4770      	bx	lr
   b6b8e:	bf00      	nop
   b6b90:	2003e5b8 	.word	0x2003e5b8

000b6b94 <serialEventRun>:
{
   b6b94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6b96:	4b0b      	ldr	r3, [pc, #44]	; (b6bc4 <serialEventRun+0x30>)
   b6b98:	b143      	cbz	r3, b6bac <serialEventRun+0x18>
   b6b9a:	f7ff ffcf 	bl	b6b3c <_Z16_fetch_usbserialv>
   b6b9e:	6803      	ldr	r3, [r0, #0]
   b6ba0:	691b      	ldr	r3, [r3, #16]
   b6ba2:	4798      	blx	r3
   b6ba4:	2800      	cmp	r0, #0
   b6ba6:	dd01      	ble.n	b6bac <serialEventRun+0x18>
        serialEvent();
   b6ba8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6bac:	4b06      	ldr	r3, [pc, #24]	; (b6bc8 <serialEventRun+0x34>)
   b6bae:	b143      	cbz	r3, b6bc2 <serialEventRun+0x2e>
   b6bb0:	f000 f8de 	bl	b6d70 <_Z22__fetch_global_Serial1v>
   b6bb4:	6803      	ldr	r3, [r0, #0]
   b6bb6:	691b      	ldr	r3, [r3, #16]
   b6bb8:	4798      	blx	r3
   b6bba:	2800      	cmp	r0, #0
   b6bbc:	dd01      	ble.n	b6bc2 <serialEventRun+0x2e>
        serialEvent1();
   b6bbe:	f3af 8000 	nop.w
}
   b6bc2:	bd08      	pop	{r3, pc}
	...

000b6bcc <_post_loop>:
{
   b6bcc:	b508      	push	{r3, lr}
	serialEventRun();
   b6bce:	f7ff ffe1 	bl	b6b94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6bd2:	f7fd fff9 	bl	b4bc8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6bd6:	4b01      	ldr	r3, [pc, #4]	; (b6bdc <_post_loop+0x10>)
   b6bd8:	6018      	str	r0, [r3, #0]
}
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	2003e728 	.word	0x2003e728

000b6be0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6be0:	4805      	ldr	r0, [pc, #20]	; (b6bf8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6be2:	4a06      	ldr	r2, [pc, #24]	; (b6bfc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6be4:	4906      	ldr	r1, [pc, #24]	; (b6c00 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6be6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6be8:	1a12      	subs	r2, r2, r0
   b6bea:	f000 fb3b 	bl	b7264 <memcpy>
    __backup_sram_signature = signature;
   b6bee:	4b05      	ldr	r3, [pc, #20]	; (b6c04 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6bf0:	4a05      	ldr	r2, [pc, #20]	; (b6c08 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6bf2:	601a      	str	r2, [r3, #0]
}
   b6bf4:	bd08      	pop	{r3, pc}
   b6bf6:	bf00      	nop
   b6bf8:	2003f400 	.word	0x2003f400
   b6bfc:	2003f404 	.word	0x2003f404
   b6c00:	000b7b74 	.word	0x000b7b74
   b6c04:	2003f400 	.word	0x2003f400
   b6c08:	9a271c1e 	.word	0x9a271c1e

000b6c0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6c0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6c0e:	2300      	movs	r3, #0
   b6c10:	9300      	str	r3, [sp, #0]
   b6c12:	461a      	mov	r2, r3
   b6c14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6c18:	f7fe f928 	bl	b4e6c <system_ctrl_set_result>
}
   b6c1c:	b003      	add	sp, #12
   b6c1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6c24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6c24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6c26:	8843      	ldrh	r3, [r0, #2]
   b6c28:	2b0a      	cmp	r3, #10
   b6c2a:	d008      	beq.n	b6c3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6c2c:	2b50      	cmp	r3, #80	; 0x50
   b6c2e:	d10b      	bne.n	b6c48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6c30:	4b09      	ldr	r3, [pc, #36]	; (b6c58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6c32:	681b      	ldr	r3, [r3, #0]
   b6c34:	b14b      	cbz	r3, b6c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6c36:	b003      	add	sp, #12
   b6c38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6c3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6c3e:	f7ff ffe5 	bl	b6c0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6c42:	b003      	add	sp, #12
   b6c44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6c48:	2300      	movs	r3, #0
   b6c4a:	9300      	str	r3, [sp, #0]
   b6c4c:	461a      	mov	r2, r3
   b6c4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6c52:	f7fe f90b 	bl	b4e6c <system_ctrl_set_result>
}
   b6c56:	e7f4      	b.n	b6c42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6c58:	2003e724 	.word	0x2003e724

000b6c5c <module_user_init_hook>:
{
   b6c5c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6c5e:	4812      	ldr	r0, [pc, #72]	; (b6ca8 <module_user_init_hook+0x4c>)
   b6c60:	2100      	movs	r1, #0
   b6c62:	f7fe f9ad 	bl	b4fc0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6c66:	4b11      	ldr	r3, [pc, #68]	; (b6cac <module_user_init_hook+0x50>)
   b6c68:	681a      	ldr	r2, [r3, #0]
   b6c6a:	4b11      	ldr	r3, [pc, #68]	; (b6cb0 <module_user_init_hook+0x54>)
   b6c6c:	429a      	cmp	r2, r3
   b6c6e:	4b11      	ldr	r3, [pc, #68]	; (b6cb4 <module_user_init_hook+0x58>)
   b6c70:	bf0c      	ite	eq
   b6c72:	2201      	moveq	r2, #1
   b6c74:	2200      	movne	r2, #0
   b6c76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6c78:	d001      	beq.n	b6c7e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6c7a:	f7ff ffb1 	bl	b6be0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6c7e:	f7fd ff93 	bl	b4ba8 <HAL_RNG_GetRandomNumber>
   b6c82:	4604      	mov	r4, r0
    srand(seed);
   b6c84:	f000 fb1e 	bl	b72c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6c88:	4b0b      	ldr	r3, [pc, #44]	; (b6cb8 <module_user_init_hook+0x5c>)
   b6c8a:	b113      	cbz	r3, b6c92 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6c92:	2100      	movs	r1, #0
   b6c94:	4808      	ldr	r0, [pc, #32]	; (b6cb8 <module_user_init_hook+0x5c>)
   b6c96:	f7fe f8fb 	bl	b4e90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6c9e:	4807      	ldr	r0, [pc, #28]	; (b6cbc <module_user_init_hook+0x60>)
   b6ca0:	2100      	movs	r1, #0
   b6ca2:	f7fe b8d9 	b.w	b4e58 <system_ctrl_set_app_request_handler>
   b6ca6:	bf00      	nop
   b6ca8:	000b6b89 	.word	0x000b6b89
   b6cac:	2003f400 	.word	0x2003f400
   b6cb0:	9a271c1e 	.word	0x9a271c1e
   b6cb4:	2003e720 	.word	0x2003e720
   b6cb8:	00000000 	.word	0x00000000
   b6cbc:	000b6c25 	.word	0x000b6c25

000b6cc0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6cc0:	4770      	bx	lr
	...

000b6cc4 <_Z17acquireWireBufferv>:
{
   b6cc4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6cc6:	2520      	movs	r5, #32
   b6cc8:	2314      	movs	r3, #20
{
   b6cca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6ccc:	6003      	str	r3, [r0, #0]
   b6cce:	6085      	str	r5, [r0, #8]
   b6cd0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6cd2:	4906      	ldr	r1, [pc, #24]	; (b6cec <_Z17acquireWireBufferv+0x28>)
   b6cd4:	4628      	mov	r0, r5
   b6cd6:	f000 f871 	bl	b6dbc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6cda:	4904      	ldr	r1, [pc, #16]	; (b6cec <_Z17acquireWireBufferv+0x28>)
	};
   b6cdc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6cde:	4628      	mov	r0, r5
   b6ce0:	f000 f86c 	bl	b6dbc <_ZnajRKSt9nothrow_t>
	};
   b6ce4:	60e0      	str	r0, [r4, #12]
}
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	bd38      	pop	{r3, r4, r5, pc}
   b6cea:	bf00      	nop
   b6cec:	000b79b0 	.word	0x000b79b0

000b6cf0 <_Z19__fetch_global_Wirev>:
{
   b6cf0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6cf2:	4d0e      	ldr	r5, [pc, #56]	; (b6d2c <_Z19__fetch_global_Wirev+0x3c>)
   b6cf4:	7829      	ldrb	r1, [r5, #0]
   b6cf6:	f3bf 8f5b 	dmb	ish
   b6cfa:	f011 0401 	ands.w	r4, r1, #1
{
   b6cfe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6d00:	d111      	bne.n	b6d26 <_Z19__fetch_global_Wirev+0x36>
   b6d02:	4628      	mov	r0, r5
   b6d04:	f7fd f9da 	bl	b40bc <__cxa_guard_acquire>
   b6d08:	b168      	cbz	r0, b6d26 <_Z19__fetch_global_Wirev+0x36>
   b6d0a:	a801      	add	r0, sp, #4
   b6d0c:	f7ff ffda 	bl	b6cc4 <_Z17acquireWireBufferv>
   b6d10:	aa01      	add	r2, sp, #4
   b6d12:	4621      	mov	r1, r4
   b6d14:	4806      	ldr	r0, [pc, #24]	; (b6d30 <_Z19__fetch_global_Wirev+0x40>)
   b6d16:	f7fe fa47 	bl	b51a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6d1a:	4628      	mov	r0, r5
   b6d1c:	f7fd f9d3 	bl	b40c6 <__cxa_guard_release>
   b6d20:	4804      	ldr	r0, [pc, #16]	; (b6d34 <_Z19__fetch_global_Wirev+0x44>)
   b6d22:	f000 fa91 	bl	b7248 <atexit>
	return wire;
}
   b6d26:	4802      	ldr	r0, [pc, #8]	; (b6d30 <_Z19__fetch_global_Wirev+0x40>)
   b6d28:	b007      	add	sp, #28
   b6d2a:	bd30      	pop	{r4, r5, pc}
   b6d2c:	2003e72c 	.word	0x2003e72c
   b6d30:	2003e730 	.word	0x2003e730
   b6d34:	000b6cc1 	.word	0x000b6cc1

000b6d38 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d38:	4770      	bx	lr
	...

000b6d3c <_Z20acquireSerial1Bufferv>:
{
   b6d3c:	b538      	push	{r3, r4, r5, lr}
   b6d3e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6d40:	2514      	movs	r5, #20
   b6d42:	462a      	mov	r2, r5
   b6d44:	2100      	movs	r1, #0
   b6d46:	f000 fab5 	bl	b72b4 <memset>
   b6d4a:	8025      	strh	r5, [r4, #0]
   b6d4c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d4e:	4907      	ldr	r1, [pc, #28]	; (b6d6c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6d50:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d52:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6d54:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d56:	f000 f831 	bl	b6dbc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d5a:	4904      	ldr	r1, [pc, #16]	; (b6d6c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6d5c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6d5e:	4628      	mov	r0, r5
   b6d60:	f000 f82c 	bl	b6dbc <_ZnajRKSt9nothrow_t>
    };
   b6d64:	60e0      	str	r0, [r4, #12]
}
   b6d66:	4620      	mov	r0, r4
   b6d68:	bd38      	pop	{r3, r4, r5, pc}
   b6d6a:	bf00      	nop
   b6d6c:	000b79b0 	.word	0x000b79b0

000b6d70 <_Z22__fetch_global_Serial1v>:
{
   b6d70:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d72:	4d0e      	ldr	r5, [pc, #56]	; (b6dac <_Z22__fetch_global_Serial1v+0x3c>)
   b6d74:	7829      	ldrb	r1, [r5, #0]
   b6d76:	f3bf 8f5b 	dmb	ish
   b6d7a:	f011 0401 	ands.w	r4, r1, #1
{
   b6d7e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d80:	d111      	bne.n	b6da6 <_Z22__fetch_global_Serial1v+0x36>
   b6d82:	4628      	mov	r0, r5
   b6d84:	f7fd f99a 	bl	b40bc <__cxa_guard_acquire>
   b6d88:	b168      	cbz	r0, b6da6 <_Z22__fetch_global_Serial1v+0x36>
   b6d8a:	a801      	add	r0, sp, #4
   b6d8c:	f7ff ffd6 	bl	b6d3c <_Z20acquireSerial1Bufferv>
   b6d90:	aa01      	add	r2, sp, #4
   b6d92:	4621      	mov	r1, r4
   b6d94:	4806      	ldr	r0, [pc, #24]	; (b6db0 <_Z22__fetch_global_Serial1v+0x40>)
   b6d96:	f7ff fe4f 	bl	b6a38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6d9a:	4628      	mov	r0, r5
   b6d9c:	f7fd f993 	bl	b40c6 <__cxa_guard_release>
   b6da0:	4804      	ldr	r0, [pc, #16]	; (b6db4 <_Z22__fetch_global_Serial1v+0x44>)
   b6da2:	f000 fa51 	bl	b7248 <atexit>
    return serial1;
}
   b6da6:	4802      	ldr	r0, [pc, #8]	; (b6db0 <_Z22__fetch_global_Serial1v+0x40>)
   b6da8:	b007      	add	sp, #28
   b6daa:	bd30      	pop	{r4, r5, pc}
   b6dac:	2003e744 	.word	0x2003e744
   b6db0:	2003e748 	.word	0x2003e748
   b6db4:	000b6d39 	.word	0x000b6d39

000b6db8 <_ZnwjRKSt9nothrow_t>:
   b6db8:	f7fd b96d 	b.w	b4096 <_Znwj>

000b6dbc <_ZnajRKSt9nothrow_t>:
   b6dbc:	f7fd b96d 	b.w	b409a <_Znaj>

000b6dc0 <__aeabi_drsub>:
   b6dc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6dc4:	e002      	b.n	b6dcc <__adddf3>
   b6dc6:	bf00      	nop

000b6dc8 <__aeabi_dsub>:
   b6dc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6dcc <__adddf3>:
   b6dcc:	b530      	push	{r4, r5, lr}
   b6dce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6dd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6dd6:	ea94 0f05 	teq	r4, r5
   b6dda:	bf08      	it	eq
   b6ddc:	ea90 0f02 	teqeq	r0, r2
   b6de0:	bf1f      	itttt	ne
   b6de2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6de6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6dea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6dee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6df2:	f000 80e2 	beq.w	b6fba <__adddf3+0x1ee>
   b6df6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6dfa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6dfe:	bfb8      	it	lt
   b6e00:	426d      	neglt	r5, r5
   b6e02:	dd0c      	ble.n	b6e1e <__adddf3+0x52>
   b6e04:	442c      	add	r4, r5
   b6e06:	ea80 0202 	eor.w	r2, r0, r2
   b6e0a:	ea81 0303 	eor.w	r3, r1, r3
   b6e0e:	ea82 0000 	eor.w	r0, r2, r0
   b6e12:	ea83 0101 	eor.w	r1, r3, r1
   b6e16:	ea80 0202 	eor.w	r2, r0, r2
   b6e1a:	ea81 0303 	eor.w	r3, r1, r3
   b6e1e:	2d36      	cmp	r5, #54	; 0x36
   b6e20:	bf88      	it	hi
   b6e22:	bd30      	pophi	{r4, r5, pc}
   b6e24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6e28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6e2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6e30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6e34:	d002      	beq.n	b6e3c <__adddf3+0x70>
   b6e36:	4240      	negs	r0, r0
   b6e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6e3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6e40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6e44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6e48:	d002      	beq.n	b6e50 <__adddf3+0x84>
   b6e4a:	4252      	negs	r2, r2
   b6e4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6e50:	ea94 0f05 	teq	r4, r5
   b6e54:	f000 80a7 	beq.w	b6fa6 <__adddf3+0x1da>
   b6e58:	f1a4 0401 	sub.w	r4, r4, #1
   b6e5c:	f1d5 0e20 	rsbs	lr, r5, #32
   b6e60:	db0d      	blt.n	b6e7e <__adddf3+0xb2>
   b6e62:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6e66:	fa22 f205 	lsr.w	r2, r2, r5
   b6e6a:	1880      	adds	r0, r0, r2
   b6e6c:	f141 0100 	adc.w	r1, r1, #0
   b6e70:	fa03 f20e 	lsl.w	r2, r3, lr
   b6e74:	1880      	adds	r0, r0, r2
   b6e76:	fa43 f305 	asr.w	r3, r3, r5
   b6e7a:	4159      	adcs	r1, r3
   b6e7c:	e00e      	b.n	b6e9c <__adddf3+0xd0>
   b6e7e:	f1a5 0520 	sub.w	r5, r5, #32
   b6e82:	f10e 0e20 	add.w	lr, lr, #32
   b6e86:	2a01      	cmp	r2, #1
   b6e88:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6e8c:	bf28      	it	cs
   b6e8e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6e92:	fa43 f305 	asr.w	r3, r3, r5
   b6e96:	18c0      	adds	r0, r0, r3
   b6e98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6e9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6ea0:	d507      	bpl.n	b6eb2 <__adddf3+0xe6>
   b6ea2:	f04f 0e00 	mov.w	lr, #0
   b6ea6:	f1dc 0c00 	rsbs	ip, ip, #0
   b6eaa:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6eae:	eb6e 0101 	sbc.w	r1, lr, r1
   b6eb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6eb6:	d31b      	bcc.n	b6ef0 <__adddf3+0x124>
   b6eb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6ebc:	d30c      	bcc.n	b6ed8 <__adddf3+0x10c>
   b6ebe:	0849      	lsrs	r1, r1, #1
   b6ec0:	ea5f 0030 	movs.w	r0, r0, rrx
   b6ec4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6ec8:	f104 0401 	add.w	r4, r4, #1
   b6ecc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6ed0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6ed4:	f080 809a 	bcs.w	b700c <__adddf3+0x240>
   b6ed8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6edc:	bf08      	it	eq
   b6ede:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6ee2:	f150 0000 	adcs.w	r0, r0, #0
   b6ee6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6eea:	ea41 0105 	orr.w	r1, r1, r5
   b6eee:	bd30      	pop	{r4, r5, pc}
   b6ef0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6ef4:	4140      	adcs	r0, r0
   b6ef6:	eb41 0101 	adc.w	r1, r1, r1
   b6efa:	3c01      	subs	r4, #1
   b6efc:	bf28      	it	cs
   b6efe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6f02:	d2e9      	bcs.n	b6ed8 <__adddf3+0x10c>
   b6f04:	f091 0f00 	teq	r1, #0
   b6f08:	bf04      	itt	eq
   b6f0a:	4601      	moveq	r1, r0
   b6f0c:	2000      	moveq	r0, #0
   b6f0e:	fab1 f381 	clz	r3, r1
   b6f12:	bf08      	it	eq
   b6f14:	3320      	addeq	r3, #32
   b6f16:	f1a3 030b 	sub.w	r3, r3, #11
   b6f1a:	f1b3 0220 	subs.w	r2, r3, #32
   b6f1e:	da0c      	bge.n	b6f3a <__adddf3+0x16e>
   b6f20:	320c      	adds	r2, #12
   b6f22:	dd08      	ble.n	b6f36 <__adddf3+0x16a>
   b6f24:	f102 0c14 	add.w	ip, r2, #20
   b6f28:	f1c2 020c 	rsb	r2, r2, #12
   b6f2c:	fa01 f00c 	lsl.w	r0, r1, ip
   b6f30:	fa21 f102 	lsr.w	r1, r1, r2
   b6f34:	e00c      	b.n	b6f50 <__adddf3+0x184>
   b6f36:	f102 0214 	add.w	r2, r2, #20
   b6f3a:	bfd8      	it	le
   b6f3c:	f1c2 0c20 	rsble	ip, r2, #32
   b6f40:	fa01 f102 	lsl.w	r1, r1, r2
   b6f44:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6f48:	bfdc      	itt	le
   b6f4a:	ea41 010c 	orrle.w	r1, r1, ip
   b6f4e:	4090      	lslle	r0, r2
   b6f50:	1ae4      	subs	r4, r4, r3
   b6f52:	bfa2      	ittt	ge
   b6f54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6f58:	4329      	orrge	r1, r5
   b6f5a:	bd30      	popge	{r4, r5, pc}
   b6f5c:	ea6f 0404 	mvn.w	r4, r4
   b6f60:	3c1f      	subs	r4, #31
   b6f62:	da1c      	bge.n	b6f9e <__adddf3+0x1d2>
   b6f64:	340c      	adds	r4, #12
   b6f66:	dc0e      	bgt.n	b6f86 <__adddf3+0x1ba>
   b6f68:	f104 0414 	add.w	r4, r4, #20
   b6f6c:	f1c4 0220 	rsb	r2, r4, #32
   b6f70:	fa20 f004 	lsr.w	r0, r0, r4
   b6f74:	fa01 f302 	lsl.w	r3, r1, r2
   b6f78:	ea40 0003 	orr.w	r0, r0, r3
   b6f7c:	fa21 f304 	lsr.w	r3, r1, r4
   b6f80:	ea45 0103 	orr.w	r1, r5, r3
   b6f84:	bd30      	pop	{r4, r5, pc}
   b6f86:	f1c4 040c 	rsb	r4, r4, #12
   b6f8a:	f1c4 0220 	rsb	r2, r4, #32
   b6f8e:	fa20 f002 	lsr.w	r0, r0, r2
   b6f92:	fa01 f304 	lsl.w	r3, r1, r4
   b6f96:	ea40 0003 	orr.w	r0, r0, r3
   b6f9a:	4629      	mov	r1, r5
   b6f9c:	bd30      	pop	{r4, r5, pc}
   b6f9e:	fa21 f004 	lsr.w	r0, r1, r4
   b6fa2:	4629      	mov	r1, r5
   b6fa4:	bd30      	pop	{r4, r5, pc}
   b6fa6:	f094 0f00 	teq	r4, #0
   b6faa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6fae:	bf06      	itte	eq
   b6fb0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6fb4:	3401      	addeq	r4, #1
   b6fb6:	3d01      	subne	r5, #1
   b6fb8:	e74e      	b.n	b6e58 <__adddf3+0x8c>
   b6fba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6fbe:	bf18      	it	ne
   b6fc0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6fc4:	d029      	beq.n	b701a <__adddf3+0x24e>
   b6fc6:	ea94 0f05 	teq	r4, r5
   b6fca:	bf08      	it	eq
   b6fcc:	ea90 0f02 	teqeq	r0, r2
   b6fd0:	d005      	beq.n	b6fde <__adddf3+0x212>
   b6fd2:	ea54 0c00 	orrs.w	ip, r4, r0
   b6fd6:	bf04      	itt	eq
   b6fd8:	4619      	moveq	r1, r3
   b6fda:	4610      	moveq	r0, r2
   b6fdc:	bd30      	pop	{r4, r5, pc}
   b6fde:	ea91 0f03 	teq	r1, r3
   b6fe2:	bf1e      	ittt	ne
   b6fe4:	2100      	movne	r1, #0
   b6fe6:	2000      	movne	r0, #0
   b6fe8:	bd30      	popne	{r4, r5, pc}
   b6fea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6fee:	d105      	bne.n	b6ffc <__adddf3+0x230>
   b6ff0:	0040      	lsls	r0, r0, #1
   b6ff2:	4149      	adcs	r1, r1
   b6ff4:	bf28      	it	cs
   b6ff6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6ffa:	bd30      	pop	{r4, r5, pc}
   b6ffc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7000:	bf3c      	itt	cc
   b7002:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7006:	bd30      	popcc	{r4, r5, pc}
   b7008:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b700c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7010:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7014:	f04f 0000 	mov.w	r0, #0
   b7018:	bd30      	pop	{r4, r5, pc}
   b701a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b701e:	bf1a      	itte	ne
   b7020:	4619      	movne	r1, r3
   b7022:	4610      	movne	r0, r2
   b7024:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7028:	bf1c      	itt	ne
   b702a:	460b      	movne	r3, r1
   b702c:	4602      	movne	r2, r0
   b702e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7032:	bf06      	itte	eq
   b7034:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7038:	ea91 0f03 	teqeq	r1, r3
   b703c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7040:	bd30      	pop	{r4, r5, pc}
   b7042:	bf00      	nop

000b7044 <__aeabi_ui2d>:
   b7044:	f090 0f00 	teq	r0, #0
   b7048:	bf04      	itt	eq
   b704a:	2100      	moveq	r1, #0
   b704c:	4770      	bxeq	lr
   b704e:	b530      	push	{r4, r5, lr}
   b7050:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7054:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7058:	f04f 0500 	mov.w	r5, #0
   b705c:	f04f 0100 	mov.w	r1, #0
   b7060:	e750      	b.n	b6f04 <__adddf3+0x138>
   b7062:	bf00      	nop

000b7064 <__aeabi_i2d>:
   b7064:	f090 0f00 	teq	r0, #0
   b7068:	bf04      	itt	eq
   b706a:	2100      	moveq	r1, #0
   b706c:	4770      	bxeq	lr
   b706e:	b530      	push	{r4, r5, lr}
   b7070:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7074:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7078:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b707c:	bf48      	it	mi
   b707e:	4240      	negmi	r0, r0
   b7080:	f04f 0100 	mov.w	r1, #0
   b7084:	e73e      	b.n	b6f04 <__adddf3+0x138>
   b7086:	bf00      	nop

000b7088 <__aeabi_f2d>:
   b7088:	0042      	lsls	r2, r0, #1
   b708a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b708e:	ea4f 0131 	mov.w	r1, r1, rrx
   b7092:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7096:	bf1f      	itttt	ne
   b7098:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b709c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b70a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b70a4:	4770      	bxne	lr
   b70a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b70aa:	bf08      	it	eq
   b70ac:	4770      	bxeq	lr
   b70ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b70b2:	bf04      	itt	eq
   b70b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b70b8:	4770      	bxeq	lr
   b70ba:	b530      	push	{r4, r5, lr}
   b70bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   b70c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b70c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b70c8:	e71c      	b.n	b6f04 <__adddf3+0x138>
   b70ca:	bf00      	nop

000b70cc <__aeabi_ul2d>:
   b70cc:	ea50 0201 	orrs.w	r2, r0, r1
   b70d0:	bf08      	it	eq
   b70d2:	4770      	bxeq	lr
   b70d4:	b530      	push	{r4, r5, lr}
   b70d6:	f04f 0500 	mov.w	r5, #0
   b70da:	e00a      	b.n	b70f2 <__aeabi_l2d+0x16>

000b70dc <__aeabi_l2d>:
   b70dc:	ea50 0201 	orrs.w	r2, r0, r1
   b70e0:	bf08      	it	eq
   b70e2:	4770      	bxeq	lr
   b70e4:	b530      	push	{r4, r5, lr}
   b70e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b70ea:	d502      	bpl.n	b70f2 <__aeabi_l2d+0x16>
   b70ec:	4240      	negs	r0, r0
   b70ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b70f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b70f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b70fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b70fe:	f43f aed8 	beq.w	b6eb2 <__adddf3+0xe6>
   b7102:	f04f 0203 	mov.w	r2, #3
   b7106:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b710a:	bf18      	it	ne
   b710c:	3203      	addne	r2, #3
   b710e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7112:	bf18      	it	ne
   b7114:	3203      	addne	r2, #3
   b7116:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b711a:	f1c2 0320 	rsb	r3, r2, #32
   b711e:	fa00 fc03 	lsl.w	ip, r0, r3
   b7122:	fa20 f002 	lsr.w	r0, r0, r2
   b7126:	fa01 fe03 	lsl.w	lr, r1, r3
   b712a:	ea40 000e 	orr.w	r0, r0, lr
   b712e:	fa21 f102 	lsr.w	r1, r1, r2
   b7132:	4414      	add	r4, r2
   b7134:	e6bd      	b.n	b6eb2 <__adddf3+0xe6>
   b7136:	bf00      	nop

000b7138 <__gedf2>:
   b7138:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b713c:	e006      	b.n	b714c <__cmpdf2+0x4>
   b713e:	bf00      	nop

000b7140 <__ledf2>:
   b7140:	f04f 0c01 	mov.w	ip, #1
   b7144:	e002      	b.n	b714c <__cmpdf2+0x4>
   b7146:	bf00      	nop

000b7148 <__cmpdf2>:
   b7148:	f04f 0c01 	mov.w	ip, #1
   b714c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7158:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b715c:	bf18      	it	ne
   b715e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7162:	d01b      	beq.n	b719c <__cmpdf2+0x54>
   b7164:	b001      	add	sp, #4
   b7166:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b716a:	bf0c      	ite	eq
   b716c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7170:	ea91 0f03 	teqne	r1, r3
   b7174:	bf02      	ittt	eq
   b7176:	ea90 0f02 	teqeq	r0, r2
   b717a:	2000      	moveq	r0, #0
   b717c:	4770      	bxeq	lr
   b717e:	f110 0f00 	cmn.w	r0, #0
   b7182:	ea91 0f03 	teq	r1, r3
   b7186:	bf58      	it	pl
   b7188:	4299      	cmppl	r1, r3
   b718a:	bf08      	it	eq
   b718c:	4290      	cmpeq	r0, r2
   b718e:	bf2c      	ite	cs
   b7190:	17d8      	asrcs	r0, r3, #31
   b7192:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7196:	f040 0001 	orr.w	r0, r0, #1
   b719a:	4770      	bx	lr
   b719c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b71a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b71a4:	d102      	bne.n	b71ac <__cmpdf2+0x64>
   b71a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b71aa:	d107      	bne.n	b71bc <__cmpdf2+0x74>
   b71ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b71b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b71b4:	d1d6      	bne.n	b7164 <__cmpdf2+0x1c>
   b71b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b71ba:	d0d3      	beq.n	b7164 <__cmpdf2+0x1c>
   b71bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   b71c0:	4770      	bx	lr
   b71c2:	bf00      	nop

000b71c4 <__aeabi_cdrcmple>:
   b71c4:	4684      	mov	ip, r0
   b71c6:	4610      	mov	r0, r2
   b71c8:	4662      	mov	r2, ip
   b71ca:	468c      	mov	ip, r1
   b71cc:	4619      	mov	r1, r3
   b71ce:	4663      	mov	r3, ip
   b71d0:	e000      	b.n	b71d4 <__aeabi_cdcmpeq>
   b71d2:	bf00      	nop

000b71d4 <__aeabi_cdcmpeq>:
   b71d4:	b501      	push	{r0, lr}
   b71d6:	f7ff ffb7 	bl	b7148 <__cmpdf2>
   b71da:	2800      	cmp	r0, #0
   b71dc:	bf48      	it	mi
   b71de:	f110 0f00 	cmnmi.w	r0, #0
   b71e2:	bd01      	pop	{r0, pc}

000b71e4 <__aeabi_dcmpeq>:
   b71e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b71e8:	f7ff fff4 	bl	b71d4 <__aeabi_cdcmpeq>
   b71ec:	bf0c      	ite	eq
   b71ee:	2001      	moveq	r0, #1
   b71f0:	2000      	movne	r0, #0
   b71f2:	f85d fb08 	ldr.w	pc, [sp], #8
   b71f6:	bf00      	nop

000b71f8 <__aeabi_dcmplt>:
   b71f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b71fc:	f7ff ffea 	bl	b71d4 <__aeabi_cdcmpeq>
   b7200:	bf34      	ite	cc
   b7202:	2001      	movcc	r0, #1
   b7204:	2000      	movcs	r0, #0
   b7206:	f85d fb08 	ldr.w	pc, [sp], #8
   b720a:	bf00      	nop

000b720c <__aeabi_dcmple>:
   b720c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7210:	f7ff ffe0 	bl	b71d4 <__aeabi_cdcmpeq>
   b7214:	bf94      	ite	ls
   b7216:	2001      	movls	r0, #1
   b7218:	2000      	movhi	r0, #0
   b721a:	f85d fb08 	ldr.w	pc, [sp], #8
   b721e:	bf00      	nop

000b7220 <__aeabi_dcmpge>:
   b7220:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7224:	f7ff ffce 	bl	b71c4 <__aeabi_cdrcmple>
   b7228:	bf94      	ite	ls
   b722a:	2001      	movls	r0, #1
   b722c:	2000      	movhi	r0, #0
   b722e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7232:	bf00      	nop

000b7234 <__aeabi_dcmpgt>:
   b7234:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7238:	f7ff ffc4 	bl	b71c4 <__aeabi_cdrcmple>
   b723c:	bf34      	ite	cc
   b723e:	2001      	movcc	r0, #1
   b7240:	2000      	movcs	r0, #0
   b7242:	f85d fb08 	ldr.w	pc, [sp], #8
   b7246:	bf00      	nop

000b7248 <atexit>:
   b7248:	2300      	movs	r3, #0
   b724a:	4601      	mov	r1, r0
   b724c:	461a      	mov	r2, r3
   b724e:	4618      	mov	r0, r3
   b7250:	f000 b94c 	b.w	b74ec <__register_exitproc>

000b7254 <isprint>:
   b7254:	4b02      	ldr	r3, [pc, #8]	; (b7260 <isprint+0xc>)
   b7256:	4418      	add	r0, r3
   b7258:	7840      	ldrb	r0, [r0, #1]
   b725a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b725e:	4770      	bx	lr
   b7260:	000b7a21 	.word	0x000b7a21

000b7264 <memcpy>:
   b7264:	440a      	add	r2, r1
   b7266:	4291      	cmp	r1, r2
   b7268:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b726c:	d100      	bne.n	b7270 <memcpy+0xc>
   b726e:	4770      	bx	lr
   b7270:	b510      	push	{r4, lr}
   b7272:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7276:	f803 4f01 	strb.w	r4, [r3, #1]!
   b727a:	4291      	cmp	r1, r2
   b727c:	d1f9      	bne.n	b7272 <memcpy+0xe>
   b727e:	bd10      	pop	{r4, pc}

000b7280 <memmove>:
   b7280:	4288      	cmp	r0, r1
   b7282:	b510      	push	{r4, lr}
   b7284:	eb01 0402 	add.w	r4, r1, r2
   b7288:	d902      	bls.n	b7290 <memmove+0x10>
   b728a:	4284      	cmp	r4, r0
   b728c:	4623      	mov	r3, r4
   b728e:	d807      	bhi.n	b72a0 <memmove+0x20>
   b7290:	1e43      	subs	r3, r0, #1
   b7292:	42a1      	cmp	r1, r4
   b7294:	d008      	beq.n	b72a8 <memmove+0x28>
   b7296:	f811 2b01 	ldrb.w	r2, [r1], #1
   b729a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b729e:	e7f8      	b.n	b7292 <memmove+0x12>
   b72a0:	4402      	add	r2, r0
   b72a2:	4601      	mov	r1, r0
   b72a4:	428a      	cmp	r2, r1
   b72a6:	d100      	bne.n	b72aa <memmove+0x2a>
   b72a8:	bd10      	pop	{r4, pc}
   b72aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b72ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b72b2:	e7f7      	b.n	b72a4 <memmove+0x24>

000b72b4 <memset>:
   b72b4:	4402      	add	r2, r0
   b72b6:	4603      	mov	r3, r0
   b72b8:	4293      	cmp	r3, r2
   b72ba:	d100      	bne.n	b72be <memset+0xa>
   b72bc:	4770      	bx	lr
   b72be:	f803 1b01 	strb.w	r1, [r3], #1
   b72c2:	e7f9      	b.n	b72b8 <memset+0x4>

000b72c4 <srand>:
   b72c4:	b538      	push	{r3, r4, r5, lr}
   b72c6:	4b10      	ldr	r3, [pc, #64]	; (b7308 <srand+0x44>)
   b72c8:	681d      	ldr	r5, [r3, #0]
   b72ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b72cc:	4604      	mov	r4, r0
   b72ce:	b9b3      	cbnz	r3, b72fe <srand+0x3a>
   b72d0:	2018      	movs	r0, #24
   b72d2:	f7fd fe45 	bl	b4f60 <malloc>
   b72d6:	4602      	mov	r2, r0
   b72d8:	63a8      	str	r0, [r5, #56]	; 0x38
   b72da:	b920      	cbnz	r0, b72e6 <srand+0x22>
   b72dc:	4b0b      	ldr	r3, [pc, #44]	; (b730c <srand+0x48>)
   b72de:	480c      	ldr	r0, [pc, #48]	; (b7310 <srand+0x4c>)
   b72e0:	2142      	movs	r1, #66	; 0x42
   b72e2:	f7fd fe65 	bl	b4fb0 <__assert_func>
   b72e6:	490b      	ldr	r1, [pc, #44]	; (b7314 <srand+0x50>)
   b72e8:	4b0b      	ldr	r3, [pc, #44]	; (b7318 <srand+0x54>)
   b72ea:	e9c0 1300 	strd	r1, r3, [r0]
   b72ee:	4b0b      	ldr	r3, [pc, #44]	; (b731c <srand+0x58>)
   b72f0:	6083      	str	r3, [r0, #8]
   b72f2:	230b      	movs	r3, #11
   b72f4:	8183      	strh	r3, [r0, #12]
   b72f6:	2100      	movs	r1, #0
   b72f8:	2001      	movs	r0, #1
   b72fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b72fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7300:	2200      	movs	r2, #0
   b7302:	611c      	str	r4, [r3, #16]
   b7304:	615a      	str	r2, [r3, #20]
   b7306:	bd38      	pop	{r3, r4, r5, pc}
   b7308:	2003e5b8 	.word	0x2003e5b8
   b730c:	000b79b1 	.word	0x000b79b1
   b7310:	000b79c8 	.word	0x000b79c8
   b7314:	abcd330e 	.word	0xabcd330e
   b7318:	e66d1234 	.word	0xe66d1234
   b731c:	0005deec 	.word	0x0005deec

000b7320 <strchr>:
   b7320:	b2c9      	uxtb	r1, r1
   b7322:	4603      	mov	r3, r0
   b7324:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7328:	b11a      	cbz	r2, b7332 <strchr+0x12>
   b732a:	428a      	cmp	r2, r1
   b732c:	d1f9      	bne.n	b7322 <strchr+0x2>
   b732e:	4618      	mov	r0, r3
   b7330:	4770      	bx	lr
   b7332:	2900      	cmp	r1, #0
   b7334:	bf18      	it	ne
   b7336:	2300      	movne	r3, #0
   b7338:	e7f9      	b.n	b732e <strchr+0xe>

000b733a <strchrnul>:
   b733a:	b510      	push	{r4, lr}
   b733c:	4604      	mov	r4, r0
   b733e:	f7ff ffef 	bl	b7320 <strchr>
   b7342:	b918      	cbnz	r0, b734c <strchrnul+0x12>
   b7344:	4620      	mov	r0, r4
   b7346:	f000 f814 	bl	b7372 <strlen>
   b734a:	4420      	add	r0, r4
   b734c:	bd10      	pop	{r4, pc}

000b734e <strcmp>:
   b734e:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7352:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7356:	2a01      	cmp	r2, #1
   b7358:	bf28      	it	cs
   b735a:	429a      	cmpcs	r2, r3
   b735c:	d0f7      	beq.n	b734e <strcmp>
   b735e:	1ad0      	subs	r0, r2, r3
   b7360:	4770      	bx	lr

000b7362 <strcpy>:
   b7362:	4603      	mov	r3, r0
   b7364:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7368:	f803 2b01 	strb.w	r2, [r3], #1
   b736c:	2a00      	cmp	r2, #0
   b736e:	d1f9      	bne.n	b7364 <strcpy+0x2>
   b7370:	4770      	bx	lr

000b7372 <strlen>:
   b7372:	4603      	mov	r3, r0
   b7374:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7378:	2a00      	cmp	r2, #0
   b737a:	d1fb      	bne.n	b7374 <strlen+0x2>
   b737c:	1a18      	subs	r0, r3, r0
   b737e:	3801      	subs	r0, #1
   b7380:	4770      	bx	lr

000b7382 <strncmp>:
   b7382:	b510      	push	{r4, lr}
   b7384:	b17a      	cbz	r2, b73a6 <strncmp+0x24>
   b7386:	4603      	mov	r3, r0
   b7388:	3901      	subs	r1, #1
   b738a:	1884      	adds	r4, r0, r2
   b738c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7390:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7394:	4290      	cmp	r0, r2
   b7396:	d101      	bne.n	b739c <strncmp+0x1a>
   b7398:	42a3      	cmp	r3, r4
   b739a:	d101      	bne.n	b73a0 <strncmp+0x1e>
   b739c:	1a80      	subs	r0, r0, r2
   b739e:	bd10      	pop	{r4, pc}
   b73a0:	2800      	cmp	r0, #0
   b73a2:	d1f3      	bne.n	b738c <strncmp+0xa>
   b73a4:	e7fa      	b.n	b739c <strncmp+0x1a>
   b73a6:	4610      	mov	r0, r2
   b73a8:	e7f9      	b.n	b739e <strncmp+0x1c>

000b73aa <strrchr>:
   b73aa:	b538      	push	{r3, r4, r5, lr}
   b73ac:	4603      	mov	r3, r0
   b73ae:	460c      	mov	r4, r1
   b73b0:	b969      	cbnz	r1, b73ce <strrchr+0x24>
   b73b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b73b6:	f7ff bfb3 	b.w	b7320 <strchr>
   b73ba:	1c43      	adds	r3, r0, #1
   b73bc:	4605      	mov	r5, r0
   b73be:	4621      	mov	r1, r4
   b73c0:	4618      	mov	r0, r3
   b73c2:	f7ff ffad 	bl	b7320 <strchr>
   b73c6:	2800      	cmp	r0, #0
   b73c8:	d1f7      	bne.n	b73ba <strrchr+0x10>
   b73ca:	4628      	mov	r0, r5
   b73cc:	bd38      	pop	{r3, r4, r5, pc}
   b73ce:	2500      	movs	r5, #0
   b73d0:	e7f5      	b.n	b73be <strrchr+0x14>
	...

000b73d4 <_strtol_l.constprop.0>:
   b73d4:	2b01      	cmp	r3, #1
   b73d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b73da:	d001      	beq.n	b73e0 <_strtol_l.constprop.0+0xc>
   b73dc:	2b24      	cmp	r3, #36	; 0x24
   b73de:	d906      	bls.n	b73ee <_strtol_l.constprop.0+0x1a>
   b73e0:	f7fd fdde 	bl	b4fa0 <__errno>
   b73e4:	2316      	movs	r3, #22
   b73e6:	6003      	str	r3, [r0, #0]
   b73e8:	2000      	movs	r0, #0
   b73ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b73ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b74d4 <_strtol_l.constprop.0+0x100>
   b73f2:	460d      	mov	r5, r1
   b73f4:	462e      	mov	r6, r5
   b73f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b73fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   b73fe:	f017 0708 	ands.w	r7, r7, #8
   b7402:	d1f7      	bne.n	b73f4 <_strtol_l.constprop.0+0x20>
   b7404:	2c2d      	cmp	r4, #45	; 0x2d
   b7406:	d132      	bne.n	b746e <_strtol_l.constprop.0+0x9a>
   b7408:	782c      	ldrb	r4, [r5, #0]
   b740a:	2701      	movs	r7, #1
   b740c:	1cb5      	adds	r5, r6, #2
   b740e:	2b00      	cmp	r3, #0
   b7410:	d05b      	beq.n	b74ca <_strtol_l.constprop.0+0xf6>
   b7412:	2b10      	cmp	r3, #16
   b7414:	d109      	bne.n	b742a <_strtol_l.constprop.0+0x56>
   b7416:	2c30      	cmp	r4, #48	; 0x30
   b7418:	d107      	bne.n	b742a <_strtol_l.constprop.0+0x56>
   b741a:	782c      	ldrb	r4, [r5, #0]
   b741c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7420:	2c58      	cmp	r4, #88	; 0x58
   b7422:	d14d      	bne.n	b74c0 <_strtol_l.constprop.0+0xec>
   b7424:	786c      	ldrb	r4, [r5, #1]
   b7426:	2310      	movs	r3, #16
   b7428:	3502      	adds	r5, #2
   b742a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b742e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7432:	f04f 0c00 	mov.w	ip, #0
   b7436:	fbb8 f9f3 	udiv	r9, r8, r3
   b743a:	4666      	mov	r6, ip
   b743c:	fb03 8a19 	mls	sl, r3, r9, r8
   b7440:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7444:	f1be 0f09 	cmp.w	lr, #9
   b7448:	d816      	bhi.n	b7478 <_strtol_l.constprop.0+0xa4>
   b744a:	4674      	mov	r4, lr
   b744c:	42a3      	cmp	r3, r4
   b744e:	dd24      	ble.n	b749a <_strtol_l.constprop.0+0xc6>
   b7450:	f1bc 0f00 	cmp.w	ip, #0
   b7454:	db1e      	blt.n	b7494 <_strtol_l.constprop.0+0xc0>
   b7456:	45b1      	cmp	r9, r6
   b7458:	d31c      	bcc.n	b7494 <_strtol_l.constprop.0+0xc0>
   b745a:	d101      	bne.n	b7460 <_strtol_l.constprop.0+0x8c>
   b745c:	45a2      	cmp	sl, r4
   b745e:	db19      	blt.n	b7494 <_strtol_l.constprop.0+0xc0>
   b7460:	fb06 4603 	mla	r6, r6, r3, r4
   b7464:	f04f 0c01 	mov.w	ip, #1
   b7468:	f815 4b01 	ldrb.w	r4, [r5], #1
   b746c:	e7e8      	b.n	b7440 <_strtol_l.constprop.0+0x6c>
   b746e:	2c2b      	cmp	r4, #43	; 0x2b
   b7470:	bf04      	itt	eq
   b7472:	782c      	ldrbeq	r4, [r5, #0]
   b7474:	1cb5      	addeq	r5, r6, #2
   b7476:	e7ca      	b.n	b740e <_strtol_l.constprop.0+0x3a>
   b7478:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b747c:	f1be 0f19 	cmp.w	lr, #25
   b7480:	d801      	bhi.n	b7486 <_strtol_l.constprop.0+0xb2>
   b7482:	3c37      	subs	r4, #55	; 0x37
   b7484:	e7e2      	b.n	b744c <_strtol_l.constprop.0+0x78>
   b7486:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b748a:	f1be 0f19 	cmp.w	lr, #25
   b748e:	d804      	bhi.n	b749a <_strtol_l.constprop.0+0xc6>
   b7490:	3c57      	subs	r4, #87	; 0x57
   b7492:	e7db      	b.n	b744c <_strtol_l.constprop.0+0x78>
   b7494:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7498:	e7e6      	b.n	b7468 <_strtol_l.constprop.0+0x94>
   b749a:	f1bc 0f00 	cmp.w	ip, #0
   b749e:	da05      	bge.n	b74ac <_strtol_l.constprop.0+0xd8>
   b74a0:	2322      	movs	r3, #34	; 0x22
   b74a2:	6003      	str	r3, [r0, #0]
   b74a4:	4646      	mov	r6, r8
   b74a6:	b942      	cbnz	r2, b74ba <_strtol_l.constprop.0+0xe6>
   b74a8:	4630      	mov	r0, r6
   b74aa:	e79e      	b.n	b73ea <_strtol_l.constprop.0+0x16>
   b74ac:	b107      	cbz	r7, b74b0 <_strtol_l.constprop.0+0xdc>
   b74ae:	4276      	negs	r6, r6
   b74b0:	2a00      	cmp	r2, #0
   b74b2:	d0f9      	beq.n	b74a8 <_strtol_l.constprop.0+0xd4>
   b74b4:	f1bc 0f00 	cmp.w	ip, #0
   b74b8:	d000      	beq.n	b74bc <_strtol_l.constprop.0+0xe8>
   b74ba:	1e69      	subs	r1, r5, #1
   b74bc:	6011      	str	r1, [r2, #0]
   b74be:	e7f3      	b.n	b74a8 <_strtol_l.constprop.0+0xd4>
   b74c0:	2430      	movs	r4, #48	; 0x30
   b74c2:	2b00      	cmp	r3, #0
   b74c4:	d1b1      	bne.n	b742a <_strtol_l.constprop.0+0x56>
   b74c6:	2308      	movs	r3, #8
   b74c8:	e7af      	b.n	b742a <_strtol_l.constprop.0+0x56>
   b74ca:	2c30      	cmp	r4, #48	; 0x30
   b74cc:	d0a5      	beq.n	b741a <_strtol_l.constprop.0+0x46>
   b74ce:	230a      	movs	r3, #10
   b74d0:	e7ab      	b.n	b742a <_strtol_l.constprop.0+0x56>
   b74d2:	bf00      	nop
   b74d4:	000b7a22 	.word	0x000b7a22

000b74d8 <strtol>:
   b74d8:	4613      	mov	r3, r2
   b74da:	460a      	mov	r2, r1
   b74dc:	4601      	mov	r1, r0
   b74de:	4802      	ldr	r0, [pc, #8]	; (b74e8 <strtol+0x10>)
   b74e0:	6800      	ldr	r0, [r0, #0]
   b74e2:	f7ff bf77 	b.w	b73d4 <_strtol_l.constprop.0>
   b74e6:	bf00      	nop
   b74e8:	2003e5b8 	.word	0x2003e5b8

000b74ec <__register_exitproc>:
   b74ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b74f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b75ac <__register_exitproc+0xc0>
   b74f4:	4606      	mov	r6, r0
   b74f6:	f8d8 0000 	ldr.w	r0, [r8]
   b74fa:	461f      	mov	r7, r3
   b74fc:	460d      	mov	r5, r1
   b74fe:	4691      	mov	r9, r2
   b7500:	f000 f856 	bl	b75b0 <__retarget_lock_acquire_recursive>
   b7504:	4b25      	ldr	r3, [pc, #148]	; (b759c <__register_exitproc+0xb0>)
   b7506:	681c      	ldr	r4, [r3, #0]
   b7508:	b934      	cbnz	r4, b7518 <__register_exitproc+0x2c>
   b750a:	4c25      	ldr	r4, [pc, #148]	; (b75a0 <__register_exitproc+0xb4>)
   b750c:	601c      	str	r4, [r3, #0]
   b750e:	4b25      	ldr	r3, [pc, #148]	; (b75a4 <__register_exitproc+0xb8>)
   b7510:	b113      	cbz	r3, b7518 <__register_exitproc+0x2c>
   b7512:	681b      	ldr	r3, [r3, #0]
   b7514:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7518:	6863      	ldr	r3, [r4, #4]
   b751a:	2b1f      	cmp	r3, #31
   b751c:	dd07      	ble.n	b752e <__register_exitproc+0x42>
   b751e:	f8d8 0000 	ldr.w	r0, [r8]
   b7522:	f000 f847 	bl	b75b4 <__retarget_lock_release_recursive>
   b7526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b752e:	b34e      	cbz	r6, b7584 <__register_exitproc+0x98>
   b7530:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7534:	b988      	cbnz	r0, b755a <__register_exitproc+0x6e>
   b7536:	4b1c      	ldr	r3, [pc, #112]	; (b75a8 <__register_exitproc+0xbc>)
   b7538:	b923      	cbnz	r3, b7544 <__register_exitproc+0x58>
   b753a:	f8d8 0000 	ldr.w	r0, [r8]
   b753e:	f000 f838 	bl	b75b2 <__retarget_lock_release>
   b7542:	e7f0      	b.n	b7526 <__register_exitproc+0x3a>
   b7544:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7548:	f7fd fd0a 	bl	b4f60 <malloc>
   b754c:	2800      	cmp	r0, #0
   b754e:	d0f4      	beq.n	b753a <__register_exitproc+0x4e>
   b7550:	2300      	movs	r3, #0
   b7552:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7556:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b755a:	6863      	ldr	r3, [r4, #4]
   b755c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7560:	2201      	movs	r2, #1
   b7562:	409a      	lsls	r2, r3
   b7564:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7568:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b756c:	4313      	orrs	r3, r2
   b756e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7572:	2e02      	cmp	r6, #2
   b7574:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7578:	bf02      	ittt	eq
   b757a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b757e:	4313      	orreq	r3, r2
   b7580:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7584:	6863      	ldr	r3, [r4, #4]
   b7586:	f8d8 0000 	ldr.w	r0, [r8]
   b758a:	1c5a      	adds	r2, r3, #1
   b758c:	3302      	adds	r3, #2
   b758e:	6062      	str	r2, [r4, #4]
   b7590:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7594:	f000 f80e 	bl	b75b4 <__retarget_lock_release_recursive>
   b7598:	2000      	movs	r0, #0
   b759a:	e7c6      	b.n	b752a <__register_exitproc+0x3e>
   b759c:	2003e7e8 	.word	0x2003e7e8
   b75a0:	2003e75c 	.word	0x2003e75c
   b75a4:	00000000 	.word	0x00000000
   b75a8:	000b4f61 	.word	0x000b4f61
   b75ac:	2003e61c 	.word	0x2003e61c

000b75b0 <__retarget_lock_acquire_recursive>:
   b75b0:	4770      	bx	lr

000b75b2 <__retarget_lock_release>:
   b75b2:	4770      	bx	lr

000b75b4 <__retarget_lock_release_recursive>:
   b75b4:	4770      	bx	lr

000b75b6 <link_code_end>:
	...

000b75b8 <dynalib_user>:
   b75b8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b75c8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b75d8:	7620 7269 7574 6c61 4600 6f72 206d 6e61      virtual.From an
   b75e8:	746f 6568 2072 6f6d 7564 656c 003a 7325     other module:.%s
   b75f8:	203a 6425 202c 6425 202c 6c25 2c66 2520     : %d, %d, %lf, %
   b7608:	0073 0000                                   s...

000b760c <_ZTV10MB85RC256V>:
	...
   b7614:	410d 000b 4121 000b 471d 000b 47b3 000b     .A..!A...G...G..
   b7624:	4835 000b                                   5H..

000b7628 <_ZTV16MyPersistentData>:
	...
   b7630:	422d 000b 419d 000b 417b 000b 48ed 000b     -B...A..{A...H..
   b7640:	4915 000b 4aa5 000b 4b3d 000b 40e1 000b     .I...J..=K...@..
   b7650:	40f9 000b 6661 6574 2072 6f6c 6461 6e69     .@..after loadin
   b7660:	0067 6574 7473 6e69 2167 6100 7466 7265     g.testing!.after
   b7670:	7520 6470 7461 0065                          update.

000b7678 <_ZTVN5spark10LogHandlerE>:
	...
   b7688:	40a5 000b 43f5 000b                         .@...C..

000b7690 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7698:	4401 000b 4435 000b 62d5 000b 43f7 000b     .D..5D...b...C..

000b76a8 <_ZTV6MB85RC>:
	...
   b76b0:	46dd 000b 46df 000b 471d 000b 47b3 000b     .F...F...G...G..
   b76c0:	4835 000b 6f67 3a74 6d20 6761 6369 253d     5H..got: magic=%
   b76d0:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   b76e0:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   b76f0:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   b7700:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   b7710:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   b7720:	253d 3830 0078 0000                         =%08x...

000b7728 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   b7730:	48e7 000b 4963 000b 48e5 000b 48ed 000b     .H..cI...H...H..
   b7740:	4915 000b 4aa5 000b 4b3d 000b               .I...J..=K..

000b774c <_ZTVN5spark13CellularClassE>:
	...
   b7754:	509b 000b 5091 000b 5087 000b 503d 000b     .P...P...P..=P..
   b7764:	507b 000b 506f 000b 662d 000b 6635 000b     {P..oP..-f..5f..
   b7774:	5063 000b 505b 000b 5051 000b 5047 000b     cP..[P..QP..GP..
   b7784:	6665 000b                                   ef..

000b7788 <_ZTVN5spark13EthernetClassE>:
	...
   b7790:	5133 000b 5129 000b 511f 000b 5115 000b     3Q..)Q...Q...Q..
   b77a0:	5109 000b 50fd 000b 662d 000b 6635 000b     .Q...P..-f..5f..
   b77b0:	50f1 000b 50e9 000b 50df 000b 50d5 000b     .P...P...P...P..
   b77c0:	6665 000b                                   ef..

000b77c4 <_ZTV7TwoWire>:
	...
   b77cc:	5151 000b 519b 000b 5173 000b 5153 000b     QQ...Q..sQ..SQ..
   b77dc:	517b 000b 5183 000b 518b 000b 5193 000b     {Q...Q...Q...Q..

000b77ec <_ZTV9IPAddress>:
	...
   b77f4:	5275 000b 5265 000b 5267 000b 6425 2500     uR..eR..gR..%d.%
   b7804:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b7814:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b7824:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b7834:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b7844:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b7854:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b7864:	0a0d 6d00 6600 6c00 006e 6e66 7400 6300     ...m.f.ln.fn.t.c
   b7874:	646f 0065 6564 6174 6c69 0000               ode.detail..

000b7880 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7888:	5721 000b 5747 000b 5705 000b 5383 000b     !W..GW...W...S..

000b7898 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b78a0:	5b7d 000b 5b95 000b 62d5 000b 43f7 000b     }[...[...b...C..

000b78b0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b78b8:	5ba9 000b 5bbd 000b 6479 000b 570d 000b     .[...[..yd...W..

000b78c8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b78d0:	571f 000b 5755 000b 6239 000b 570f 000b     .W..UW..9b...W..

000b78e0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b78e8:	571d 000b 5763 000b 5ae5 000b 5785 000b     .W..cW...Z...W..

000b78f8 <_ZTVN5spark12NetworkClassE>:
	...
   b7900:	65ed 000b 65f7 000b 6601 000b 660b 000b     .e...e...f...f..
   b7910:	6615 000b 6621 000b 662d 000b 6635 000b     .f..!f..-f..5f..
   b7920:	663d 000b 6649 000b 6651 000b 665b 000b     =f..If..Qf..[f..
   b7930:	6665 000b 5925 252d 2d6d 6425 2554 3a48     ef..%Y-%m-%dT%H:
   b7940:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7950 <_ZTV11USARTSerial>:
	...
   b7958:	69bd 000b 6a29 000b 6a01 000b 6751 000b     .i..)j...j..Qg..
   b7968:	69d1 000b 69ed 000b 69df 000b 69fb 000b     .i...i...i...i..
   b7978:	69bf 000b 69c3 000b                         .i...i..

000b7980 <_ZTV9USBSerial>:
	...
   b7988:	6a7b 000b 6ae3 000b 6ab9 000b 6751 000b     {j...j...j..Qg..
   b7998:	6aab 000b 6a7d 000b 6a8d 000b 6add 000b     .j..}j...j...j..
   b79a8:	6a9d 000b 6a75 000b                         .j..uj..

000b79b0 <_ZSt7nothrow>:
   b79b0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b79c0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b79d0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b79e0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b79f0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7a00:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7a10:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7a21 <_ctype_>:
   b7a21:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7a31:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7a41:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7a51:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7a61:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7a71:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7a81:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7a91:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7aa1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7b22 <link_const_variable_data_end>:
	...

000b7b24 <link_constructors_location>:
   b7b24:	000b43d1 	.word	0x000b43d1
   b7b28:	000b4631 	.word	0x000b4631
   b7b2c:	000b502d 	.word	0x000b502d
   b7b30:	000b50a5 	.word	0x000b50a5
   b7b34:	000b513d 	.word	0x000b513d
   b7b38:	000b62c5 	.word	0x000b62c5
   b7b3c:	000b673d 	.word	0x000b673d
   b7b40:	000b685d 	.word	0x000b685d
   b7b44:	000b6985 	.word	0x000b6985
   b7b48:	000b69a9 	.word	0x000b69a9

000b7b4c <link_constructors_end>:
   b7b4c:	00000000 	.word	0x00000000
